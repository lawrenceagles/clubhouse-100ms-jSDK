import { HMSMessage, HMSPeer, HMSPeerID, HMSRoom, HMSRoomState, HMSStore } from '../schema';
import { HMSRole } from '../hmsSDKStore/sdkTypes';
/**
 * Select the current {@link HMSRoom} object to which you are connected.
 * @param store
 */
export declare const selectRoom: (store: HMSStore) => HMSRoom;
/**
 * @internal
 */
export declare const selectPeersMap: (store: HMSStore) => Record<HMSPeerID, HMSPeer>;
/**
 * @internal
 */
export declare const selectMessagesMap: (store: HMSStore) => Record<string, HMSMessage>;
/**
 * Select IDs of messages you've sent or received sorted chronologically.
 */
export declare const selectMessageIDsInOrder: (store: HMSStore) => string[];
/**
 * @internal
 */
export declare const selectTracksMap: (store: HMSStore) => Record<string, import("../schema").HMSTrack>;
/**
 * Select your media settings
 * i.e., choosen audio input device, audio output device and video input device.
 * @param store
 */
export declare const selectLocalMediaSettings: (store: HMSStore) => import("../schema").HMSMediaSettings;
/**
 * Select the available audio input, audio output and video input devices on your machine.
 * @param store
 * @returns An object of array of available audio input, audio output and video input devices.
 * ```
 * type DeviceMap = {
 *   audioInput: InputDeviceInfo[];
 *   audioOutput: MediaDeviceInfo[];
 *   videoInput: InputDeviceInfo[];
 * }
 * ```
 */
export declare const selectDevices: (store: HMSStore) => Pick<import("@100mslive/hms-video/dist/interfaces/HMSDeviceManager").HMSDeviceManager, "audioInput" | "audioOutput" | "videoInput">;
export declare const selectSpeakers: (store: HMSStore) => Record<string, import("../schema").HMSSpeaker>;
/**
 * Select a boolean flag denoting whether you've joined a room.
 * NOTE: Returns true only after join, returns false during preview.
 */
export declare const selectIsConnectedToRoom: import("reselect").OutputSelector<HMSStore, boolean | undefined, (res: HMSRoom) => boolean | undefined>;
export declare const selectPeerCount: import("reselect").OutputSelector<HMSStore, number, (res: HMSRoom) => number>;
/**
 * Select an array of peers(remote peers and your local peer) present in the room.
 */
export declare const selectPeers: import("reselect").OutputSelector<HMSStore, HMSPeer[], (res1: HMSRoom, res2: Record<string, HMSPeer>) => HMSPeer[]>;
/**
 * Select the local peer object object assigned to you.
 */
export declare const selectLocalPeer: import("reselect").OutputSelector<HMSStore, HMSPeer, (res1: HMSRoom, res2: Record<string, HMSPeer>) => HMSPeer>;
/**
 * Select the peer ID of your local peer.
 */
export declare const selectLocalPeerID: import("reselect").OutputSelector<HMSStore, string, (res: HMSRoom) => string>;
/**
 * Select the track ID of your local peer's primary audio track
 */
export declare const selectLocalAudioTrackID: import("reselect").OutputSelector<HMSStore, string | undefined, (res: HMSPeer) => string | undefined>;
/**
 * Select the track ID of your local peer's primary video track
 */
export declare const selectLocalVideoTrackID: import("reselect").OutputSelector<HMSStore, string | undefined, (res: HMSPeer) => string | undefined>;
/**
 * Select an array of track IDs of all your local peer's tracks
 */
export declare const selectLocalTrackIDs: import("reselect").OutputSelector<HMSStore, string[], (res1: string | undefined, res2: string | undefined, res3: string[]) => string[]>;
/**
 * Select remote peers(other users you're connected with via the internet) present in the room.
 */
export declare const selectRemotePeers: import("reselect").OutputSelector<HMSStore, HMSPeer[], (res: HMSPeer[]) => HMSPeer[]>;
/**
 * Select the peer who's speaking the loudest at the moment
 */
export declare const selectDominantSpeaker: import("reselect").OutputSelector<HMSStore, HMSPeer | null, (res1: Record<string, HMSPeer>, res2: Record<string, import("../schema").HMSSpeaker>) => HMSPeer | null>;
/**
 * Select a boolean denoting whether your local audio is unmuted
 * and the audio from your microphone is shared to remote peers
 */
export declare const selectIsLocalAudioEnabled: (store: HMSStore) => boolean;
/**
 * Select a boolean denoting whether your local video is unmuted
 * and the video from your camera is shared to remote peers
 */
export declare const selectIsLocalVideoEnabled: (store: HMSStore) => boolean;
/**
 * Select a boolean denoting whether you've chosen to unmute and share your local video.
 *
 * NOTE: Once you call `hmsActions.setLocalVideoEnabled(true)`to unmute your local video,
 * it takes some time to fetch your video from your video source.
 * This displayEnabled property gives immediate feedback for a more interactive UI,
 * without waiting for the video source
 */
export declare const selectIsLocalVideoDisplayEnabled: (store: HMSStore) => boolean | undefined;
/**
 * Select a boolean denoting whether your screen is shared to remote peers in the room.
 */
export declare const selectIsLocalScreenShared: import("reselect").OutputSelector<HMSStore, boolean, (res1: HMSPeer, res2: Record<string, import("../schema").HMSTrack>) => boolean>;
/**
 * Select the first peer who is currently sharing their screen.
 */
export declare const selectPeerScreenSharing: import("reselect").OutputSelector<HMSStore, HMSPeer | undefined, (res1: Record<string, HMSPeer>, res2: Record<string, import("../schema").HMSTrack>) => HMSPeer | undefined>;
/**
 * Select a boolean denoting whether someone is sharing screen in the room.
 */
export declare const selectIsSomeoneScreenSharing: import("reselect").OutputSelector<HMSStore, boolean, (res: HMSPeer | undefined) => boolean>;
/**
 * Select the first peer who is currently sharing their audio only screen
 */
export declare const selectPeerSharingAudio: import("reselect").OutputSelector<HMSStore, HMSPeer | undefined, (res1: Record<string, HMSPeer>, res2: Record<string, import("../schema").HMSTrack>) => HMSPeer | undefined>;
/**
 * Select an array of peers who are currently sharing their screen.
 */
export declare const selectPeersScreenSharing: import("reselect").OutputSelector<HMSStore, HMSPeer[], (res1: Record<string, HMSPeer>, res2: Record<string, import("../schema").HMSTrack>) => HMSPeer[]>;
export declare const selectPeerSharingVideoPlaylist: import("reselect").OutputSelector<HMSStore, HMSPeer | undefined, (res1: Record<string, HMSPeer>, res2: Record<string, import("../schema").HMSTrack>) => HMSPeer | undefined>;
/**
 * Select an array of tracks that have been degraded(receiving lower video quality/no video) due to bad network locally.
 */
export declare const selectDegradedTracks: import("reselect").OutputSelector<HMSStore, import("../schema").HMSTrack[], (res: import("../schema").HMSTrack[]) => import("../schema").HMSTrack[]>;
/**
 * Select the number of messages(sent and received).
 */
export declare const selectHMSMessagesCount: import("reselect").OutputSelector<HMSStore, number, (res: string[]) => number>;
/**
 * Select the number of unread messages.
 */
export declare const selectUnreadHMSMessagesCount: import("reselect").OutputSelector<HMSStore, number, (res: Record<string, HMSMessage>) => number>;
/**
 * Select an array of messages in the room(sent and received).
 */
export declare const selectHMSMessages: import("reselect").OutputSelector<HMSStore, HMSMessage[], (res1: string[], res2: Record<string, HMSMessage>) => HMSMessage[]>;
/**
 * Select the current state of the room.
 */
export declare const selectRoomState: import("reselect").OutputSelector<HMSStore, HMSRoomState, (res: HMSRoom) => HMSRoomState>;
/**
 * Select a boolean denoting whether the room is in Preview state.
 */
export declare const selectIsInPreview: import("reselect").OutputSelector<HMSStore, boolean, (res: HMSRoomState) => boolean>;
export declare const selectRoomStarted: import("reselect").OutputSelector<HMSStore, boolean, (res: HMSRoom) => boolean>;
/**
 * Select available roles in the room as a map between the role name and {@link HMSRole} object.
 */
export declare const selectRolesMap: (store: HMSStore) => Record<string, HMSRole>;
/**
 * Select an array of names of available roles in the room.
 */
export declare const selectAvailableRoleNames: import("reselect").OutputSelector<HMSStore, string[], (res: Record<string, HMSRole>) => string[]>;
/**
 * Select the {@link HMSRole} object of your local peer.
 */
export declare const selectLocalPeerRole: import("reselect").OutputSelector<HMSStore, HMSRole | null, (res1: HMSPeer, res2: Record<string, HMSRole>) => HMSRole | null>;
/**
 * Select a boolean denoting whether if your local peer is allowed to subscribe to any other role.
 */
export declare const selectIsAllowedToSubscribe: import("reselect").OutputSelector<HMSStore, boolean, (res: HMSRole | null) => boolean>;
/**
 * Select the permissions which determine what actions the local peer can do.
 */
export declare const selectPermissions: import("reselect").OutputSelector<HMSStore, {
    endRoom: boolean;
    removeOthers: boolean;
    unmute: boolean;
    mute: boolean;
    changeRole: boolean;
} | undefined, (res: HMSRole | null) => {
    endRoom: boolean;
    removeOthers: boolean;
    unmute: boolean;
    mute: boolean;
    changeRole: boolean;
} | undefined>;
export declare const selectRecordingState: import("reselect").OutputSelector<HMSStore, import("@100mslive/hms-video/dist/interfaces/room").HMSRecording, (res: HMSRoom) => import("@100mslive/hms-video/dist/interfaces/room").HMSRecording>;
export declare const selectRTMPState: import("reselect").OutputSelector<HMSStore, import("@100mslive/hms-video/dist/interfaces/room").HMSRTMP, (res: HMSRoom) => import("@100mslive/hms-video/dist/interfaces/room").HMSRTMP>;
