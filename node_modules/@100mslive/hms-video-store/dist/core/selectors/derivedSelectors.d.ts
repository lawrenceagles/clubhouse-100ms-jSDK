import { HMSPeer, HMSStore } from '../schema';
import { HMSRole } from '@100mslive/hms-video';
export interface HMSPeerWithMuteStatus {
    peer: HMSPeer;
    isAudioEnabled?: boolean;
}
/**
 * @privateRemarks
 * this is more friendly to UI format, the object in store has only peer id and role name instead of the full objects
 */
export interface HMSRoleChangeRequest {
    requestedBy: HMSPeer;
    role: HMSRole;
    token: string;
}
export interface HMSPublishAllowed {
    video: boolean;
    audio: boolean;
    screen: boolean;
}
export declare const selectPeersWithAudioStatus: import("reselect").OutputSelector<HMSStore, HMSPeerWithMuteStatus[], (res1: Record<string, HMSPeer>, res2: Record<string, import("../schema").HMSTrack>) => HMSPeerWithMuteStatus[]>;
/**
 * Select the role change request received for your local peer.
 */
export declare const selectRoleChangeRequest: import("reselect").OutputSelector<HMSStore, HMSRoleChangeRequest | null, (res1: import("../schema").HMSRoleChangeStoreRequest, res2: Record<string, HMSPeer>, res3: Record<string, HMSRole>) => HMSRoleChangeRequest | null>;
/**
 * Select what streams is the local peer allowed to publish from video, audio and screenshare.
 */
export declare const selectIsAllowedToPublish: import("reselect").OutputSelector<HMSStore, HMSPublishAllowed, (res: HMSRole | null) => HMSPublishAllowed>;
