import { HMSStore, HMSTrack } from '../schema';
/**
 * StoreSelector is a function that takes in {@link HMSStore} as argument
 * and returns a part of the store that is queried using the selector.
 * @typeParam T Part of the store that you wish to query.
 */
declare type StoreSelector<T> = (store: HMSStore) => T;
/**
 * Select the {@link HMSPeer} object given a peer ID.
 */
export declare const selectPeerByID: (id?: string | undefined) => StoreSelector<import("../schema").HMSPeer | null>;
/**
 * Select the name of a {@link HMSPeer} given a peer ID.
 */
export declare const selectPeerNameByID: (id?: string | undefined) => StoreSelector<string | undefined>;
/**
 * Select the {@link HMSTrack} object given a track ID.
 */
export declare const selectTrackByID: (id?: string | undefined) => StoreSelector<HMSTrack | null>;
/**
 * Select the primary video track of a peer given a peer ID.
 */
export declare const selectVideoTrackByPeerID: (id?: string | undefined) => StoreSelector<HMSTrack | undefined>;
/**
 * Select the primary audio track of a peer given a peer ID.
 */
export declare const selectAudioTrackByPeerID: (id?: string | undefined) => StoreSelector<HMSTrack | undefined>;
/**
 * Select the camera stream of a peer given a peer ID.
 * This is the primary video track of a peer.
 */
export declare const selectCameraStreamByPeerID: (id?: string | undefined) => StoreSelector<HMSTrack | undefined>;
/**
 * Select an array of auxiliary tracks of a peer given a peer ID.
 */
export declare const selectAuxiliaryTracksByPeerID: (id?: string | undefined) => StoreSelector<HMSTrack[]>;
/**
 * Select the audio level of a track given a track ID.
 */
export declare const selectTrackAudioByID: (id?: string | undefined) => StoreSelector<number>;
/**
 * Select audio level of audioTrack of a peer given a peer IDÃŸ.
 */
export declare const selectPeerAudioByID: (id?: string | undefined) => StoreSelector<number>;
/**
 * Select the first auxiliary audio track of a peer given a peer ID.
 */
export declare const selectAuxiliaryAudioByPeerID: (id?: string | undefined) => StoreSelector<HMSTrack | undefined>;
export declare const selectVideoPlaylistVideoTrackByPeerID: (id?: string | undefined) => StoreSelector<HMSTrack | undefined>;
export declare const selectVideoPlaylistAudioTrackByPeerID: (id?: string | undefined) => StoreSelector<HMSTrack | undefined>;
export declare const selectAudioPlaylistTrackByPeerID: (id?: string | undefined) => StoreSelector<HMSTrack | undefined>;
export declare const selectScreenSharesByPeerId: (id?: string | undefined) => StoreSelector<{
    video: HMSTrack | undefined;
    audio: HMSTrack | undefined;
}>;
/**
 * Select the screen share video track of a peer given a peer ID.
 */
export declare const selectScreenShareByPeerID: (id?: string | undefined) => import("reselect").OutputSelector<HMSStore, HMSTrack | undefined, (res: {
    video: HMSTrack | undefined;
    audio: HMSTrack | undefined;
}) => HMSTrack | undefined>;
/**
 * Select the screen share audio track of a peer given a peer ID.
 */
export declare const selectScreenShareAudioByPeerID: (id?: string | undefined) => import("reselect").OutputSelector<HMSStore, HMSTrack | undefined, (res: {
    video: HMSTrack | undefined;
    audio: HMSTrack | undefined;
}) => HMSTrack | undefined>;
/**
 * Select a boolean denoting whether a peer has unmuted audio and sharing it to other peers.
 */
export declare const selectIsPeerAudioEnabled: (id?: string | undefined) => StoreSelector<boolean>;
/**
 * Select a boolean denoting whether a peer has unmuted video and sharing it to other peers.
 */
export declare const selectIsPeerVideoEnabled: (id?: string | undefined) => StoreSelector<boolean>;
/**
 * Select a boolean denoting whether you've muted an audio track locally(only for you) given a track ID.
 */
export declare const selectIsAudioLocallyMuted: (id?: string | undefined) => StoreSelector<boolean | undefined>;
/**
 * Select a boolean denoting whether you've muted the primary audio track of a peer locally(only for you) given a peer ID.
 */
export declare const selectIsLocallyMutedByPeerID: (id?: string | undefined) => StoreSelector<boolean | undefined>;
/**
 * Select a boolean denoting whether you've muted the screen share audio track of a peer locally(only for you) given a peer ID.
 */
export declare const selectIsScreenShareLocallyMutedByPeerID: (id?: string | undefined) => StoreSelector<boolean | undefined>;
/**
 * Select the local audio volume of an audio track given a track ID.
 *
 * NOTE: **Volume** of a track is different from **Audio Level** of a track,
 * - Audio Level measures the audio of a track and it comes from 100ms's servers.
 * - Volume is how loud you hear the audio of a track, this is controlled by you at the client side.
 */
export declare const selectAudioTrackVolume: (id?: string | undefined) => StoreSelector<number | undefined>;
/**
 * Select the local audio volume of the primary audio track of a peer given a peer ID.
 */
export declare const selectAudioVolumeByPeerID: (id?: string | undefined) => StoreSelector<number | undefined>;
/**
 * Select the local audio volume of the screen share of a peer given a peer ID.
 */
export declare const selectScreenshareAudioVolumeByPeerID: (id?: string | undefined) => StoreSelector<number | undefined>;
/**
 * Select the current simulcast layer of a track given a track ID.
 */
export declare const selectSimulcastLayerByTrack: (id?: string | undefined) => StoreSelector<import("@100mslive/hms-video").HMSSimulcastLayer | undefined>;
export declare const selectBroadcastMessages: import("reselect").OutputSelector<HMSStore, import("../schema").HMSMessage[], (res: import("../schema").HMSMessage[]) => import("../schema").HMSMessage[]>;
export declare const selectBroadcastMessagesUnreadCount: import("reselect").OutputSelector<HMSStore, number, (res: import("../schema").HMSMessage[]) => number>;
export declare const selectMessagesByPeerID: (id?: string | undefined) => StoreSelector<import("../schema").HMSMessage[] | undefined>;
export declare const selectMessagesByRole: (id?: string | undefined) => StoreSelector<import("../schema").HMSMessage[] | undefined>;
export declare const selectMessagesUnreadCountByRole: (id?: string | undefined) => StoreSelector<number>;
export declare const selectMessagesUnreadCountByPeerID: (id?: string | undefined) => StoreSelector<number>;
export {};
