import { HMSRoleChangeRequest as SDKHMSRoleChangeRequest, HMSTrack as SDKHMSTrack } from '@100mslive/hms-video';
import { HMSDeviceChangeEvent, HMSException, HMSMessage, HMSPeer, HMSPeerID, HMSPlaylistItem, HMSRole, HMSRoleChangeStoreRequest, HMSRoleName, HMSRoom, HMSTrack } from '../schema';
import * as sdkTypes from './sdkTypes';
export declare class SDKToHMS {
    static convertPeer(sdkPeer: sdkTypes.HMSPeer): Partial<HMSPeer> & Pick<HMSPeer, 'id'>;
    static convertTrack(sdkTrack: SDKHMSTrack, peerId?: HMSPeerID): HMSTrack;
    static enrichTrack(track: HMSTrack, sdkTrack: SDKHMSTrack): void;
    static enrichVideoTrack(track: HMSTrack, sdkTrack: SDKHMSTrack): void;
    static enrichPluginsDetails(track: HMSTrack, sdkTrack: SDKHMSTrack): void;
    static convertRoom(sdkRoom: sdkTypes.HMSRoom): Partial<HMSRoom>;
    static convertMessage(sdkMessage: sdkTypes.HMSMessage): Partial<HMSMessage> & Pick<HMSMessage, 'sender'>;
    static convertRoles(sdkRoles: HMSRole[]): Record<HMSRoleName, HMSRole>;
    static convertRoleChangeRequest(req: SDKHMSRoleChangeRequest): HMSRoleChangeStoreRequest;
    static convertException(sdkException: sdkTypes.HMSException): HMSException;
    static convertDeviceChangeUpdate(sdkDeviceChangeEvent: sdkTypes.HMSDeviceChangeEvent): HMSDeviceChangeEvent;
    static convertPlaylist(playlistManager: sdkTypes.HMSPlaylistManager): {
        audio: {
            list: Record<string, HMSPlaylistItem<any>>;
            selection: {
                id: string | undefined;
                hasPrevious: boolean;
                hasNext: boolean;
            };
            progress: number;
            volume: number;
            currentTime: number;
        };
        video: {
            list: Record<string, HMSPlaylistItem<any>>;
            selection: {
                id: string | undefined;
                hasPrevious: boolean;
                hasNext: boolean;
            };
            progress: number;
            volume: number;
            currentTime: number;
        };
    };
    private static getConvertedPlaylistType;
    static convertRecordingRTMPState(recording: sdkTypes.HMSRecording | undefined, rtmp: sdkTypes.HMSRTMP | undefined): {
        recording: sdkTypes.HMSRecording;
        rtmp: sdkTypes.HMSRTMP;
    };
}
