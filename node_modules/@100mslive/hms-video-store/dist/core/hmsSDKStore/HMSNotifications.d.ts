import { IHMSNotifications } from '../IHMSNotifications';
import { IHMSStore } from '../IHMSStore';
import * as sdkTypes from './sdkTypes';
import { HMSNotification, HMSPeer, HMSException, HMSMessage, HMSTrackID, HMSChangeTrackStateRequest, HMSChangeMultiTrackStateRequest, HMSLeaveRoomRequest, HMSDeviceChangeEvent } from '../schema';
export declare class HMSNotifications implements IHMSNotifications {
    private id;
    private eventEmitter;
    private store;
    constructor(store: IHMSStore);
    onNotification: (cb: (notification: HMSNotification) => void) => (() => void);
    sendDeviceChange(request: HMSDeviceChangeEvent): void;
    sendLeaveRoom(request: HMSLeaveRoomRequest): void;
    sendPeerList(peers: HMSPeer[]): void;
    sendPeerUpdate(type: sdkTypes.HMSPeerUpdate, peer: HMSPeer | null): void;
    sendTrackUpdate(type: sdkTypes.HMSTrackUpdate, trackID: HMSTrackID): void;
    sendMessageReceived(message: HMSMessage): void;
    sendError(error: HMSException): void;
    sendReconnecting(error: HMSException): void;
    sendReconnected(): void;
    sendChangeTrackStateRequest(request: HMSChangeTrackStateRequest): void;
    sendChangeMultiTrackStateRequest(request: HMSChangeMultiTrackStateRequest): void;
    private emitEvent;
    private createNotification;
}
