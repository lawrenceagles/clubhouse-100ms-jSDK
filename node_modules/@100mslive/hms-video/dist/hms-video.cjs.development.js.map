{"version":3,"file":"hms-video.cjs.development.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/connection/model.ts","../src/utils/logger.ts","../src/utils/presence.ts","../src/utils/session-description.ts","../src/error/ErrorCodes.ts","../src/error/HMSException.ts","../src/error/ErrorFactory.ts","../src/connection/index.ts","../src/utils/constants.ts","../src/connection/publish/index.ts","../src/media/streams/HMSMediaStream.ts","../src/interfaces/update-listener.ts","../src/interfaces/room.ts","../src/interfaces/simulcast-layers.ts","../src/interfaces/track-settings.ts","../src/interfaces/playlist.ts","../src/media/streams/HMSRemoteStream.ts","../src/connection/HMSDataChannel.ts","../src/media/tracks/HMSTrack.ts","../src/media/tracks/HMSTrackType.ts","../src/media/tracks/HMSAudioTrack.ts","../src/media/tracks/HMSRemoteAudioTrack.ts","../src/media/tracks/HMSVideoTrack.ts","../src/media/tracks/HMSRemoteVideoTrack.ts","../src/connection/subscribe/index.ts","../src/utils/support.ts","../src/signal/init/index.ts","../src/signal/jsonrpc/models.ts","../src/signal/jsonrpc/index.ts","../src/media/settings/HMSAudioTrackSettings.ts","../src/media/settings/HMSVideoTrackSettings.ts","../src/media/settings/HMSTrackSettings.ts","../src/error/utils.ts","../src/utils/track.ts","../src/utils/typed-event-emitter.ts","../src/utils/track-audio-level-monitor.ts","../src/plugins/audio/HMSAudioPlugin.ts","../src/analytics/AnalyticsEventDomains.ts","../src/analytics/domain-analytics.ts","../src/analytics/AnalyticsEvent.ts","../src/analytics/AnalyticsEventLevel.ts","../src/analytics/MediaPluginsAnalyticsFactory.ts","../src/analytics/AnalyticsEventsService.ts","../src/plugins/audio/AudioPluginsAnalytics.ts","../src/plugins/audio/HMSAudioPluginsManager.ts","../src/utils/local-storage.ts","../src/device-manager/DeviceStorage.ts","../src/media/tracks/HMSLocalAudioTrack.ts","../src/plugins/video/HMSVideoPlugin.ts","../src/utils/timer-utils.ts","../src/utils/math.ts","../src/plugins/video/VideoPluginsAnalytics.ts","../src/plugins/video/HMSVideoPluginsManager.ts","../src/media/tracks/HMSLocalVideoTrack.ts","../src/media/streams/HMSLocalStream.ts","../src/notification-manager/HMSNotificationMethod.ts","../src/notification-manager/managers/ActiveSpeakerManager.ts","../src/sdk/models/HMSMessage.ts","../src/sdk/models/peer/HMSPeer.ts","../src/utils/id-factory.ts","../src/sdk/models/peer/HMSLocalPeer.ts","../src/sdk/models/peer/HMSRemotePeer.ts","../src/notification-manager/managers/BroadcastManager.ts","../src/notification-manager/managers/PeerListManager.ts","../src/notification-manager/managers/PeerManager.ts","../src/notification-manager/managers/PolicyChangeManager.ts","../src/notification-manager/managers/RequestManager.ts","../src/notification-manager/managers/RoomUpdateManager.ts","../src/notification-manager/managers/TrackManager.ts","../src/notification-manager/NotificationManager.ts","../src/notification-manager/HMSNotifications.ts","../src/transport/models/TransportState.ts","../src/analytics/AnalyticsEventFactory.ts","../src/transport/models/JoinParameters.ts","../src/transport/models/TransportFailureCategory.ts","../src/utils/promise.ts","../src/transport/RetryScheduler.ts","../src/analytics/AnalyticsTransport.ts","../src/utils/queue.ts","../src/analytics/signal-transport/LocalStoageEvents.ts","../src/analytics/signal-transport/SignalAnalyticsTransport.ts","../src/rtc-stats/RTCStatsMonitor.ts","../src/degradation/TrackDegradationController.ts","../src/transport/index.ts","../src/utils/jwt.ts","../src/sdk/models/HMSRoom.ts","../src/audio-sink-manager/AudioSinkManager.ts","../src/device-manager/DeviceManager.ts","../src/device-manager/AudioOutputManager.ts","../src/sdk/store/Comparator.ts","../src/sdk/store/Store.ts","../src/sdk/RoleChangeManager.ts","../src/sdk/LocalTrackManager.ts","../src/playlist-manager/AudioContextManager.ts","../src/playlist-manager/PlaylistAudioManager.ts","../src/playlist-manager/PlaylistVideoManager.ts","../src/playlist-manager/PlaylistManager.ts","../src/sdk/index.ts","../src/utils/media.ts","../src/utils/device-error.ts","../src/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","export enum HMSConnectionRole {\n  Publish = 0,\n  Subscribe = 1,\n}\n\nexport interface HMSTrickle {\n  candidate: RTCIceCandidateInit;\n  target: HMSConnectionRole;\n}\n","export enum HMSLogLevel {\n  VERBOSE,\n  DEBUG,\n  INFO,\n  WARN,\n  TIME,\n  TIMEEND,\n  ERROR,\n  NONE,\n}\n\n/**\n * TODO: fix this so logs show the real file and line numbers where they originated from instead of this class\n * https://stackoverflow.com/questions/13815640/a-proper-wrapper-for-console-log-with-correct-line-number\n */\nexport default class HMSLogger {\n  static level: HMSLogLevel = HMSLogLevel.VERBOSE;\n\n  static v(tag: string, ...data: any[]) {\n    this.log(HMSLogLevel.VERBOSE, tag, ...data);\n  }\n\n  static d(tag: string, ...data: any[]) {\n    this.log(HMSLogLevel.DEBUG, tag, ...data);\n  }\n\n  static i(tag: string, ...data: any[]) {\n    this.log(HMSLogLevel.INFO, tag, ...data);\n  }\n\n  static w(tag: string, ...data: any[]) {\n    this.log(HMSLogLevel.WARN, tag, ...data);\n  }\n\n  static e(tag: string, ...data: any[]) {\n    this.log(HMSLogLevel.ERROR, tag, ...data);\n  }\n\n  static time(mark: string) {\n    this.log(HMSLogLevel.TIME, '[HMSPerformanceTiming]', mark);\n  }\n\n  static timeEnd(mark: string) {\n    this.log(HMSLogLevel.TIMEEND, '[HMSPerformanceTiming]', mark, mark);\n  }\n\n  static cleanUp() {\n    performance.clearMarks();\n    performance.clearMeasures();\n  }\n\n  private static log(level: HMSLogLevel, tag: string, ...data: any[]) {\n    if (this.level.valueOf() > level.valueOf()) {\n      return;\n    }\n\n    switch (level) {\n      case HMSLogLevel.VERBOSE: {\n        console.log(tag, ...data);\n        break;\n      }\n      case HMSLogLevel.DEBUG: {\n        console.debug(tag, ...data);\n        break;\n      }\n      case HMSLogLevel.INFO: {\n        console.info(tag, ...data);\n        break;\n      }\n      case HMSLogLevel.WARN: {\n        console.warn(tag, ...data);\n        break;\n      }\n      case HMSLogLevel.ERROR: {\n        console.error(tag, ...data);\n        break;\n      }\n      case HMSLogLevel.TIME: {\n        performance.mark(data[0]);\n        break;\n      }\n      case HMSLogLevel.TIMEEND: {\n        const mark = data[0];\n        try {\n          const entry = performance.measure(mark, mark);\n          // @ts-ignore\n          this.log(HMSLogLevel.DEBUG, tag, mark, entry?.duration);\n          performance.clearMarks(mark);\n          performance.clearMeasures(mark);\n        } catch (error) {\n          this.log(HMSLogLevel.DEBUG, tag, mark, error);\n        }\n        break;\n      }\n    }\n  }\n}\n","/**\n * Check only for presence(not truthy) of a value.\n * Use in places where 0, false need to be considered valid.\n */\nexport function isPresent(value: any) {\n  return value !== undefined && value !== null;\n}\n","import * as sdpTransform from 'sdp-transform';\nimport { TrackState } from '../notification-manager';\nimport { isPresent } from './presence';\n\n/**\n * @DISCUSS: Should we have a wrapper over RTCSessionDescriptionInit(SDP) and have these methods in it?\n */\n\nexport function fixMsid(desc: RTCSessionDescriptionInit, tracks: Map<string, TrackState>): RTCSessionDescriptionInit {\n  const parsedSdp = sdpTransform.parse(desc.sdp!);\n\n  if (!parsedSdp.origin?.username.startsWith('mozilla')) {\n    // This isn't firefox, so we return the original offer without doing anything\n    return desc;\n  }\n\n  const mediaTracks = Array.from(tracks.values());\n\n  parsedSdp.media.forEach((m) => {\n    const streamId = m.msid?.split(' ')[0];\n    // check for both type and streamid as both video and screenshare have same type but different stream_id\n    const trackId = mediaTracks.find((val) => val.type === m.type && val.stream_id === streamId)?.track_id;\n    if (trackId) {\n      m.msid = m.msid?.replace(/\\s(.+)/, ` ${trackId}`);\n    }\n  });\n\n  return { type: desc.type, sdp: sdpTransform.write(parsedSdp) };\n}\n\n/**\n * Get the track ID from the SDP using the transceiver's mid from RTCTrackEvent\n * @TODO: This could take more processing time in a large room and when the SDP is big.\n * Consider using this for Firefox only?\n */\nexport function getSdpTrackIdForMid(\n  desc?: RTCSessionDescriptionInit | null,\n  mid?: RTCRtpTransceiver['mid'],\n): string | undefined {\n  if (!desc?.sdp || !mid) {\n    return undefined;\n  }\n  const parsedSdp = sdpTransform.parse(desc.sdp);\n  const trackSection = parsedSdp.media.find((media) => isPresent(media.mid) && parseInt(media.mid!) === parseInt(mid));\n  const trackId = trackSection?.msid?.split(' ')[1];\n  return trackId;\n}\n\nexport function enableOpusDtx(desc: RTCSessionDescriptionInit): RTCSessionDescriptionInit {\n  if (desc.sdp!.includes('usedtx=1')) return desc;\n\n  return { type: desc.type, sdp: desc.sdp!.replace('useinbandfec=1', 'useinbandfec=1;usedtx=1') };\n}\n","/*\n * ErrorCodes.ts\n *\n * Created by codegen\n * Copyright © 2021 100ms. All rights reserved.\n */\n\nexport const ErrorCodes = {\n  WebSocketConnectionErrors: {\n    // Something went wrong\n    GENERIC_CONNECT: 1000,\n\n    // Network connection lost\n    WEBSOCKET_CONNECTION_LOST: 1003,\n  },\n\n  InitAPIErrors: {\n    // [INIT]: Server error\n    SERVER_ERRORS: 2000,\n\n    // [INIT]: Network error\n    CONNECTION_LOST: 2001,\n\n    // Bad Request\n    HTTP_ERROR: 2400,\n\n    // Endpoint URL is invalid\n    INVALID_ENDPOINT_URL: 2002,\n\n    // Endpoint is not reachable.\n    ENDPOINT_UNREACHABLE: 2003,\n\n    // Token is not in proper JWT format\n    INVALID_TOKEN_FORMAT: 2004,\n  },\n\n  TracksErrors: {\n    // [PUBLISH]: Something went wrong\n    GENERIC_TRACK: 3000,\n\n    // [PUBLISH]: No permission to access capture device - {device_type}\n    CANT_ACCESS_CAPTURE_DEVICE: 3001,\n\n    // [PUBLISH]: Capture device is no longer available - {device_type}\n    DEVICE_NOT_AVAILABLE: 3002,\n\n    // [PUBLISH]: Capture device is in use by another application - {device_type}\n    DEVICE_IN_USE: 3003,\n\n    // Lost access to capture device midway - {device_type}\n    DEVICE_LOST_MIDWAY: 3008,\n\n    // There is no media to return. Please select either video or audio or both.\n    NOTHING_TO_RETURN: 3005,\n\n    // Cannot enable simulcast when no video settings are provided\n    INVALID_VIDEO_SETTINGS: 3006,\n\n    // Codec can't be changed mid call.\n    CODEC_CHANGE_NOT_PERMITTED: 3007,\n\n    // When the browser throws autoplay exception if something is played before interacting\n    AUTOPLAY_ERROR: 3008,\n  },\n\n  WebrtcErrors: {\n    // [{action}]: Failed to create offer.\n    CREATE_OFFER_FAILED: 4001,\n\n    // [{action}]: Failed to create answer.\n    CREATE_ANSWER_FAILED: 4002,\n\n    // [{action}]: Failed to set offer.\n    SET_LOCAL_DESCRIPTION_FAILED: 4003,\n\n    // [{action}]: Failed to set answer.\n    SET_REMOTE_DESCRIPTION_FAILED: 4004,\n\n    // [{action}]: Ice connection state FAILED\n    ICE_FAILURE: 4005,\n  },\n\n  WebsocketMethodErrors: {\n    // [JOIN]: {server_error}\n    SERVER_ERRORS: 5000,\n\n    // [JOIN]: You have already joined this room.\n    ALREADY_JOINED: 5001,\n\n    // [JOIN]: Cannot join if preview is in progress\n    CANNOT_JOIN_PREVIEW_IN_PROGRESS: 5002,\n  },\n\n  GenericErrors: {\n    // Client is not connected\n    NOT_CONNECTED: 6000,\n\n    // Unknown signalling error: {action} {error_info}\n    SIGNALLING: 6001,\n\n    // Unknown exception: {error_info}\n    UNKNOWN: 6002,\n\n    // WebRTC engine is not ready yet\n    NOT_READY: 6003,\n\n    // Failed to parse JSON message - {json_message}\n    JSON_PARSING_FAILED: 6004,\n\n    // Track Metadata Missing\n    TRACK_METADATA_MISSING: 6005,\n\n    // RTC Track missing\n    RTC_TRACK_MISSING: 6006,\n\n    // Peer Metadata Missing\n    PEER_METADATA_MISSING: 6007,\n\n    // Joined with invalid role\n    INVALID_ROLE: 6008,\n  },\n\n  PlaylistErrors: {\n    NO_ENTRY_TO_PLAY: 8001,\n    NO_ENTRY_IS_PLAYING: 8002,\n  },\n};\n","import { IAnalyticsPropertiesProvider } from '../analytics/IAnalyticsPropertiesProvider';\nimport { HMSAction } from './ErrorFactory';\n\nexport class HMSException extends Error implements IAnalyticsPropertiesProvider {\n  action: string;\n  nativeError?: Error;\n\n  constructor(\n    public readonly code: number,\n    public name: string,\n    action: HMSAction,\n    public message: string,\n    public description: string,\n    public isTerminal: boolean = false,\n  ) {\n    super(message);\n\n    // Ref: https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, HMSException.prototype);\n    this.action = action.toString();\n  }\n\n  toAnalyticsProperties() {\n    return {\n      error_name: this.name,\n      error_code: this.code,\n      error_message: this.message,\n      error_description: this.description,\n      action: this.action,\n      is_terminal: this.isTerminal,\n    };\n  }\n\n  addNativeError(error: Error) {\n    this.nativeError = error;\n  }\n}\n","/*\n * ErrorFactory.ts\n *\n * Created by codegen\n * Copyright © 2021 100ms. All rights reserved.\n */\n\nimport { ErrorCodes } from './ErrorCodes';\nimport { HMSException } from './HMSException';\n\nexport enum HMSAction {\n  NONE = 'NONE',\n  TRACK = 'TRACK',\n  INIT = 'INIT',\n  PUBLISH = 'PUBLISH',\n  UNPUBLISH = 'UNPUBLISH',\n  JOIN = 'JOIN',\n  SUBSCRIBE = 'SUBSCRIBE',\n  DATA_CHANNEL_SEND = 'DATA_CHANNEL_SEND',\n  RESTART_ICE = 'RESTART_ICE',\n  VIDEO_PLUGINS = 'VIDEO_PLUGINS',\n  AUDIO_PLUGINS = 'AUDIO_PLUGINS',\n  AUTOPLAY = 'AUTOPLAY',\n  RECONNECT_SIGNAL = 'RECONNECT_SIGNAL',\n  VALIDATION = 'VALIDATION',\n  PLAYLIST = 'PLAYLIST',\n}\n\nexport const ErrorFactory = {\n  WebSocketConnectionErrors: {\n    GenericConnect(action: HMSAction, description: string = '') {\n      return new HMSException(1000, 'GenericConnect', action, `Something went wrong`, description);\n    },\n\n    WebSocketConnectionLost(action: HMSAction, description: string = '') {\n      return new HMSException(1003, 'WebSocketConnectionLost', action, `Network connection lost `, description);\n    },\n  },\n\n  InitAPIErrors: {\n    ServerErrors(code: number, action: HMSAction, description: string = '') {\n      return new HMSException(code, 'ServerErrors', action, `[INIT]: Server error`, description);\n    },\n\n    ConnectionLost(action: HMSAction, description: string = '') {\n      return new HMSException(2001, 'ConnectionLost', action, `[INIT]: Network error`, description);\n    },\n\n    HTTPError(code: number, action: HMSAction, description: string = '') {\n      return new HMSException(code, 'HTTPError', action, `[INIT]: Bad Request`, description);\n    },\n\n    InvalidEndpointURL(action: HMSAction, description: string = '') {\n      return new HMSException(2002, 'InvalidEndpointURL', action, `Endpoint URL is invalid`, description);\n    },\n\n    EndpointUnreachable(action: HMSAction, description: string = '') {\n      return new HMSException(2003, 'EndpointUnreachable', action, `Endpoint is not reachable.`, description);\n    },\n\n    InvalidTokenFormat(action: HMSAction, description: string = '') {\n      return new HMSException(2004, 'InvalidTokenFormat', action, `Token is not in proper JWT format`, description);\n    },\n  },\n\n  TracksErrors: {\n    GenericTrack(action: HMSAction, description: string = '') {\n      return new HMSException(3000, 'GenericTrack', action, `[TRACK]: Something went wrong`, description);\n    },\n\n    CantAccessCaptureDevice(action: HMSAction, deviceInfo: string, description: string = '') {\n      return new HMSException(\n        3001,\n        'CantAccessCaptureDevice',\n        action,\n        `[TRACK]: No permission to access capture device - ${deviceInfo}`,\n        description,\n      );\n    },\n\n    DeviceNotAvailable(action: HMSAction, deviceInfo: string, description: string = '') {\n      return new HMSException(\n        3002,\n        'DeviceNotAvailable',\n        action,\n        `[TRACK]: Capture device is no longer available - ${deviceInfo}`,\n        description,\n      );\n    },\n\n    DeviceInUse(action: HMSAction, deviceInfo: string, description: string = '') {\n      return new HMSException(\n        3003,\n        'DeviceInUse',\n        action,\n        `[TRACK]: Capture device is in use by another application - ${deviceInfo}`,\n        description,\n      );\n    },\n\n    DeviceLostMidway(action: HMSAction, deviceInfo: string, description: string = '') {\n      return new HMSException(\n        3008,\n        'DeviceLostMidway',\n        action,\n        `Lost access to capture device midway - ${deviceInfo}`,\n        description,\n      );\n    },\n\n    NothingToReturn(action: HMSAction, description: string = '') {\n      return new HMSException(\n        3005,\n        'NothingToReturn',\n        action,\n        `There is no media to return. Please select either video or audio or both.`,\n        description,\n      );\n    },\n\n    InvalidVideoSettings(action: HMSAction, description: string = '') {\n      return new HMSException(\n        3006,\n        'InvalidVideoSettings',\n        action,\n        `Cannot enable simulcast when no video settings are provided`,\n        description,\n      );\n    },\n\n    AutoplayBlocked(action: HMSAction, description: string = '') {\n      return new HMSException(\n        ErrorCodes.TracksErrors.AUTOPLAY_ERROR,\n        'AutoplayBlocked',\n        action,\n        \"Autoplay blocked because the user didn't interact with the document first\",\n        description,\n      );\n    },\n\n    CodecChangeNotPermitted(action: HMSAction, description: string = '') {\n      return new HMSException(3007, 'CodecChangeNotPermitted', action, `Codec can't be changed mid call.`, description);\n    },\n  },\n\n  WebrtcErrors: {\n    CreateOfferFailed(action: HMSAction, description: string = '') {\n      return new HMSException(\n        4001,\n        'CreateOfferFailed',\n        action,\n        `[${action.toString()}]: Failed to create offer. `,\n        description,\n      );\n    },\n\n    CreateAnswerFailed(action: HMSAction, description: string = '') {\n      return new HMSException(\n        4002,\n        'CreateAnswerFailed',\n        action,\n        `[${action.toString()}]: Failed to create answer. `,\n        description,\n      );\n    },\n\n    SetLocalDescriptionFailed(action: HMSAction, description: string = '') {\n      return new HMSException(\n        4003,\n        'SetLocalDescriptionFailed',\n        action,\n        `[${action.toString()}]: Failed to set offer. `,\n        description,\n      );\n    },\n\n    SetRemoteDescriptionFailed(action: HMSAction, description: string = '') {\n      return new HMSException(\n        4004,\n        'SetRemoteDescriptionFailed',\n        action,\n        `[${action.toString()}]: Failed to set answer. `,\n        description,\n      );\n    },\n\n    ICEFailure(action: HMSAction, description: string = '') {\n      return new HMSException(\n        4005,\n        'ICEFailure',\n        action,\n        `[${action.toString()}]: Ice connection state FAILED`,\n        description,\n      );\n    },\n  },\n\n  WebsocketMethodErrors: {\n    ServerErrors(code: number, action: HMSAction, description: string) {\n      return new HMSException(code, 'ServerErrors', action, description, description);\n    },\n\n    AlreadyJoined(action: HMSAction, description: string = '') {\n      return new HMSException(5001, 'AlreadyJoined', action, `[JOIN]: You have already joined this room.`, description);\n    },\n\n    CannotJoinPreviewInProgress(action: HMSAction, description: string = '') {\n      return new HMSException(\n        5002,\n        'CannotJoinPreviewInProgress',\n        action,\n        `[JOIN]: Cannot join if preview is in progress`,\n        description,\n      );\n    },\n  },\n\n  GenericErrors: {\n    NotConnected(action: HMSAction, description: string = '') {\n      return new HMSException(6000, 'NotConnected', action, `Client is not connected`, description);\n    },\n\n    Signalling(action: HMSAction, description: string) {\n      return new HMSException(\n        6001,\n        'Signalling',\n        action,\n        `Unknown signalling error: ${action.toString()} ${description} `,\n        description,\n      );\n    },\n\n    Unknown(action: HMSAction, description: string) {\n      return new HMSException(6002, 'Unknown', action, `Unknown exception: ${description}`, description);\n    },\n\n    NotReady(action: HMSAction, description: string = '') {\n      return new HMSException(6003, 'NotReady', action, `WebRTC engine is not ready yet`, description);\n    },\n\n    JsonParsingFailed(action: HMSAction, jsonMessage: string, description: string = '') {\n      return new HMSException(\n        6004,\n        'JsonParsingFailed',\n        action,\n        `Failed to parse JSON message - ${jsonMessage}`,\n        description,\n      );\n    },\n\n    TrackMetadataMissing(action: HMSAction, description: string = '') {\n      return new HMSException(6005, 'TrackMetadataMissing', action, `Track Metadata Missing`, description);\n    },\n\n    RTCTrackMissing(action: HMSAction, description: string = '') {\n      return new HMSException(6006, 'RTCTrackMissing', action, `RTC Track missing`, description);\n    },\n\n    PeerMetadataMissing(action: HMSAction, description: string = '') {\n      return new HMSException(6007, 'PeerMetadataMissing', action, `Peer Metadata Missing`, description);\n    },\n\n    ValidationFailed(message: string, entity?: any) {\n      return new HMSException(\n        6008,\n        'ValidationFailed',\n        HMSAction.VALIDATION,\n        message,\n        entity ? JSON.stringify(entity) : '',\n      );\n    },\n\n    InvalidRole(action: HMSAction, description: string) {\n      return new HMSException(\n        ErrorCodes.GenericErrors.INVALID_ROLE,\n        'InvalidRole',\n        action,\n        `Invalid role. Join with valid role`,\n        description,\n        true,\n      );\n    },\n  },\n\n  MediaPluginErrors: {\n    PlatformNotSupported(action: HMSAction, description: string = '') {\n      return new HMSException(\n        7001,\n        'PlatformNotSupported',\n        action,\n        'Check HMS Docs to see the list of supported platforms',\n        description,\n      );\n    },\n\n    InitFailed(action: HMSAction, description: string = '') {\n      return new HMSException(7002, 'InitFailed', action, 'Plugin init failed', description);\n    },\n\n    ProcessingFailed(action: HMSAction, description: string = '') {\n      return new HMSException(7003, 'ProcessingFailed', action, 'Plugin processing failed', description);\n    },\n\n    AddAlreadyInProgress(action: HMSAction, description: string = '') {\n      return new HMSException(7004, 'AddAlreadyInProgress', action, 'Plugin add already in progress', description);\n    },\n  },\n\n  PlaylistErrors: {\n    NoEntryToPlay(action: HMSAction, description: string) {\n      return new HMSException(\n        ErrorCodes.PlaylistErrors.NO_ENTRY_TO_PLAY,\n        'NoEntryToPlay',\n        action,\n        'Reached end of playlist',\n        description,\n      );\n    },\n    NoEntryPlaying(action: HMSAction, description: string) {\n      return new HMSException(\n        ErrorCodes.PlaylistErrors.NO_ENTRY_IS_PLAYING,\n        'NoEntryIsPlaying',\n        action,\n        'No entry is playing at this time',\n        description,\n      );\n    },\n  },\n};\n","import { HMSConnectionRole } from './model';\nimport { ISignal } from '../signal/ISignal';\nimport HMSLogger from '../utils/logger';\nimport { HMSLocalTrack } from '../media/tracks';\nimport { enableOpusDtx, fixMsid } from '../utils/session-description';\nimport { ErrorFactory, HMSAction } from '../error/ErrorFactory';\nimport { TrackState } from '../notification-manager';\n\nconst TAG = 'HMSConnection';\nexport default abstract class HMSConnection {\n  readonly role: HMSConnectionRole;\n  protected readonly signal: ISignal;\n\n  abstract readonly nativeConnection: RTCPeerConnection;\n  /**\n   * We keep a list of pending IceCandidates received\n   * from the signalling server. When the peer-connection\n   * is initialized we call [addIceCandidate] for each.\n   *\n   * WARN:\n   *  - [HMSPublishConnection] keeps the complete list of candidates (for\n   *      ice-connection failed/disconnect) forever.\n   *  - [HMSSubscribeConnection] clears this list as soon as we call [addIceCandidate]\n   */\n  readonly candidates = new Array<RTCIceCandidateInit>();\n\n  protected constructor(role: HMSConnectionRole, signal: ISignal) {\n    this.role = role;\n    this.signal = signal;\n  }\n\n  public get iceConnectionState(): RTCIceConnectionState {\n    return this.nativeConnection.iceConnectionState;\n  }\n\n  public get connectionState(): RTCPeerConnectionState {\n    return this.nativeConnection.connectionState;\n  }\n\n  private get action(): HMSAction {\n    return this.role === HMSConnectionRole.Publish ? HMSAction.PUBLISH : HMSAction.SUBSCRIBE;\n  }\n\n  addTransceiver(track: MediaStreamTrack, init: RTCRtpTransceiverInit): RTCRtpTransceiver {\n    return this.nativeConnection.addTransceiver(track, init);\n  }\n\n  async createOffer(\n    options: RTCOfferOptions | undefined = undefined,\n    tracks: Map<string, TrackState>,\n  ): Promise<RTCSessionDescriptionInit> {\n    try {\n      const offer = await this.nativeConnection.createOffer(options);\n      HMSLogger.d(TAG, `[role=${this.role}] createOffer offer=${JSON.stringify(offer, null, 1)}`);\n      return enableOpusDtx(fixMsid(offer, tracks));\n    } catch (error) {\n      throw ErrorFactory.WebrtcErrors.CreateOfferFailed(this.action, (error as Error).message);\n    }\n  }\n\n  async createAnswer(options: RTCOfferOptions | undefined = undefined): Promise<RTCSessionDescriptionInit> {\n    try {\n      const answer = await this.nativeConnection.createAnswer(options);\n      HMSLogger.d(TAG, `[role=${this.role}] createAnswer answer=${JSON.stringify(answer, null, 1)}`);\n      return answer;\n    } catch (error) {\n      throw ErrorFactory.WebrtcErrors.CreateAnswerFailed(this.action, (error as Error).message);\n    }\n  }\n\n  async setLocalDescription(description: RTCSessionDescriptionInit): Promise<void> {\n    try {\n      HMSLogger.d(TAG, `[role=${this.role}] setLocalDescription description=${JSON.stringify(description, null, 1)}`);\n      await this.nativeConnection.setLocalDescription(description);\n    } catch (error) {\n      throw ErrorFactory.WebrtcErrors.SetLocalDescriptionFailed(this.action, (error as Error).message);\n    }\n  }\n\n  async setRemoteDescription(description: RTCSessionDescriptionInit): Promise<void> {\n    try {\n      HMSLogger.d(TAG, `[role=${this.role}] setRemoteDescription description=${JSON.stringify(description, null, 1)}`);\n      await this.nativeConnection.setRemoteDescription(description);\n    } catch (error) {\n      throw ErrorFactory.WebrtcErrors.SetRemoteDescriptionFailed(this.action, (error as Error).message);\n    }\n  }\n\n  async addIceCandidate(candidate: RTCIceCandidateInit): Promise<void> {\n    HMSLogger.d(TAG, `[role=${this.role}] addIceCandidate candidate=${JSON.stringify(candidate, null, 1)}`);\n    await this.nativeConnection.addIceCandidate(candidate);\n  }\n\n  public get remoteDescription(): RTCSessionDescription | null {\n    return this.nativeConnection.remoteDescription;\n  }\n\n  getSenders(): Array<RTCRtpSender> {\n    return this.nativeConnection.getSenders();\n  }\n\n  removeTrack(sender: RTCRtpSender) {\n    this.nativeConnection.removeTrack(sender);\n  }\n\n  async setMaxBitrate(maxBitrate: number, track: HMSLocalTrack) {\n    const sender = this.getSenders().find((s) => s?.track?.id === track.getTrackIDBeingSent());\n\n    if (sender) {\n      const params = sender.getParameters();\n      if (params.encodings.length > 0) {\n        params.encodings[0].maxBitrate = maxBitrate * 1000;\n      }\n      await sender.setParameters(params);\n    } else {\n      HMSLogger.w(\n        TAG,\n        `no sender found to setMaxBitrate for track - ${track.trackId}, sentTrackId - ${track.getTrackIDBeingSent()}`,\n      );\n    }\n  }\n\n  async getStats() {\n    const stats = await this.nativeConnection.getStats();\n    const reports: any[] = [];\n    stats.forEach((stat) => reports.push(stat));\n    return reports;\n  }\n\n  async close() {\n    this.nativeConnection.close();\n  }\n}\n","export const RENEGOTIATION_CALLBACK_ID = 'renegotiation-callback-id';\nexport const API_DATA_CHANNEL = 'ion-sfu';\nexport const ANALYTICS_BUFFER_SIZE = 100;\n\n/**\n * Maximum number of retries that transport-layer will try\n * before giving up on the connection and returning a failure\n *\n * Refer https://100ms.atlassian.net/browse/HMS-2369\n */\nexport const MAX_TRANSPORT_RETRIES = 5;\nexport const MAX_TRANSPORT_RETRY_DELAY = 60;\n\nexport const DEFAULT_SIGNAL_PING_TIMEOUT = 10000;\nexport const SIGNAL_PING_INTERVAL = 1000;\n\nexport const SUBSCRIBE_ICE_CONNECTION_CALLBACK_ID = 'SUBSCRIBE_ICE_CONNECTION_CALLBACK_ID';\nexport const SUBSCRIBE_TIMEOUT = 60000;\n\nexport const RTC_STATS_MONITOR_INTERVAL = 1000;\n","import HMSConnection from '../index';\nimport { ISignal } from '../../signal/ISignal';\nimport { IPublishConnectionObserver } from './IPublishConnectionObserver';\nimport { HMSConnectionRole } from '../model';\nimport { API_DATA_CHANNEL } from '../../utils/constants';\nimport HMSLogger from '../../utils/logger';\nimport HMSTransport from '../../transport';\nimport { HMSLocalTrack } from '../../media/tracks';\n\nconst TAG = 'HMSPublishConnection';\n\nexport default class HMSPublishConnection extends HMSConnection {\n  private readonly observer: IPublishConnectionObserver;\n  readonly nativeConnection: RTCPeerConnection;\n  private readonly transport: HMSTransport;\n\n  constructor(\n    signal: ISignal,\n    config: RTCConfiguration,\n    observer: IPublishConnectionObserver,\n    transport: HMSTransport,\n  ) {\n    super(HMSConnectionRole.Publish, signal);\n    this.observer = observer;\n    this.transport = transport;\n\n    this.nativeConnection = new RTCPeerConnection(config);\n    this.nativeConnection.createDataChannel(API_DATA_CHANNEL, {\n      protocol: 'SCTP',\n    });\n\n    this.nativeConnection.onicecandidate = ({ candidate }) => {\n      if (candidate) {\n        signal.trickle(this.role, candidate);\n      }\n    };\n\n    this.nativeConnection.oniceconnectionstatechange = () => {\n      this.observer.onIceConnectionChange(this.nativeConnection.iceConnectionState);\n    };\n\n    // @TODO(eswar): Remove this. Use iceconnectionstate change with interval and threshold.\n    this.nativeConnection.onconnectionstatechange = () => {\n      this.observer.onConnectionStateChange(this.nativeConnection.connectionState);\n    };\n  }\n\n  initAfterJoin() {\n    this.nativeConnection.onnegotiationneeded = async () => {\n      HMSLogger.d(TAG, `onnegotiationneeded`);\n      await this.observer.onRenegotiationNeeded();\n    };\n  }\n\n  trackUpdate(track: HMSLocalTrack) {\n    this.transport.trackUpdate(track);\n  }\n}\n","import { HMSTrack } from '../tracks/HMSTrack';\n\nexport default class HMSMediaStream {\n  readonly nativeStream: MediaStream;\n  readonly id: string;\n\n  readonly tracks = new Array<HMSTrack>();\n\n  constructor(nativeStream: MediaStream) {\n    this.nativeStream = nativeStream;\n    this.id = nativeStream.id;\n  }\n}\n","import { HMSException } from '../error/HMSException';\nimport { HMSTrack } from '../media/tracks/HMSTrack';\nimport { HMSPeer } from '../sdk/models/peer';\nimport { HMSRoleChangeRequest } from './role-change-request';\nimport { HMSMessage } from './message';\nimport { HMSRoom } from './room';\nimport { HMSSpeaker } from './speaker';\nimport { DeviceChangeListener } from './device-change-listener';\nimport { HMSChangeMultiTrackStateRequest, HMSChangeTrackStateRequest } from './change-track-state';\nimport { HMSLeaveRoomRequest } from './leave-room-request';\n\nexport enum HMSRoomUpdate {\n  PEER_ADDED,\n  PEER_REMOVED,\n  PEER_KNOCKED,\n  ROOM_TYPE_CHANGED,\n  METADATA_UPDATED,\n  SCREENSHARE_STARTED,\n  SCREENSHARE_STOPPED,\n  DEFAULT_UPDATE,\n  RECORDING_STATE_UPDATED,\n  BROWSER_RECORDING_STATE_UPDATED,\n  SERVER_RECORDING_STATE_UPDATED,\n  RTMP_STREAMING_STATE_UPDATED,\n}\n\nexport enum HMSPeerUpdate {\n  PEER_JOINED,\n  PEER_LEFT,\n  AUDIO_TOGGLED,\n  VIDEO_TOGGLED,\n  BECAME_DOMINANT_SPEAKER,\n  RESIGNED_DOMINANT_SPEAKER,\n  STARTED_SPEAKING,\n  STOPPED_SPEAKING,\n  ROLE_UPDATED,\n  PEER_LIST,\n}\n\nexport enum HMSTrackUpdate {\n  TRACK_ADDED,\n  TRACK_REMOVED,\n  TRACK_MUTED,\n  TRACK_UNMUTED,\n  TRACK_DESCRIPTION_CHANGED,\n  TRACK_DEGRADED,\n  TRACK_RESTORED,\n}\n\nexport interface HMSAudioListener {\n  onAudioLevelUpdate(speakers: HMSSpeaker[]): void;\n}\n\nexport interface HMSUpdateListener extends DeviceChangeListener {\n  onJoin(room: HMSRoom): void;\n  onRoomUpdate(type: HMSRoomUpdate, room: HMSRoom): void;\n  onPeerUpdate(type: HMSPeerUpdate, peer: HMSPeer | HMSPeer[] | null): void;\n  onTrackUpdate(type: HMSTrackUpdate, track: HMSTrack, peer: HMSPeer): void;\n  onMessageReceived(message: HMSMessage): void;\n  onError(error: HMSException): void;\n  onReconnecting(error: HMSException): void;\n  onReconnected(): void;\n  onRoleChangeRequest(request: HMSRoleChangeRequest): void;\n  onRoleUpdate(newRole: string): void;\n  onChangeTrackStateRequest(request: HMSChangeTrackStateRequest): void;\n  onChangeMultiTrackStateRequest(request: HMSChangeMultiTrackStateRequest): void;\n  onRemovedFromRoom(request: HMSLeaveRoomRequest): void;\n}\n","import { HMSLocalPeer, HMSPeer } from '../sdk/models/peer';\n\nexport enum HMSRoomType {\n  DEFAULT,\n}\n\nexport interface HMSRoom {\n  id: string;\n  name: string;\n  localPeer: HMSLocalPeer;\n  peers: HMSPeer[];\n  shareableLink: string;\n  type: HMSRoomType;\n  hasWaitingRoom: boolean;\n  recording?: HMSRecording;\n  rtmp?: HMSRTMP;\n}\n\nexport interface HMSRecording {\n  browser: {\n    running: boolean;\n  };\n  server: {\n    running: boolean;\n  };\n}\n\nexport interface HMSRTMP {\n  running: boolean;\n}\n","export enum HMSSimulcastLayer {\n  NONE = 'none',\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n}\n\nexport interface SimulcastLayer {\n  rid: string;\n  scaleResolutionDownBy?: number;\n  maxBitrate: number;\n  maxFramerate: number;\n}\n\nexport interface SimulcastDimensions {\n  width?: number;\n  height?: number;\n}\n\nexport interface SimulcastLayers extends SimulcastDimensions {\n  layers: SimulcastLayer[];\n}\n\nexport interface SimulcastLayerDefinition {\n  layer: Exclude<HMSSimulcastLayer, HMSSimulcastLayer.NONE>;\n  resolution: SimulcastDimensions;\n}\n\nexport type RID = 'f' | 'h' | 'q';\n\nexport const simulcastMapping = {\n  f: HMSSimulcastLayer.HIGH,\n  h: HMSSimulcastLayer.MEDIUM,\n  q: HMSSimulcastLayer.LOW,\n};\n","export enum HMSVideoCodec {\n  VP8 = 'vp8',\n  VP9 = 'vp9',\n  H264 = 'h264',\n}\n\nexport enum HMSAudioCodec {\n  OPUS = 'opus',\n}\n\nexport interface HMSAudioTrackSettings {\n  volume: number;\n  codec: HMSAudioCodec;\n  maxBitrate: number;\n  deviceId: string;\n  advanced: Array<MediaTrackConstraintSet>;\n}\n\nexport interface HMSVideoTrackSettings {\n  width: number;\n  height: number;\n  codec: HMSVideoCodec;\n  maxFramerate: number;\n  maxBitrate?: number;\n  deviceId?: string;\n  advanced: Array<MediaTrackConstraintSet>;\n}\n","export enum HMSPlaylistType {\n  audio = 'audio',\n  video = 'video',\n}\n\nexport interface HMSPlaylistItem<T> {\n  name: string;\n  metadata?: T;\n  id: string;\n  url: string;\n  type: HMSPlaylistType;\n  /**\n   * duration in seconds\n   */\n  duration?: number;\n}\n\nexport interface HMSPlaylistProgressEvent {\n  type: HMSPlaylistType;\n  progress: number;\n}\n\nexport interface HMSPlaylistManager {\n  getList<T>(type: HMSPlaylistType): HMSPlaylistItem<T>[];\n  setList<T>(list: HMSPlaylistItem<T>[]): void;\n  playNext(type: HMSPlaylistType): Promise<void>;\n  playPrevious(type: HMSPlaylistType): Promise<void>;\n  removeItem<T>(item: HMSPlaylistItem<T>): void;\n  /**\n   * Seek forward/backward on selected type relative to currentTime\n   * @param value - number in seconds to go forward(if negative, it goes backwards)\n   * @param {HMSPlaylistType} type\n   */\n  seek(value: number, type: HMSPlaylistType): void;\n  /**\n   * Seek forward/backward on selected type - absolute value\n   * @param value - point in playlist item to go to\n   * @param {HMSPlaylistType} type\n   */\n  seekTo(value: number, type: HMSPlaylistType): void;\n  /**\n   * set volume on the selected type\n   * @param value - number between 0-100\n   * @param type\n   */\n  setVolume(value: number, type: HMSPlaylistType): void;\n  /**\n   * Get volume of selected type, between 0-100\n   * @param type\n   */\n  getVolume(type: HMSPlaylistType): number;\n  isPlaying(type: HMSPlaylistType): boolean;\n  getCurrentIndex(type: HMSPlaylistType): number;\n  getCurrentSelection<T>(type: HMSPlaylistType): HMSPlaylistItem<T> | undefined;\n  /**\n   * Returns a value between 0-100\n   * @param {HMSPlaylistType} type\n   */\n  getCurrentProgress(type: HMSPlaylistType): number;\n  /**\n   * Get the currentTime of audio/video based on type\n   * @param {HMSPlaylistType} type\n   */\n  getCurrentTime(type: HMSPlaylistType): number;\n  setEnabled(enabled: boolean, info: { id: string; type: HMSPlaylistType }): Promise<void>;\n  stop(type: HMSPlaylistType): Promise<void>;\n  /**\n   * Subscriber to progress event with a callback\n   * @param fn\n   */\n  onProgress(fn: (event: HMSPlaylistProgressEvent) => void): void;\n  /**\n   * This will be called when a new track is played\n   * @param fn\n   */\n  onNewTrackStart<T>(fn: (item: HMSPlaylistItem<T>) => void): void;\n\n  onPlaylistEnded(fn: (type: HMSPlaylistType) => void): void;\n}\n","import HMSSubscribeConnection from '../../connection/subscribe';\nimport HMSMediaStream from './HMSMediaStream';\nimport HMSLogger from '../../utils/logger';\nimport { HMSSimulcastLayer } from '../../interfaces';\n\n/** @internal */\nexport default class HMSRemoteStream extends HMSMediaStream {\n  private readonly connection: HMSSubscribeConnection;\n  private audio = true;\n  private video = HMSSimulcastLayer.NONE;\n  private frameRate = HMSSimulcastLayer.HIGH;\n\n  constructor(nativeStream: MediaStream, connection: HMSSubscribeConnection) {\n    super(nativeStream);\n    this.connection = connection;\n  }\n\n  setAudio(enabled: boolean) {\n    if (this.audio === enabled) return;\n\n    this.audio = enabled;\n    this.syncWithApiChannel();\n  }\n\n  setVideo(layer: HMSSimulcastLayer) {\n    if (this.video === layer) {\n      HMSLogger.d(`[Remote stream] ${this.id}`, `Already on ${layer} layer`);\n      return;\n    }\n\n    this.video = layer;\n    HMSLogger.d(`[Remote stream] ${this.id}`, `Switching to ${layer} layer`);\n    this.syncWithApiChannel();\n  }\n\n  getSimulcastLayer() {\n    return this.video;\n  }\n\n  isAudioSubscribed() {\n    return this.audio;\n  }\n\n  private syncWithApiChannel() {\n    const data = {\n      streamId: this.id,\n      video: this.video,\n      audio: this.audio,\n      framerate: this.frameRate,\n    };\n    this.connection.sendOverApiDataChannel(JSON.stringify(data));\n  }\n}\n","import HMSLogger from '../utils/logger';\n\nexport interface DataChannelObserver {\n  onMessage(value: string): void;\n}\n\nexport default class HMSDataChannel {\n  private readonly TAG = 'HMSDataChannel';\n  private readonly nativeChannel: RTCDataChannel;\n  private readonly observer: DataChannelObserver;\n  private readonly metadata: string;\n\n  public get id() {\n    return this.nativeChannel.id;\n  }\n\n  public get label() {\n    return this.nativeChannel.label;\n  }\n\n  public get readyState() {\n    return this.nativeChannel.readyState;\n  }\n\n  constructor(nativeChannel: RTCDataChannel, observer: DataChannelObserver, metadata: string = '') {\n    this.nativeChannel = nativeChannel;\n    this.observer = observer;\n    this.metadata = metadata;\n\n    nativeChannel.onmessage = (e) => {\n      // HMSLogger.d(this.TAG, `[${this.metadata}] onMessage: label=${this.label}, message=${e.data}`);\n      this.observer.onMessage(e.data);\n    };\n  }\n\n  send(message: string) {\n    HMSLogger.d(this.TAG, `[${this.metadata}] Sending [size=${message.length}] message=${message}`);\n    this.nativeChannel.send(message);\n  }\n\n  close() {\n    this.nativeChannel.close();\n  }\n}\n","import HMSMediaStream from '../streams/HMSMediaStream';\nimport { HMSTrackType } from './HMSTrackType';\n\nexport type HMSTrackSource = 'regular' | 'screen' | 'plugin' | 'audioplaylist' | 'videoplaylist' | string;\n\nexport abstract class HMSTrack {\n  /**\n   * @internal\n   */\n  readonly stream: HMSMediaStream;\n  source?: HMSTrackSource;\n  peerId?: string;\n\n  /** The native mediastream track, for local, this changes on mute/unmute(for video),\n   * and on device change.\n   * @internal */\n  nativeTrack: MediaStreamTrack;\n\n  /**\n   * Firefox doesn't respect the track id as sent from the backend when calling peerconnection.ontrack callback. This\n   * breaks correlation of future track updates from backend. So we're storing the sdp track id as present in the\n   * original offer along with the track as well and will let this override the native track id for any correlation\n   * purpose.\n   * This applies for remote tracks only.\n   * @internal */\n  private sdpTrackId?: string;\n\n  /**\n   * @internal\n   * The local track id is changed on mute/unmute or when device id changes, this is abstracted as an internal\n   * detail of HMSTrack and the variable is used for this enacapsulation where the first track id is remembered\n   * and treated as the fixed track id for this HMSTrack. This simplifies things for the user of the sdk who\n   * do not have to worry about changing track IDs.\n   * This applies for local tracks only.\n   */\n  private firstTrackId?: string;\n\n  abstract readonly type: HMSTrackType;\n\n  public get enabled(): boolean {\n    return this.nativeTrack.enabled;\n  }\n\n  /**\n   * firstTrackId => encapsulates change in local track ids\n   * sdpTrackId => fixes remote track updates correlation on firefox\n   */\n  public get trackId(): string {\n    return this.firstTrackId || this.sdpTrackId || this.nativeTrack.id;\n  }\n\n  getMediaTrackSettings(): MediaTrackSettings {\n    return this.nativeTrack.getSettings();\n  }\n\n  async setEnabled(value: boolean): Promise<void> {\n    this.nativeTrack.enabled = value;\n  }\n\n  protected constructor(stream: HMSMediaStream, track: MediaStreamTrack, source?: HMSTrackSource) {\n    this.stream = stream;\n    this.nativeTrack = track;\n    this.source = source;\n  }\n\n  /**\n   * @internal\n   */\n  setSdpTrackId(sdpTrackId: string) {\n    this.sdpTrackId = sdpTrackId;\n  }\n\n  /**\n   * @internal\n   */\n  protected setFirstTrackId(trackId: string) {\n    this.firstTrackId = trackId;\n  }\n\n  /**\n   * @internal\n   * take care of -\n   * 1. https://bugs.chromium.org/p/chromium/issues/detail?id=1232649\n   * 2. stopping any tracks\n   * 3. plugins related cleanups and stopping\n   */\n  cleanup() {\n    this.nativeTrack?.stop();\n  }\n}\n","export enum HMSTrackType {\n  AUDIO = 'audio',\n  VIDEO = 'video',\n}\n","import { HMSTrack, HMSTrackSource } from './HMSTrack';\nimport { HMSTrackType } from './HMSTrackType';\nimport HMSMediaStream from '../streams/HMSMediaStream';\nimport HMSRemoteStream from '../streams/HMSRemoteStream';\nimport HMSLogger from '../../utils/logger';\n\nexport class HMSAudioTrack extends HMSTrack {\n  readonly type: HMSTrackType = HMSTrackType.AUDIO;\n  private audioElement: HTMLAudioElement | null = null;\n  private outputDevice?: MediaDeviceInfo;\n\n  constructor(stream: HMSMediaStream, track: MediaStreamTrack, source?: string) {\n    super(stream, track, source as HMSTrackSource);\n    if (track.kind !== 'audio') throw new Error(\"Expected 'track' kind = 'audio'\");\n  }\n\n  getVolume() {\n    return this.audioElement ? this.audioElement.volume * 100 : null;\n  }\n\n  setVolume(value: number) {\n    if (value < 0 || value > 100) {\n      throw Error('Please pass a valid number between 0-100');\n    }\n    // Don't subscribe to audio when volume is 0\n    this.subscribeToAudio(value === 0 ? false : this.enabled);\n    if (this.audioElement) {\n      this.audioElement.volume = value / 100;\n    }\n  }\n\n  setAudioElement(element: HTMLAudioElement | null) {\n    this.audioElement = element;\n  }\n\n  /**\n   * @internal\n   * @returns {HTMLAudioElement | null}\n   */\n  getAudioElement(): HTMLAudioElement | null {\n    return this.audioElement;\n  }\n\n  getOutputDevice() {\n    return this.outputDevice;\n  }\n\n  cleanup() {\n    super.cleanup();\n    if (this.audioElement) {\n      this.audioElement.srcObject = null;\n      this.audioElement.remove();\n      this.audioElement = null;\n    }\n  }\n\n  async setOutputDevice(device: MediaDeviceInfo) {\n    if (!this.audioElement) {\n      HMSLogger.d('audio-track', 'no audio element to set output');\n      return;\n    }\n    try {\n      // @ts-ignore\n      if (typeof this.audioElement.setSinkId === 'function') {\n        // @ts-ignore\n        await this.audioElement?.setSinkId(device.deviceId);\n        this.outputDevice = device;\n      }\n    } catch {}\n  }\n\n  /**\n   * removes the track from the audio element of the track\n   * @experimental - Not production ready\n   */\n  removeSink() {\n    // @ts-ignore\n    if (this.audioElement && window.HMS?.AUDIO_SINK) {\n      this.audioElement.srcObject = null;\n      this.subscribeToAudio(false);\n    }\n  }\n\n  /**\n   * add track if not already added\n   * @experimental - Not production ready\n   */\n  addSink() {\n    // @ts-ignore\n    if (!this.nativeTrack || !this.audioElement || !window.HMS?.AUDIO_SINK) {\n      return;\n    }\n    const srcObject = this.audioElement.srcObject;\n    if (srcObject !== null && srcObject instanceof MediaStream) {\n      const existingTrackID = srcObject.getAudioTracks()[0]?.id;\n      if (existingTrackID === this.nativeTrack.id) {\n        // it's already attached, no need to attach again\n        return;\n      }\n    }\n    this.audioElement.srcObject = new MediaStream([this.nativeTrack]);\n    this.subscribeToAudio(true);\n  }\n\n  protected subscribeToAudio(value: boolean) {\n    if (this.stream instanceof HMSRemoteStream) {\n      this.stream.setAudio(value);\n    }\n  }\n}\n","import { HMSAudioTrack } from './HMSAudioTrack';\n\nexport class HMSRemoteAudioTrack extends HMSAudioTrack {\n  async setEnabled(value: boolean): Promise<void> {\n    if (value === this.enabled) return;\n    await super.setEnabled(value);\n    this.subscribeToAudio(value);\n  }\n}\n","import { HMSTrack, HMSTrackSource } from './HMSTrack';\nimport { HMSTrackType } from './HMSTrackType';\nimport HMSMediaStream from '../streams/HMSMediaStream';\n\nexport class HMSVideoTrack extends HMSTrack {\n  readonly type: HMSTrackType = HMSTrackType.VIDEO;\n  private sinkCount: number = 0;\n\n  hasSinks() {\n    return this.sinkCount > 0;\n  }\n\n  constructor(stream: HMSMediaStream, track: MediaStreamTrack, source?: string) {\n    super(stream, track, source as HMSTrackSource);\n    if (track.kind !== 'video') throw new Error(\"Expected 'track' kind = 'video'\");\n  }\n\n  /**\n   * attaches the track to the passed in video element\n   * @param videoElement\n   */\n  addSink(videoElement: HTMLVideoElement) {\n    this.addSinkInternal(videoElement, this.nativeTrack);\n  }\n\n  /**\n   * removes the track from the passed in video element\n   * @param videoElement\n   */\n  removeSink(videoElement: HTMLVideoElement) {\n    videoElement.srcObject = null;\n    if (this.sinkCount > 0) {\n      this.sinkCount--;\n    }\n  }\n\n  protected addSinkInternal(videoElement: HTMLVideoElement, track: MediaStreamTrack) {\n    const srcObject = videoElement.srcObject;\n    if (srcObject !== null && srcObject instanceof MediaStream) {\n      const existingTrackID = srcObject.getVideoTracks()[0]?.id;\n      if (existingTrackID === track.id) {\n        // it's already attached, attaching again would just cause flickering\n        return;\n      }\n    }\n    videoElement.srcObject = new MediaStream([track]);\n    this.sinkCount++;\n  }\n}\n","import { HMSVideoTrack } from './HMSVideoTrack';\nimport HMSRemoteStream from '../streams/HMSRemoteStream';\nimport { HMSSimulcastLayer, SimulcastLayerDefinition } from '../../interfaces/simulcast-layers';\n\nexport class HMSRemoteVideoTrack extends HMSVideoTrack {\n  private _degraded = false;\n  private _layerDefinitions: SimulcastLayerDefinition[] = [];\n\n  public get degraded() {\n    return this._degraded;\n  }\n\n  async setEnabled(value: boolean): Promise<void> {\n    if (value === this.enabled) return;\n\n    // If remote track is muted when degraded, reset degraded state\n    if (this._degraded && !value) {\n      this._degraded = false;\n    }\n\n    await super.setEnabled(value);\n  }\n\n  preferLayer(layer: HMSSimulcastLayer) {\n    (this.stream as HMSRemoteStream).setVideo(layer);\n  }\n\n  getSimulcastLayer() {\n    return (this.stream as HMSRemoteStream).getSimulcastLayer();\n  }\n\n  addSink(videoElement: HTMLVideoElement) {\n    super.addSink(videoElement);\n    this.updateLayer();\n  }\n\n  removeSink(videoElement: HTMLVideoElement) {\n    super.removeSink(videoElement);\n    this.updateLayer();\n  }\n\n  /**\n   * Method to get available simulcast definitions for the track\n   * @returns {SimulcastLayerDefinition[]}\n   */\n  getSimulcastDefinitions() {\n    // send a clone to store as it will freeze the object from further updates\n    return [...this._layerDefinitions];\n  }\n\n  /** @internal */\n  setSimulcastDefinitons(definitions: SimulcastLayerDefinition[]) {\n    this._layerDefinitions = definitions;\n  }\n\n  /** @internal */\n  setDegraded(value: boolean) {\n    this._degraded = value;\n    this.updateLayer();\n  }\n\n  private updateLayer() {\n    let newLayer = this.hasSinks() ? HMSSimulcastLayer.HIGH : HMSSimulcastLayer.NONE;\n    if (this.degraded) newLayer = HMSSimulcastLayer.NONE;\n    (this.stream as HMSRemoteStream).setVideo(newLayer);\n  }\n}\n","import HMSConnection from '../index';\nimport { ISignal } from '../../signal/ISignal';\nimport ISubscribeConnectionObserver from './ISubscribeConnectionObserver';\nimport { HMSConnectionRole } from '../model';\nimport HMSRemoteStream from '../../media/streams/HMSRemoteStream';\nimport HMSDataChannel from '../HMSDataChannel';\nimport { API_DATA_CHANNEL } from '../../utils/constants';\nimport { HMSRemoteAudioTrack } from '../../media/tracks/HMSRemoteAudioTrack';\nimport { HMSRemoteVideoTrack } from '../../media/tracks/HMSRemoteVideoTrack';\nimport HMSLogger from '../../utils/logger';\nimport { getSdpTrackIdForMid } from '../../utils/session-description';\n\nexport default class HMSSubscribeConnection extends HMSConnection {\n  private readonly TAG = '[HMSSubscribeConnection]';\n  private readonly remoteStreams = new Map<string, HMSRemoteStream>();\n\n  private readonly observer: ISubscribeConnectionObserver;\n  readonly nativeConnection: RTCPeerConnection;\n\n  private pendingMessageQueue: string[] = [];\n\n  private apiChannel?: HMSDataChannel;\n\n  private initNativeConnectionCallbacks() {\n    this.nativeConnection.oniceconnectionstatechange = () => {\n      this.observer.onIceConnectionChange(this.nativeConnection.iceConnectionState);\n    };\n\n    // @TODO(eswar): Remove this. Use iceconnectionstate change with interval and threshold.\n    this.nativeConnection.onconnectionstatechange = () => {\n      this.observer.onConnectionStateChange(this.nativeConnection.connectionState);\n    };\n\n    this.nativeConnection.ondatachannel = (e) => {\n      if (e.channel.label !== API_DATA_CHANNEL) {\n        // TODO: this.observer.onDataChannel(e.channel);\n        return;\n      }\n\n      this.apiChannel = new HMSDataChannel(\n        e.channel,\n        {\n          onMessage: (value: string) => {\n            this.observer.onApiChannelMessage(value);\n          },\n        },\n        `role=${this.role}`,\n      );\n\n      e.channel.onopen = this.handlePendingApiMessages;\n    };\n\n    this.nativeConnection.onicecandidate = (e) => {\n      if (e.candidate !== null) {\n        this.signal.trickle(this.role, e.candidate);\n      }\n    };\n\n    this.nativeConnection.ontrack = (e) => {\n      const stream = e.streams[0];\n      const streamId = stream.id;\n      if (!this.remoteStreams.has(streamId)) {\n        const remote = new HMSRemoteStream(stream, this);\n        this.remoteStreams.set(streamId, remote);\n\n        stream.onremovetrack = (e) => {\n          /*\n           * this match has to be with nativetrack.id instead of track.trackId as the latter refers to sdp track id for\n           * ease of correlating update messages coming from the backend. The two track ids are usually the same, but\n           * can be different for some browsers. checkout sdptrackid field in HMSTrack for more details.\n           */\n          const toRemoveTrackIdx = remote.tracks.findIndex((track) => track.nativeTrack.id === e.track.id);\n          if (toRemoveTrackIdx >= 0) {\n            const toRemoveTrack = remote.tracks[toRemoveTrackIdx];\n            this.observer.onTrackRemove(toRemoveTrack);\n            remote.tracks.splice(toRemoveTrackIdx, 1);\n\n            // If the length becomes 0 we assume that stream is removed entirely\n            if (remote.tracks.length === 0) {\n              this.remoteStreams.delete(streamId);\n            }\n          }\n        };\n      }\n\n      const remote = this.remoteStreams.get(streamId)!;\n      const TrackCls = e.track.kind === 'audio' ? HMSRemoteAudioTrack : HMSRemoteVideoTrack;\n      const track = new TrackCls(remote, e.track);\n      const trackId = getSdpTrackIdForMid(this.remoteDescription, e.transceiver?.mid);\n      trackId && track.setSdpTrackId(trackId);\n      remote.tracks.push(track);\n      this.observer.onTrackAdd(track);\n    };\n  }\n\n  constructor(signal: ISignal, config: RTCConfiguration, observer: ISubscribeConnectionObserver) {\n    super(HMSConnectionRole.Subscribe, signal);\n    this.observer = observer;\n\n    this.nativeConnection = new RTCPeerConnection(config);\n    this.initNativeConnectionCallbacks();\n  }\n\n  sendOverApiDataChannel(message: string) {\n    if (this.apiChannel && this.apiChannel.readyState === 'open') {\n      this.apiChannel.send(message);\n    } else {\n      HMSLogger.w(this.TAG, `API Data channel not ${this.apiChannel ? 'open' : 'present'}, queueing`, message);\n      this.pendingMessageQueue.push(message);\n    }\n  }\n\n  async close() {\n    await super.close();\n    this.apiChannel?.close();\n  }\n\n  private handlePendingApiMessages = () => {\n    if (this.pendingMessageQueue.length > 0) {\n      HMSLogger.d(this.TAG, 'Found pending message queue, sending messages');\n      this.pendingMessageQueue.forEach((msg) => this.sendOverApiDataChannel(msg));\n      this.pendingMessageQueue.length = 0;\n    }\n  };\n}\n","import { UAParser } from 'ua-parser-js';\nimport { version } from './package.alias.json';\n\nexport const parsedUserAgent = new UAParser();\n\nexport const isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;\n\nexport const isBrowser = typeof window !== 'undefined';\n\nconst checkIsSupported = () => {\n  if (isNode) {\n    return false;\n  }\n  // @TODO: Get this from preview/init API from server\n  return true;\n};\n\nexport const isSupported = checkIsSupported();\n\nfunction createUserAgent(): string {\n  if (isNode) {\n    return `hmsclient/${version}`;\n  }\n  const device = parsedUserAgent.getDevice();\n  const browser = parsedUserAgent.getBrowser();\n  const os = parsedUserAgent.getOS();\n\n  if (device.type) {\n    return `hmsclient/${version} ${os.name}/${os.version} (${device.vendor}_${device.type}_/_${browser.name}_${browser.version})`;\n  } else {\n    return `hmsclient/${version} ${os.name}/${os.version} (${browser.name}_${browser.version})`;\n  }\n}\n\nexport const isMobile = () => parsedUserAgent.getDevice().type === 'mobile';\n\nexport const userAgent = createUserAgent();\n","import { InitConfig } from './models';\nimport HMSLogger from '../../utils/logger';\nimport { userAgent } from '../../utils/support';\nimport { ErrorFactory, HMSAction } from '../../error/ErrorFactory';\n\nconst TAG = 'InitService';\n\nexport default class InitService {\n  static async fetchInitConfig(\n    token: string,\n    initEndpoint: string = 'https://prod-init.100ms.live',\n    region: string = '',\n  ): Promise<InitConfig> {\n    HMSLogger.d(TAG, `fetchInitConfig: initEndpoint=${initEndpoint} token=${token} region=${region}`);\n    const url = getUrl(initEndpoint, region);\n    let response, config;\n    try {\n      response = await fetch(url, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      const body = await response.json();\n      if (response.status === 404) {\n        throw ErrorFactory.InitAPIErrors.EndpointUnreachable(HMSAction.INIT, body.message || response.statusText);\n      }\n      if (response?.status !== 200) {\n        throw ErrorFactory.InitAPIErrors.ServerErrors(\n          body.code || response.status,\n          HMSAction.INIT,\n          body.message || response?.statusText,\n        );\n      }\n      config = body;\n      HMSLogger.d(TAG, `config is ${JSON.stringify(config, null, 2)}`);\n    } catch (err) {\n      const error = err as Error;\n      if (error.message === 'Failed to fetch') {\n        throw ErrorFactory.InitAPIErrors.ConnectionLost(HMSAction.INIT, error.message);\n      }\n      throw error;\n    }\n    return transformInitConfig(config);\n  }\n}\n\nexport function getUrl(endpoint: string, region?: string) {\n  try {\n    const url = new URL('/init', endpoint);\n\n    if (region && region.trim().length > 0) {\n      url.searchParams.set('region', region.trim());\n    }\n    url.searchParams.set('user_agent', userAgent);\n    return url.toString();\n  } catch (err) {\n    const error = err as Error;\n    HMSLogger.e(TAG, error.name, error.message);\n    throw error;\n  }\n}\n\nexport function transformInitConfig(config: any): InitConfig {\n  return {\n    ...config,\n    rtcConfiguration: { ...config.rtcConfiguration, iceServers: config.rtcConfiguration.ice_servers },\n  };\n}\n","import { HMSAction } from '../../error/ErrorFactory';\n\nexport interface JsonRpcRequest {\n  id: string;\n  method: string;\n  params: Map<string, any>;\n}\n\nexport interface JsonRpcResponse {\n  id: string;\n  result: any;\n  error: {\n    code: number;\n    message: string;\n  };\n}\n\nexport enum HMSSignalMethod {\n  JOIN = 'join',\n  OFFER = 'offer',\n  ANSWER = 'answer',\n  TRICKLE = 'trickle',\n  TRACK_UPDATE = 'track-update',\n  BROADCAST = 'broadcast',\n  ANALYTICS = 'analytics',\n  SERVER_ERROR = 'on-error',\n  SDK_NOTIFICATION = 'sdk-notification',\n  LEAVE = 'leave',\n  END_ROOM = 'end-room',\n  PING = 'ping',\n  ROLE_CHANGE_REQUEST = 'role-change-request',\n  ROLE_CHANGE = 'role-change',\n  TRACK_UPDATE_REQUEST = 'track-update-request',\n  PEER_LEAVE_REQUEST = 'peer-leave-request',\n  CHANGE_TRACK_MUTE_STATE_REQUEST = 'change-track-mute-state-request',\n  START_RTMP_OR_RECORDING_REQUEST = 'rtmp-start',\n  STOP_RTMP_AND_RECORDING_REQUEST = 'rtmp-stop',\n}\n\nexport function convertSignalMethodtoErrorAction(method: HMSSignalMethod): HMSAction {\n  switch (method) {\n    case HMSSignalMethod.JOIN:\n      return HMSAction.JOIN;\n    case HMSSignalMethod.OFFER:\n      return HMSAction.PUBLISH;\n    case HMSSignalMethod.ANSWER:\n      return HMSAction.SUBSCRIBE;\n    case HMSSignalMethod.TRACK_UPDATE:\n      return HMSAction.TRACK;\n    default:\n      return HMSAction.NONE;\n  }\n}\n","import { v4 as uuid } from 'uuid';\nimport { ISignal } from '../ISignal';\nimport { ISignalEventsObserver } from '../ISignalEventsObserver';\nimport {\n  Track,\n  AcceptRoleChangeParams,\n  RequestForRoleChangeParams,\n  TrackUpdateRequestParams,\n  RemovePeerRequest,\n  MultiTrackUpdateRequestParams,\n  StartRTMPOrRecordingRequestParams,\n} from '../interfaces';\nimport { HMSConnectionRole, HMSTrickle } from '../../connection/model';\nimport { convertSignalMethodtoErrorAction, HMSSignalMethod, JsonRpcRequest, JsonRpcResponse } from './models';\nimport { PromiseCallbacks } from '../../utils/promise';\nimport HMSLogger from '../../utils/logger';\nimport { ErrorFactory, HMSAction } from '../../error/ErrorFactory';\nimport AnalyticsEvent from '../../analytics/AnalyticsEvent';\nimport { DEFAULT_SIGNAL_PING_TIMEOUT, SIGNAL_PING_INTERVAL } from '../../utils/constants';\nimport Message from '../../sdk/models/HMSMessage';\nimport { HMSException } from '../../error/HMSException';\n\nexport default class JsonRpcSignal implements ISignal {\n  private readonly TAG = '[ SIGNAL ]: ';\n  readonly observer: ISignalEventsObserver;\n\n  /**\n   * Sometimes before [join] is completed, there could be a lot of trickles\n   * Sending [HMSTrickle]` before [join] web socket message leads to\n   * error: [500] no rtc transport exists for this Peer\n   *\n   * We keep a list of pending trickles and send them immediately after [join]\n   * is done.\n   */\n  private isJoinCompleted: boolean = false;\n  private pendingTrickle: Array<HMSTrickle> = [];\n\n  private socket: WebSocket | null = null;\n\n  private callbacks = new Map<string, PromiseCallbacks<string>>();\n\n  private _isConnected: boolean = false;\n\n  public get isConnected(): boolean {\n    return this._isConnected;\n  }\n\n  private id = 0;\n\n  public set isConnected(newValue: boolean) {\n    HMSLogger.d(this.TAG, 'isConnected set', { id: this.id, old: this._isConnected, new: newValue });\n    if (this._isConnected === newValue) return;\n\n    if (this._isConnected && !newValue) {\n      // went offline\n      this._isConnected = newValue;\n      this.observer.onOffline();\n    } else if (!this._isConnected && newValue) {\n      // went online\n      this._isConnected = newValue;\n      this.observer.onOnline();\n    }\n  }\n\n  constructor(observer: ISignalEventsObserver) {\n    this.observer = observer;\n    window.addEventListener('offline', () => {\n      HMSLogger.d(this.TAG, 'Window network offline');\n      this.isConnected = false;\n    });\n\n    window.addEventListener('online', () => {\n      HMSLogger.d(this.TAG, 'Window network online');\n    });\n\n    this.onCloseHandler = this.onCloseHandler.bind(this);\n    this.onMessageHandler = this.onMessageHandler.bind(this);\n  }\n\n  private async call<T>(method: string, params: any): Promise<T> {\n    const id = uuid();\n    const message = { method, params, id, jsonrpc: '2.0' } as JsonRpcRequest;\n\n    this.socket!.send(JSON.stringify(message));\n\n    try {\n      const response = await new Promise<any>((resolve, reject) => {\n        this.callbacks.set(id, { resolve, reject });\n      });\n\n      return response;\n    } catch (ex) {\n      const error = ex as HMSException;\n      throw ErrorFactory.WebsocketMethodErrors.ServerErrors(\n        Number((error as HMSException).code),\n        convertSignalMethodtoErrorAction(method as HMSSignalMethod),\n        (error as HMSException).message,\n      );\n    }\n  }\n\n  private notify(method: string, params: any) {\n    const message = { method, params };\n\n    this.socket!.send(JSON.stringify(message));\n  }\n\n  open(uri: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      // cleanup\n      if (this.socket) {\n        this.socket.removeEventListener('close', this.onCloseHandler);\n        this.socket.removeEventListener('message', this.onMessageHandler);\n      }\n\n      this.socket = new WebSocket(uri); // @DISCUSS: Inject WebSocket as a dependency so that it can be easier to mock and test\n\n      const errorListener = (error: Event) => {\n        HMSLogger.d(this.TAG, 'Error opening socket connection', error);\n        reject(\n          ErrorFactory.WebSocketConnectionErrors.GenericConnect(HMSAction.JOIN, 'Error opening socket connection'),\n        );\n      };\n      this.socket.addEventListener('error', errorListener);\n\n      const openHandler = () => {\n        resolve();\n        this.isConnected = true;\n        this.id++;\n        this.socket!.removeEventListener('open', openHandler);\n        this.socket!.removeEventListener('error', errorListener);\n        this.pingPongLoop(this.id);\n      };\n\n      this.socket.addEventListener('open', openHandler);\n      this.socket.addEventListener('close', this.onCloseHandler);\n      this.socket.addEventListener('message', this.onMessageHandler);\n    });\n  }\n\n  async close(): Promise<void> {\n    const p = new Promise<void>((resolve) => {\n      this.socket!.addEventListener('close', () => resolve());\n    });\n    // @TODO: Clean up: Remove event listeners.\n\n    // For `1000` Refer: https://tools.ietf.org/html/rfc6455#section-7.4.1\n    this.socket!.close(1000, 'Normal Close');\n    this.isConnected = false;\n    this.socket!.removeEventListener('close', this.onCloseHandler);\n    this.socket!.removeEventListener('message', this.onMessageHandler);\n    return p;\n  }\n\n  async join(\n    name: string,\n    data: string,\n    offer: RTCSessionDescriptionInit,\n    disableVidAutoSub: boolean,\n  ): Promise<RTCSessionDescriptionInit> {\n    const params = { name, disableVidAutoSub, data, offer };\n    const response: RTCSessionDescriptionInit = await this.call(HMSSignalMethod.JOIN, params);\n\n    this.isJoinCompleted = true;\n    this.pendingTrickle.forEach(({ target, candidate }) => this.trickle(target, candidate));\n    this.pendingTrickle.length = 0;\n\n    HMSLogger.d(this.TAG, `join: response=${JSON.stringify(response, null, 1)}`);\n    return response;\n  }\n\n  trickle(target: HMSConnectionRole, candidate: RTCIceCandidateInit) {\n    if (this.isJoinCompleted) {\n      this.notify(HMSSignalMethod.TRICKLE, { target, candidate });\n    } else {\n      this.pendingTrickle.push({ target, candidate });\n    }\n  }\n\n  async offer(desc: RTCSessionDescriptionInit, tracks: Map<string, any>): Promise<RTCSessionDescriptionInit> {\n    const response = await this.call(HMSSignalMethod.OFFER, {\n      desc,\n      tracks: Object.fromEntries(tracks),\n    });\n    return response as RTCSessionDescriptionInit;\n  }\n\n  answer(desc: RTCSessionDescriptionInit) {\n    this.notify(HMSSignalMethod.ANSWER, { desc });\n  }\n\n  trackUpdate(tracks: Map<string, Track>) {\n    this.notify(HMSSignalMethod.TRACK_UPDATE, { version: '1.0', tracks: Object.fromEntries(tracks) });\n  }\n\n  async broadcast(message: Message) {\n    await this.call(HMSSignalMethod.BROADCAST, { version: '1.0', ...message.toSignalParams() });\n  }\n\n  recordStart() {}\n\n  recordEnd() {}\n\n  leave() {\n    this.notify(HMSSignalMethod.LEAVE, { version: '1.0' });\n  }\n\n  async endRoom(lock: boolean, reason: string) {\n    await this.call(HMSSignalMethod.END_ROOM, { lock, reason });\n  }\n\n  sendEvent(event: AnalyticsEvent) {\n    if (!this.isConnected) {\n      throw Error(`${this.TAG} not connected. Could not send event ${event}`);\n    }\n    this.notify(HMSSignalMethod.ANALYTICS, event.toSignalParams());\n  }\n\n  ping(timeout: number): Promise<number> {\n    const pingTime = Date.now();\n    const timer: Promise<number> = new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(Date.now() - pingTime);\n      }, timeout + 1);\n    });\n    const pongTimeDiff = this.call(HMSSignalMethod.PING, { timestamp: pingTime })\n      .then(() => Date.now() - pingTime)\n      .catch(() => Date.now() - pingTime);\n\n    return Promise.race([timer, pongTimeDiff]);\n  }\n\n  async requestRoleChange(params: RequestForRoleChangeParams) {\n    await this.call(HMSSignalMethod.ROLE_CHANGE_REQUEST, params);\n  }\n\n  async acceptRoleChangeRequest(params: AcceptRoleChangeParams) {\n    await this.call(HMSSignalMethod.ROLE_CHANGE, params);\n  }\n\n  async requestTrackStateChange(params: TrackUpdateRequestParams) {\n    await this.call(HMSSignalMethod.TRACK_UPDATE_REQUEST, params);\n  }\n\n  async requestMultiTrackStateChange(params: MultiTrackUpdateRequestParams) {\n    await this.call(HMSSignalMethod.CHANGE_TRACK_MUTE_STATE_REQUEST, params);\n  }\n\n  async removePeer(params: RemovePeerRequest) {\n    await this.call(HMSSignalMethod.PEER_LEAVE_REQUEST, params);\n  }\n\n  async startRTMPOrRecording(params: StartRTMPOrRecordingRequestParams) {\n    await this.call(HMSSignalMethod.START_RTMP_OR_RECORDING_REQUEST, { version: '1.0', ...params });\n  }\n\n  async stopRTMPAndRecording() {\n    await this.call(HMSSignalMethod.STOP_RTMP_AND_RECORDING_REQUEST, { version: '1.0' });\n  }\n\n  private onCloseHandler(event: CloseEvent) {\n    HMSLogger.d(`Websocket closed code=${event.code}`);\n    this.isConnected = false;\n    // https://stackoverflow.com/questions/18803971/websocket-onerror-how-to-read-error-description\n\n    // @DISCUSS: onOffline would have thrown error already.\n    // if (event.code !== 1000) {\n    //   HMSLogger.e(`Websocket closed code=${event.code}, reason=${event.reason}`);\n    //   // 1000 code indicated `Normal Closure` [https://tools.ietf.org/html/rfc6455#section-7.4.1]\n    //   const error = ErrorFactory.WebSocketConnectionErrors.WebSocketConnectionLost(\n    //     HMSAction.INIT,\n    //     `${event.reason} [${event.code}]`,\n    //   );\n    //   this.observer.onFailure(error);\n    // }\n  }\n\n  private onMessageHandler(event: MessageEvent) {\n    const text: string = event.data;\n    const response = JSON.parse(text);\n\n    if (response.hasOwnProperty('id')) {\n      /** This is a response to [call] */\n      const typedResponse = response as JsonRpcResponse;\n      const id: string = typedResponse.id;\n      if (this.callbacks.has(id)) {\n        const cb = this.callbacks.get(id)!;\n        this.callbacks.delete(id);\n        if (typedResponse.result) {\n          cb.resolve(typedResponse.result);\n        } else {\n          cb.reject(typedResponse.error);\n        }\n      } else {\n        this.observer.onNotification(typedResponse);\n      }\n    } else if (response.hasOwnProperty('method')) {\n      if (response.method === HMSSignalMethod.OFFER) {\n        this.observer.onOffer(response.params);\n      } else if (response.method === HMSSignalMethod.TRICKLE) {\n        this.observer.onTrickle(response.params);\n      } else if (response.method === HMSSignalMethod.SERVER_ERROR) {\n        this.observer.onServerError(\n          ErrorFactory.WebsocketMethodErrors.ServerErrors(\n            Number(response.params.code),\n            HMSAction.NONE,\n            response.params.message,\n          ),\n        );\n      } else {\n        this.observer.onNotification(response);\n      }\n    } else throw Error(`WebSocket message has no 'method' or 'id' field, message=${response}`);\n  }\n\n  private async pingPongLoop(id: number) {\n    const pingTimeout = DEFAULT_SIGNAL_PING_TIMEOUT;\n    if (this.isConnected) {\n      const pongTimeDiff = await this.ping(pingTimeout);\n      if (pongTimeDiff > pingTimeout) {\n        HMSLogger.d(this.TAG, 'Pong timeout', { id });\n        if (this.id === id) {\n          this.isConnected = false;\n        }\n      } else {\n        setTimeout(() => this.pingPongLoop(id), SIGNAL_PING_INTERVAL);\n      }\n    }\n  }\n}\n","import { HMSAudioTrackSettings as IHMSAudioTrackSettings, HMSAudioCodec } from '../../interfaces';\nimport { IAnalyticsPropertiesProvider } from '../../analytics/IAnalyticsPropertiesProvider';\n\nexport class HMSAudioTrackSettingsBuilder {\n  private _volume: number = 1.0;\n  private _codec: HMSAudioCodec = HMSAudioCodec.OPUS;\n  private _maxBitrate: number = 32;\n  private _deviceId: string = 'default';\n  private _advanced: Array<MediaTrackConstraintSet> = [\n    // @ts-ignore\n    { googEchoCancellation: { exact: true } },\n    // @ts-ignore\n    { googExperimentalEchoCancellation: { exact: true } },\n    // @ts-ignore\n    { autoGainControl: { exact: true } },\n    // @ts-ignore\n    { noiseSuppression: { exact: true } },\n    // @ts-ignore\n    { googHighpassFilter: { exact: true } },\n    // @ts-ignore\n    { googAudioMirroring: { exact: true } },\n  ];\n\n  volume(volume: number) {\n    if (!(0.0 <= volume && volume <= 1.0)) throw Error('volume can only be in range [0.0, 1.0]');\n    this._volume = volume;\n    return this;\n  }\n\n  codec(codec: HMSAudioCodec) {\n    this._codec = codec;\n    return this;\n  }\n\n  maxBitrate(maxBitrate: number) {\n    if (maxBitrate <= 0) throw Error('maxBitrate should be >= 1');\n    this._maxBitrate = maxBitrate;\n    return this;\n  }\n\n  deviceId(deviceId: string) {\n    // TODO: Validate if device-id is OK\n    this._deviceId = deviceId;\n    return this;\n  }\n\n  advanced(advanced: Array<MediaTrackConstraintSet>) {\n    this._advanced = advanced;\n    return this;\n  }\n\n  build() {\n    return new HMSAudioTrackSettings(this._volume, this._codec, this._maxBitrate, this._deviceId, this._advanced);\n  }\n}\n\nexport class HMSAudioTrackSettings implements IHMSAudioTrackSettings, IAnalyticsPropertiesProvider {\n  readonly volume: number;\n  readonly codec: HMSAudioCodec;\n  readonly maxBitrate: number;\n  readonly deviceId: string;\n  readonly advanced: Array<MediaTrackConstraintSet>;\n\n  constructor(\n    volume: number,\n    codec: HMSAudioCodec,\n    maxBitrate: number,\n    deviceId: string,\n    advanced: Array<MediaTrackConstraintSet>,\n  ) {\n    this.volume = volume;\n    this.codec = codec;\n    this.maxBitrate = maxBitrate;\n    this.deviceId = deviceId;\n    this.advanced = advanced;\n  }\n\n  toConstraints(): MediaTrackConstraints {\n    return {\n      deviceId: this.deviceId,\n      advanced: this.advanced,\n    };\n  }\n\n  toAnalyticsProperties() {\n    return {\n      audio_bitrate: this.maxBitrate,\n      audio_codec: this.codec,\n    };\n  }\n}\n","import { IAnalyticsPropertiesProvider } from '../../analytics/IAnalyticsPropertiesProvider';\nimport { HMSVideoTrackSettings as IHMSVideoTrackSettings, HMSVideoCodec } from '../../interfaces';\n\nexport class HMSVideoTrackSettingsBuilder {\n  private _width: number = 320;\n  private _height: number = 180;\n  private _codec: HMSVideoCodec = HMSVideoCodec.VP8;\n  private _maxFramerate: number = 30;\n  private _maxBitrate?: number = 150;\n  private _deviceId?: string;\n  private _advanced: Array<MediaTrackConstraintSet> = [];\n\n  setWidth(width: number) {\n    this._width = width;\n    return this;\n  }\n\n  setHeight(height: number) {\n    this._height = height;\n    return this;\n  }\n\n  codec(codec: HMSVideoCodec) {\n    this._codec = codec;\n    return this;\n  }\n\n  maxFramerate(maxFramerate: number) {\n    if (maxFramerate <= 0) throw Error('maxFramerate should be >= 1');\n    this._maxFramerate = maxFramerate;\n    return this;\n  }\n\n  /**\n   * @param useDefault Ignored if maxBitrate is valid.\n   * If true and maxBitrate is undefined - sets a default value.\n   * If false and maxBitrate is undefined - sets undefined.\n   */\n  maxBitrate(maxBitrate?: number, useDefault = true) {\n    if (typeof maxBitrate === 'number' && maxBitrate <= 0) throw Error('maxBitrate should be >= 1');\n    this._maxBitrate = maxBitrate;\n    if (!this._maxBitrate && useDefault) this._maxBitrate = 150_000;\n    return this;\n  }\n\n  deviceId(deviceId: string) {\n    // TODO: Validate if device-id is OK\n    this._deviceId = deviceId;\n    return this;\n  }\n\n  advanced(advanced: Array<MediaTrackConstraintSet>) {\n    this._advanced = advanced;\n    return this;\n  }\n\n  build() {\n    return new HMSVideoTrackSettings(\n      this._width,\n      this._height,\n      this._codec,\n      this._maxFramerate,\n      this._deviceId,\n      this._advanced,\n      this._maxBitrate,\n    );\n  }\n}\n\nexport class HMSVideoTrackSettings implements IHMSVideoTrackSettings, IAnalyticsPropertiesProvider {\n  readonly width: number;\n  readonly height: number;\n  readonly codec: HMSVideoCodec;\n  readonly maxFramerate: number;\n  readonly maxBitrate?: number;\n  readonly deviceId?: string;\n  readonly advanced: Array<MediaTrackConstraintSet>;\n\n  constructor(\n    width: number,\n    height: number,\n    codec: HMSVideoCodec,\n    maxFramerate: number,\n    deviceId: string | undefined,\n    advanced: Array<MediaTrackConstraintSet>,\n    maxBitrate?: number,\n  ) {\n    this.width = width;\n    this.height = height;\n    this.codec = codec;\n    this.maxFramerate = maxFramerate;\n    this.maxBitrate = maxBitrate;\n    this.deviceId = deviceId;\n    this.advanced = advanced;\n  }\n\n  toConstraints(): MediaTrackConstraints {\n    return {\n      width: this.width,\n      height: this.height,\n      frameRate: this.maxFramerate,\n      deviceId: this.deviceId,\n    };\n  }\n\n  toAnalyticsProperties() {\n    return {\n      width: this.width,\n      height: this.height,\n      video_bitrate: this.maxBitrate,\n      framerate: this.maxFramerate,\n      video_codec: this.codec,\n    };\n  }\n}\n","import { HMSVideoTrackSettings, HMSVideoTrackSettingsBuilder } from './HMSVideoTrackSettings';\nimport { HMSAudioTrackSettings, HMSAudioTrackSettingsBuilder } from './HMSAudioTrackSettings';\nimport { ErrorFactory, HMSAction } from '../../error/ErrorFactory';\nimport { IAnalyticsPropertiesProvider } from '../../analytics/IAnalyticsPropertiesProvider';\n\nexport class HMSTrackSettingsBuilder {\n  private _video: HMSVideoTrackSettings | null = new HMSVideoTrackSettingsBuilder().build();\n  private _audio: HMSAudioTrackSettings | null = new HMSAudioTrackSettingsBuilder().build();\n  private _screen: HMSVideoTrackSettings | null = new HMSVideoTrackSettingsBuilder().build();\n  private _simulcast = false;\n\n  video(video: HMSVideoTrackSettings | null) {\n    this._video = video;\n    return this;\n  }\n\n  audio(audio: HMSAudioTrackSettings | null) {\n    this._audio = audio;\n    return this;\n  }\n\n  screen(screen: HMSVideoTrackSettings | null) {\n    this._screen = screen;\n    return this;\n  }\n\n  simulcast(enabled: boolean) {\n    this._simulcast = enabled;\n    return this;\n  }\n\n  build() {\n    if (this._audio === null && this._video === null) {\n      throw ErrorFactory.TracksErrors.NothingToReturn(HMSAction.TRACK);\n    }\n\n    if (this._video === null && this._simulcast) {\n      throw ErrorFactory.TracksErrors.InvalidVideoSettings(\n        HMSAction.TRACK,\n        'Cannot enable simulcast when no video settings are provided',\n      );\n    }\n\n    return new HMSTrackSettings(this._video, this._audio, this._simulcast, this._screen || undefined);\n  }\n}\n\nexport class HMSTrackSettings implements IAnalyticsPropertiesProvider {\n  readonly video: HMSVideoTrackSettings | null;\n  readonly audio: HMSAudioTrackSettings | null;\n  readonly screen: HMSVideoTrackSettings | null;\n  readonly simulcast: boolean;\n\n  constructor(\n    video: HMSVideoTrackSettings | null,\n    audio: HMSAudioTrackSettings | null,\n    simulcast: boolean,\n    screen: HMSVideoTrackSettings | null = null,\n  ) {\n    this.video = video;\n    this.audio = audio;\n    this.simulcast = simulcast;\n    this.screen = screen;\n  }\n\n  toAnalyticsProperties() {\n    let properties = {\n      audio_enabled: this.audio !== null,\n      video_enabled: this.video !== null,\n    };\n\n    if (this.audio) {\n      properties = { ...this.audio.toAnalyticsProperties(), ...properties };\n    }\n\n    if (this.video) {\n      properties = { ...this.video.toAnalyticsProperties(), ...properties };\n    }\n\n    return properties;\n  }\n}\n","import adapter from 'webrtc-adapter';\nimport { ErrorFactory, HMSAction } from './ErrorFactory';\nimport { HMSException } from './HMSException';\n\nexport enum HMSGetMediaActions {\n  AUDIO = 'audio',\n  VIDEO = 'video',\n  AV = 'audio, video',\n  SCREEN = 'screen',\n}\n\n/**\n * # Edge Cases:\n * - Screenshare error: The problem is when block at OS level, chrome throws NotAllowedError(HMS code - 3001) while firefox throws NotFoundError(HMS code - 3002),\n * we will handle this internally and throw error as User block - 3001 and OS block - 3002 for all browsers.\n * Chrome -\n * User blocked - NotAllowedError - Permission denied\n * System blocked - NotAllowedError - Permission denied by system\n */\nfunction convertMediaErrorToHMSException(err: Error, deviceInfo: string): HMSException {\n  const message = err.message.toLowerCase();\n\n  /**\n   * Note: Adapter detects all chromium browsers as 'chrome'\n   */\n  if (\n    deviceInfo === 'screen' &&\n    adapter.browserDetails.browser === 'chrome' &&\n    err.name === 'NotAllowedError' &&\n    err.message.includes('denied by system')\n  ) {\n    return ErrorFactory.TracksErrors.DeviceNotAvailable(HMSAction.TRACK, deviceInfo, err.message);\n  }\n\n  switch (err.name) {\n    case 'OverconstrainedError':\n      return ErrorFactory.TracksErrors.GenericTrack(HMSAction.TRACK, err.message);\n    case 'NotAllowedError':\n      return ErrorFactory.TracksErrors.CantAccessCaptureDevice(HMSAction.TRACK, deviceInfo, err.message);\n    case 'NotFoundError':\n      return ErrorFactory.TracksErrors.DeviceNotAvailable(HMSAction.TRACK, deviceInfo, err.message);\n    case 'NotReadableError':\n      return ErrorFactory.TracksErrors.DeviceInUse(HMSAction.TRACK, deviceInfo, err.message);\n    case 'TypeError':\n      return ErrorFactory.TracksErrors.NothingToReturn(HMSAction.TRACK, err.message);\n    default:\n      if (message.includes('device not found')) {\n        return ErrorFactory.TracksErrors.DeviceNotAvailable(HMSAction.TRACK, deviceInfo, err.message);\n      } else if (message.includes('permission denied')) {\n        return ErrorFactory.TracksErrors.CantAccessCaptureDevice(HMSAction.TRACK, deviceInfo, err.message);\n      } else {\n        return ErrorFactory.TracksErrors.GenericTrack(HMSAction.TRACK, err.message);\n      }\n  }\n}\n\nexport function BuildGetMediaError(err: Error, deviceInfo: string): HMSException {\n  const exception = convertMediaErrorToHMSException(err, deviceInfo);\n  exception.addNativeError(err);\n  return exception;\n}\n","import { BuildGetMediaError, HMSGetMediaActions } from '../error/utils';\nimport { HMSAudioTrackSettings, HMSVideoTrackSettings } from '../media/settings';\n\nexport async function getAudioTrack(settings: HMSAudioTrackSettings): Promise<MediaStreamTrack> {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: settings ? settings.toConstraints() : false,\n    });\n    return stream.getAudioTracks()[0];\n  } catch (err) {\n    throw BuildGetMediaError(err as Error, HMSGetMediaActions.AUDIO);\n  }\n}\n\nexport async function getVideoTrack(settings: HMSVideoTrackSettings): Promise<MediaStreamTrack> {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: settings ? settings.toConstraints() : false,\n    });\n    return stream.getVideoTracks()[0];\n  } catch (err) {\n    throw BuildGetMediaError(err as Error, HMSGetMediaActions.VIDEO);\n  }\n}\n\n// To differentiate between normal track and empty track.\nexport function isEmptyTrack(track: MediaStreamTrack) {\n  // Firefox gives '' as label for empty track(created from audio context)\n  return 'canvas' in track || track.label === 'MediaStreamAudioDestinationNode' || track.label === '';\n}\n\nlet blankCanvas: any;\n\n// the dimensions of the passed in track are used to create the empty video track\n// a dummy change(toggling a pixel value) is done periodically to keep on sending bytes\nexport function getEmptyVideoTrack(prevTrack?: MediaStreamTrack): MediaStreamTrack {\n  const width = prevTrack?.getSettings()?.width || 320;\n  const height = prevTrack?.getSettings()?.height || 240;\n  const frameRate = 10; // fps TODO: experiment, see if this can be reduced\n  if (!blankCanvas) {\n    blankCanvas = Object.assign(document.createElement('canvas'), { width, height });\n    blankCanvas.getContext('2d')?.fillRect(0, 0, width, height);\n  }\n  const stream = blankCanvas.captureStream(frameRate);\n  const emptyTrack = stream.getVideoTracks()[0];\n  const intervalID = setInterval(() => {\n    if (emptyTrack.readyState === 'ended') {\n      clearInterval(intervalID);\n      return;\n    }\n    const ctx = blankCanvas.getContext('2d');\n    if (ctx) {\n      const pixel = ctx.getImageData(0, 0, 1, 1).data;\n      const red = pixel[0] === 0 ? 1 : 0; // toggle red in pixel\n      ctx.fillStyle = `rgb(${red}, 0, 0)`;\n      ctx.fillRect(0, 0, 1, 1);\n    }\n  }, 1000 / frameRate);\n  emptyTrack.onended = () => {\n    clearInterval(intervalID);\n  };\n  emptyTrack.enabled = false;\n  return emptyTrack;\n}\n\nexport function getEmptyAudioTrack(): MediaStreamTrack {\n  const ctx = new AudioContext();\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  // @ts-expect-error\n  const emptyTrack = dst.stream.getAudioTracks()[0];\n  emptyTrack.enabled = false;\n  return emptyTrack;\n}\n","import { EventEmitter } from 'events';\n\n/**\n * Typed Event Emitter Reference:\n * https://rjzaworski.com/2019/10/event-emitters-in-typescript#a-typescript-event-emitter-interface\n */\n\nexport type EventMap = Record<string, any>;\n\nexport type EventKey<T extends EventMap> = string & keyof T;\nexport type EventReceiver<T> = (params: T) => void;\n\n// interface Emitter<T extends EventMap> {\n//   on<K extends EventKey<T>>(eventName: K, fn: EventReceiver<T[K]>): void;\n//   off<K extends EventKey<T>>(eventName: K, fn: EventReceiver<T[K]>): void;\n//   emit<K extends EventKey<T>>(eventName: K, params: T[K]): void;\n// }\n\nexport abstract class TypedEventEmitter<T extends EventMap> extends EventEmitter {\n  on<K extends EventKey<T>>(eventName: K, fn: EventReceiver<T[K]>) {\n    return super.on(eventName, fn);\n  }\n\n  off<K extends EventKey<T>>(eventName: K, fn: EventReceiver<T[K]>) {\n    return super.off(eventName, fn);\n  }\n\n  emit<K extends EventKey<T>>(eventName: K, params: T[K]) {\n    return super.emit(eventName, params);\n  }\n\n  listeners<K extends EventKey<T>>(eventName: K): EventReceiver<T[K]>[] {\n    return super.listeners(eventName) as EventReceiver<T[K]>[];\n  }\n}\n","/**\n * Refer: https://github.com/cwilso/volume-meter/blob/master/volume-meter.js\n */\n\nimport { HMSAudioTrack } from '../media/tracks';\nimport { TypedEventEmitter } from './typed-event-emitter';\n\nconst THRESHOLD = 35;\nconst UPDATE_THRESHOLD = 5;\n\nexport interface ITrackAudioLevelUpdate {\n  track: HMSAudioTrack;\n  audioLevel: number;\n}\n\nexport class TrackAudioLevelMonitor extends TypedEventEmitter<{\n  AUDIO_LEVEL_UPDATE: ITrackAudioLevelUpdate | undefined;\n}> {\n  private interval?: number;\n  private audioContext: AudioContext;\n  private audioSource: MediaStreamAudioSourceNode;\n  // @TODO: ScriptProcessorNode Deprecated - Replace with audio analyer node\n  private processor: ScriptProcessorNode;\n  private averaging = 0.99;\n  private audioLevel = 0;\n  private rawLevel = 0;\n\n  private updateAudioLevel(value: number) {\n    const audioLevel = Math.ceil(Math.min(value * 400, 100));\n    if (audioLevel < this.audioLevel - UPDATE_THRESHOLD || audioLevel > this.audioLevel + UPDATE_THRESHOLD) {\n      this.audioLevel = audioLevel > THRESHOLD ? audioLevel : 0;\n      const audioLevelUpdate = this.audioLevel ? { track: this.track, audioLevel: this.audioLevel } : undefined;\n      this.emit('AUDIO_LEVEL_UPDATE', audioLevelUpdate);\n    }\n  }\n\n  constructor(private track: HMSAudioTrack) {\n    super();\n    this.audioContext = new AudioContext();\n    this.audioSource = this.audioContext.createMediaStreamSource(new MediaStream([this.track.nativeTrack]));\n    this.processor = this.audioContext.createScriptProcessor(512);\n    this.processor.addEventListener('audioprocess', this.processVolume);\n    this.audioSource.connect(this.processor);\n    this.processor.connect(this.audioContext.destination);\n  }\n\n  private processVolume = (event: AudioProcessingEvent) => {\n    const input = event.inputBuffer.getChannelData(0);\n    // Calculating root mean square\n    let sum = 0.0;\n    for (let i = 0; i < input.length; ++i) {\n      sum += input[i] * input[i];\n    }\n    const rms = Math.sqrt(sum / input.length);\n    this.rawLevel = Math.max(rms, this.rawLevel * this.averaging);\n  };\n\n  start() {\n    let prev = -1;\n    this.interval = window.setTimeout(() => {\n      if (this.rawLevel !== prev) {\n        // only send an update when there is a change\n        prev = this.rawLevel;\n        this.updateAudioLevel(this.rawLevel);\n      }\n      this.start();\n    }, 1000);\n  }\n\n  stop() {\n    this.updateAudioLevel(0);\n    window.clearInterval(this.interval);\n    this.interval = undefined;\n  }\n}\n","/**\n * A plugin implementing this interface can be registered with HMSLocalAudioTrack to transform, process or\n * analyze the local audio track.These can include applications like background noise removal, speech commands, live\n * analysis of audio etc. The below functions are required for the sdk to properly use the plugin, usually\n * the plugin would also be exposing some public functions of its own for the UI to control its working.\n */\n\nexport interface HMSAudioPlugin {\n  /**\n   * This function will be called by the SDK for audio track which the plugin needs to process.\n\n   */\n  processAudioTrack(ctx: AudioContext, source: AudioNode): Promise<AudioNode>;\n\n  /**\n   * This function will be called before the call to init, it is used to check whether the plugin supports current\n   * OS and device or not. An error will be thrown back to the user if they try to use an unsupported plugin.\n   */\n  isSupported(): boolean;\n\n  /**\n   * This function will be called in the beginning for initialization which may include tasks like setting up\n   * variables, loading ML models etc. This can be used by a plugin to ensure it's prepared at the time\n   * processAudio is called.\n   */\n  init(): Promise<void> | void;\n\n  /**\n   * The name is meant to uniquely specify a plugin instance. This will be used to track number of plugins\n   * added to the track, and same name won't be allowed twice.\n   */\n  getName(): string;\n\n  /**\n   This sets the Plugin type @see HMSAudioPluginType, processing will happen\n   based on the type of plugin\n   */\n  getPluginType(): HMSAudioPluginType;\n  /*\n   * the plugin can use this function to dispose off its resources. It'll be called when the plugin instance is\n   * no longer needed at the end.\n   */\n  stop(): void;\n}\n\n/**\n * Specifies the type of the plugin a transforming plugin will get an output audio node to give the resulting\n * transformation. While an analyzing plugin will only be passed the input node.\n */\nexport enum HMSAudioPluginType {\n  TRANSFORM = 'TRANSFORM',\n  ANALYZE = 'ANALYZE',\n}\n","export enum DomainCategory {\n  CUSTOM = 'CUSTOM',\n  LOCAL = 'LOCAL',\n  HMS = 'HMS',\n}\n","import { DomainCategory } from './AnalyticsEventDomains';\nimport { isBrowser } from '../utils/support';\n\nfunction getDomainCategory() {\n  // this function gives us the domain category(sutom, hms , local) of the base url.\n  // below if statement checks if it's running in a browser ; or if we can use 'window' safely\n\n  if (isBrowser && window) {\n    const baseurl = window.location.hostname;\n\n    if (baseurl === 'localhost' || baseurl === '127.0.0.1') {\n      return DomainCategory.LOCAL;\n    }\n\n    if (baseurl.includes('app.100ms.live')) {\n      return DomainCategory.HMS;\n    } else {\n      return DomainCategory.CUSTOM;\n    }\n  }\n\n  return DomainCategory.CUSTOM;\n}\n\nexport const domainCategory = getDomainCategory();\n","import { ISignalParamsProvider } from '../signal/ISignalSendParamsProvider';\nimport { domainCategory } from './domain-analytics';\nimport { AnalyticsEventLevel } from './AnalyticsEventLevel';\n\ninterface AnalyticsEventInit {\n  name: string;\n  level: AnalyticsEventLevel;\n  includesPII?: boolean;\n  properties?: Record<string, any>;\n  timestamp?: number;\n}\n\ninterface SignalEventParams {\n  name: string;\n  info: any;\n  timestamp: number;\n}\n\nexport default class AnalyticsEvent implements ISignalParamsProvider<SignalEventParams> {\n  name: string;\n  level: AnalyticsEventLevel;\n  includesPII: boolean;\n  properties: Record<string, any>;\n  timestamp: number;\n\n  constructor({ name, level, properties, includesPII, timestamp }: AnalyticsEventInit) {\n    this.name = name;\n    this.level = level;\n    this.includesPII = includesPII || false;\n    this.properties = properties || {};\n    this.timestamp = timestamp || new Date().getTime(); // Timestamp of generating the event\n  }\n\n  toSignalParams() {\n    return {\n      name: this.name,\n      info: { ...this.properties, timestamp: this.timestamp, domain: domainCategory },\n      timestamp: new Date().getTime(), // Timestamp of sending the event\n    };\n  }\n}\n","export enum HMSAnalyticsLevel {\n  VERBOSE,\n  INFO,\n  ERROR,\n  OFF,\n}\n\nexport enum AnalyticsEventLevel {\n  VERBOSE,\n  INFO,\n  ERROR,\n  OFF,\n}\n","import AnalyticsEvent from './AnalyticsEvent';\nimport { AnalyticsEventLevel } from './AnalyticsEventLevel';\nimport { HMSException } from '../error/HMSException';\n\nexport default class MediaPluginsAnalyticsFactory {\n  static failure(pluginName: string, error: HMSException) {\n    const name = 'mediaPlugin.failed';\n    const level = AnalyticsEventLevel.ERROR;\n    const properties = { plugin_name: pluginName, ...error.toAnalyticsProperties() };\n\n    return new AnalyticsEvent({ name, level, properties });\n  }\n\n  static audioPluginStats({\n    pluginName,\n    duration,\n    loadTime,\n  }: {\n    pluginName: string;\n    duration: number;\n    loadTime: number;\n  }) {\n    const name = 'mediaPlugin.stats';\n    const level = AnalyticsEventLevel.INFO;\n    const properties = {\n      plugin_name: pluginName,\n      duration: duration,\n      load_time: loadTime,\n    };\n    return new AnalyticsEvent({ name, level, properties });\n  }\n\n  static stats({\n    pluginName,\n    duration,\n    loadTime,\n    avgPreProcessingTime,\n    avgProcessingTime,\n    inputFrameRate,\n    pluginFrameRate,\n  }: {\n    pluginName: string;\n    duration: number;\n    loadTime: number;\n    avgPreProcessingTime: number;\n    avgProcessingTime: number;\n    inputFrameRate: number;\n    pluginFrameRate: number;\n  }) {\n    const name = 'mediaPlugin.stats';\n    const level = AnalyticsEventLevel.INFO;\n    const properties = {\n      plugin_name: pluginName,\n      duration: duration,\n      load_time: loadTime,\n      avg_preprocessing_time: avgPreProcessingTime,\n      avg_processing_time: avgProcessingTime,\n      input_frame_rate: inputFrameRate,\n      plugin_frame_rate: pluginFrameRate,\n    };\n    return new AnalyticsEvent({ name, level, properties });\n  }\n}\n","import { HMSAnalyticsLevel } from './AnalyticsEventLevel';\nimport { ANALYTICS_BUFFER_SIZE } from '../utils/constants';\nimport HMSLogger from '../utils/logger';\nimport AnalyticsEvent from './AnalyticsEvent';\nimport { AnalyticsTransport } from './AnalyticsTransport';\n\nconst TAG = 'AnalyticsEventsService';\n\nexport class AnalyticsEventsService {\n  private bufferSize = ANALYTICS_BUFFER_SIZE;\n\n  private transports: AnalyticsTransport[] = [];\n  private pendingEvents: AnalyticsEvent[] = [];\n\n  level: HMSAnalyticsLevel = HMSAnalyticsLevel.INFO;\n\n  addTransport(transport: AnalyticsTransport) {\n    this.transports.push(transport);\n  }\n\n  removeTransport(transport: AnalyticsTransport) {\n    this.transports.splice(this.transports.indexOf(transport), 1);\n  }\n\n  queue(event: AnalyticsEvent) {\n    if (event.level >= this.level) {\n      this.pendingEvents.push(event);\n\n      if (this.pendingEvents.length > this.bufferSize) {\n        const removedEvent = this.pendingEvents.shift();\n        HMSLogger.d(TAG, 'Max buffer size reached', 'Removed event to accommodate new events', removedEvent);\n      }\n    }\n    return this;\n  }\n\n  flush() {\n    if (this.transports.length === 0) {\n      HMSLogger.w(TAG, 'No valid signalling API found to flush analytics');\n      return;\n    }\n\n    try {\n      while (this.pendingEvents.length > 0) {\n        const event = this.pendingEvents.shift();\n        if (event) {\n          this.transports.forEach((transport) => transport.sendEvent(event));\n        }\n      }\n    } catch (error) {\n      HMSLogger.w(TAG, 'Flush Failed', error);\n    }\n  }\n}\n\nconst analyticsEventsService = new AnalyticsEventsService();\nexport default analyticsEventsService;\n","import MediaPluginsAnalyticsFactory from '../../analytics/MediaPluginsAnalyticsFactory';\nimport analyticsEventsService from '../../analytics/AnalyticsEventsService';\nimport HMSLogger from '../../utils/logger';\nimport { ErrorFactory, HMSAction } from '../../error/ErrorFactory';\nimport { HMSException } from '../../error/HMSException';\n\nconst TAG = 'AudioPluginsAnalytics';\n\nexport class AudioPluginsAnalytics {\n  private readonly initTime: Record<string, number>;\n  private readonly addedTimestamps: Record<string, number>;\n  private readonly pluginAdded: Record<string, boolean>;\n\n  constructor() {\n    this.initTime = {};\n    this.addedTimestamps = {};\n    this.pluginAdded = {};\n  }\n\n  added(name: string) {\n    this.pluginAdded[name] = true;\n    this.addedTimestamps[name] = Date.now();\n    this.initTime[name] = 0;\n  }\n\n  removed(name: string) {\n    //send stats\n    if (this.pluginAdded[name]) {\n      const stats = {\n        pluginName: name,\n        // duration in seconds\n        duration: Math.floor((Date.now() - this.addedTimestamps[name]) / 1000),\n        loadTime: this.initTime[name],\n      };\n      //send stats\n      analyticsEventsService.queue(MediaPluginsAnalyticsFactory.audioPluginStats(stats)).flush();\n      //clean the plugin details\n      this.clean(name);\n    }\n  }\n\n  failure(name: string, error: HMSException) {\n    // send failure event\n    if (this.pluginAdded[name]) {\n      analyticsEventsService.queue(MediaPluginsAnalyticsFactory.failure(name, error)).flush();\n      //clean the plugin details\n      this.clean(name);\n    }\n  }\n\n  async initWithTime<T>(name: string, initFn: () => Promise<T>) {\n    if (this.initTime[name]) {\n      HMSLogger.i(TAG, `Plugin Already loaded ${name}, time it took: ${this.initTime[name]}`);\n      return;\n    }\n    let time: number | undefined = undefined;\n    try {\n      time = await this.timeInMs(initFn);\n      HMSLogger.i(TAG, `Time taken for Plugin ${name} initialization : ${time}`);\n    } catch (e) {\n      //Failed during initialization of plugin(model loading etc...)\n      const err = ErrorFactory.MediaPluginErrors.InitFailed(\n        HMSAction.AUDIO_PLUGINS,\n        'failed during initialization of plugin' + ((e as Error).message || e),\n      );\n      HMSLogger.e(TAG, err);\n      this.failure(name, err);\n      throw err;\n    }\n    if (time) {\n      this.initTime[name] = time;\n    }\n  }\n\n  private async timeInMs<T>(fn: () => Promise<T>): Promise<number> {\n    const start = Date.now();\n    await fn();\n    return Math.floor(Date.now() - start);\n  }\n\n  private clean(name: string) {\n    delete this.addedTimestamps[name];\n    delete this.initTime[name];\n    delete this.pluginAdded[name];\n  }\n}\n","import { HMSAudioPlugin } from './HMSAudioPlugin'; //HMSAudioPluginType\nimport { HMSLocalAudioTrack } from '../../media/tracks';\nimport HMSLogger from '../../utils/logger';\nimport { ErrorFactory, HMSAction } from '../../error/ErrorFactory';\nimport { AudioPluginsAnalytics } from './AudioPluginsAnalytics';\n\nconst TAG = 'AudioPluginsManager';\n\nexport class HMSAudioPluginsManager {\n  private readonly hmsTrack: HMSLocalAudioTrack;\n  private readonly plugins: string[]; // plugin names in order they were added\n  private readonly pluginsMap: Record<string, HMSAudioPlugin>; // plugin names to their instance mapping\n  private audioContext?: AudioContext;\n\n  private sourceNode?: MediaStreamAudioSourceNode;\n  private destinationNode?: MediaStreamAudioDestinationNode;\n  private intermediateNode?: any;\n  private analytics: AudioPluginsAnalytics;\n  private outputTrack?: MediaStreamTrack;\n  private pluginAddInProgress: boolean = false;\n\n  constructor(track: HMSLocalAudioTrack) {\n    this.hmsTrack = track;\n    this.plugins = [];\n    this.pluginsMap = {};\n    this.analytics = new AudioPluginsAnalytics();\n  }\n\n  getPlugins(): string[] {\n    return [...this.plugins];\n  }\n\n  async addPlugin(plugin: HMSAudioPlugin) {\n    if (this.pluginAddInProgress) {\n      const name = plugin.getName?.();\n      if (!name || name === '') {\n        HMSLogger.w('no name provided by the plugin');\n        return;\n      }\n      const err = ErrorFactory.MediaPluginErrors.AddAlreadyInProgress(\n        HMSAction.AUDIO_PLUGINS,\n        'Add Plugin is already in Progress',\n      );\n      this.analytics.failure(name, err);\n      HMSLogger.w(\"can't add another plugin when previous add is in progress\");\n      throw err;\n    }\n\n    this.pluginAddInProgress = true;\n\n    try {\n      await this.addPluginInternal(plugin);\n    } catch (err) {\n      throw err;\n    } finally {\n      this.pluginAddInProgress = false;\n    }\n  }\n\n  private async addPluginInternal(plugin: HMSAudioPlugin) {\n    const name = plugin.getName?.();\n    if (!name || name === '') {\n      HMSLogger.w('no name provided by the plugin');\n      return;\n    }\n    if (this.pluginsMap[name]) {\n      HMSLogger.w(TAG, `plugin - ${plugin.getName()} already added.`);\n      return;\n    }\n\n    if (this.plugins.length > 0) {\n      HMSLogger.w(TAG, 'An audio plugin is already added, currently supporting only one plugin at a time');\n      //TODO: throw err here to notify UI\n      return;\n    }\n\n    if (!plugin.isSupported()) {\n      let err = ErrorFactory.MediaPluginErrors.PlatformNotSupported(HMSAction.AUDIO_PLUGINS, 'platform not supported ');\n      this.analytics.failure(name, err);\n      HMSLogger.i(TAG, `Platform is not supported for plugin - ${plugin.getName()}`);\n      return;\n    }\n    try {\n      this.analytics.added(name);\n      await this.analytics.initWithTime(name, async () => plugin.init());\n      this.plugins.push(name);\n      this.pluginsMap[name] = plugin;\n      await this.startPluginsProcess();\n    } catch (err) {\n      HMSLogger.e(TAG, 'failed to add plugin', err);\n      await this.removePlugin(plugin);\n      throw err;\n    }\n  }\n\n  async removePlugin(plugin: HMSAudioPlugin) {\n    const name = plugin.getName();\n    if (!this.pluginsMap[name]) {\n      HMSLogger.w(TAG, `plugin - ${name} not found to remove.`);\n      return;\n    }\n    HMSLogger.i(TAG, `removing plugin ${name}`);\n    this.removePluginEntry(name);\n    if (this.plugins.length === 0) {\n      HMSLogger.i(TAG, `No plugins left, stopping plugins loop`);\n      await this.stopPluginsProcess();\n    }\n    if (this.intermediateNode) {\n      this.intermediateNode.disconnect();\n      this.intermediateNode = null;\n    }\n\n    plugin.stop();\n    this.analytics.removed(name);\n  }\n\n  removePluginEntry(name: string) {\n    const index = this.plugins.indexOf(name);\n    if (index !== -1) {\n      this.plugins.splice(index, 1);\n    }\n    if (this.pluginsMap[name]) {\n      delete this.pluginsMap[name];\n    }\n  }\n\n  async cleanup() {\n    for (const name of this.plugins) {\n      await this.removePlugin(this.pluginsMap[name]);\n    }\n    // memory cleanup\n    this.outputTrack?.stop();\n  }\n\n  private initElementsAndStream() {\n    if (!this.audioContext) {\n      this.audioContext = new AudioContext();\n    }\n\n    if (!this.sourceNode) {\n      const audioStream = new MediaStream([this.hmsTrack.nativeTrack]);\n      this.sourceNode = this.audioContext.createMediaStreamSource(audioStream);\n    }\n    if (!this.destinationNode) {\n      this.destinationNode = this.audioContext.createMediaStreamDestination();\n      this.outputTrack = this.destinationNode.stream.getAudioTracks()[0];\n    }\n  }\n\n  private async startPluginsProcess() {\n    this.initElementsAndStream();\n    if (!this.audioContext) {\n      HMSLogger.w(TAG, `Audio context is not defined`);\n      return;\n    }\n    try {\n      await this.hmsTrack.setProcessedTrack(this.outputTrack);\n    } catch (err) {\n      HMSLogger.e(TAG, 'error in setting processed track', err);\n      throw err;\n    }\n    try {\n      await this.processAudioThroughPlugins();\n    } catch (err) {\n      HMSLogger.e(TAG, 'error in processing audio plugins', err);\n      throw err;\n    }\n  }\n\n  private async processAudioThroughPlugins() {\n    for (const name of this.plugins) {\n      const plugin = this.pluginsMap[name];\n      if (!plugin) {\n        continue;\n      }\n\n      try {\n        if (this.audioContext) {\n          this.intermediateNode = await plugin.processAudioTrack(\n            this.audioContext,\n            this.intermediateNode || this.sourceNode,\n          );\n        }\n      } catch (err) {\n        //TODO error happened on processing of plugin notify UI\n        HMSLogger.e(TAG, `error in processing plugin ${name}`, err);\n        //remove plugin from loop and stop analytics for it\n        await this.removePlugin(plugin);\n      }\n      try {\n        if (\n          this.intermediateNode &&\n          this.destinationNode &&\n          this.intermediateNode.context === this.destinationNode.context\n        ) {\n          this.intermediateNode.connect(this.destinationNode);\n        }\n      } catch (err) {\n        HMSLogger.e(TAG, `error in processing plugin ${name}`, err);\n        //remove plugin from loop and stop analytics for it\n        await this.removePlugin(plugin);\n      }\n    }\n  }\n\n  private async stopPluginsProcess() {\n    await this.hmsTrack.setProcessedTrack(undefined);\n  }\n}\n","import { isBrowser } from './support';\n\nexport class LocalStorage<T> {\n  private storage: Storage | null = null;\n\n  constructor(public readonly key: string) {}\n\n  /**\n   * localstorage is not available in SSR, so get it only at time of use\n   */\n  getStorage() {\n    if (isBrowser) {\n      this.storage = window.localStorage;\n    }\n    return this.storage;\n  }\n\n  get(): T | undefined {\n    const stringItem = this.getStorage()?.getItem(this.key);\n    if (!stringItem) {\n      return;\n    }\n    const item = JSON.parse(stringItem) as T;\n    return item;\n  }\n\n  set(value: T) {\n    const stringValue = JSON.stringify(value);\n    this.getStorage()?.setItem(this.key, stringValue);\n  }\n\n  clear() {\n    this.getStorage()?.removeItem(this.key);\n  }\n}\n","import { DeviceMap } from '../interfaces';\nimport { LocalStorage } from '../utils/local-storage';\nimport { SelectedDevices } from './DeviceManager';\n\ntype DeviceInfo = { deviceId?: string; groupId?: string };\n/**\n * This class is to manage storing and retrieving selected devices\n * from localstorage\n * @internal\n */\nclass DeviceStorage {\n  private storage = new LocalStorage<SelectedDevices>('hms-device-selection');\n  private remember = false;\n  private devices?: DeviceMap;\n\n  setDevices(devices: DeviceMap) {\n    this.devices = devices;\n  }\n\n  rememberDevices(value: boolean) {\n    this.remember = value;\n  }\n\n  /**\n   * This will update the passed in type value in storage\n   * @param {string} type - One of audioInput | videoInput | audioOutput\n   * @param {DeviceInfo} param\n   * @returns {void}\n   */\n  updateSelection(type: 'audioInput' | 'videoInput' | 'audioOutput', { deviceId, groupId }: DeviceInfo) {\n    if (!this.devices || !this.remember) {\n      return;\n    }\n    const newSelection = this.devices[type].find((device) => this.isSame({ deviceId, groupId }, device));\n    if (!newSelection) {\n      return;\n    }\n    const selectedDevices = this.storage.get() || {};\n    if (type === 'audioOutput') {\n      selectedDevices[type] = newSelection as MediaDeviceInfo;\n    } else {\n      selectedDevices[type] = newSelection as MediaDeviceInfo;\n    }\n    this.storage.set(selectedDevices);\n  }\n\n  getSelection() {\n    if (!this.remember) {\n      return undefined;\n    }\n    return this.storage.get();\n  }\n\n  cleanup() {\n    this.remember = false;\n    this.devices = undefined;\n  }\n\n  private isSame(current: DeviceInfo, device: DeviceInfo) {\n    // Safari doesn't give groupId from nativeTrack. Check if groupId's match or current groupId is not present\n    return current.deviceId === device.deviceId && (current.groupId === device.groupId || !current.groupId);\n  }\n}\n\nexport const DeviceStorageManager = new DeviceStorage();\n","import { HMSAudioTrack } from './HMSAudioTrack';\nimport HMSLocalStream from '../streams/HMSLocalStream';\nimport { HMSAudioTrackSettings, HMSAudioTrackSettingsBuilder } from '../settings';\nimport { getAudioTrack, isEmptyTrack } from '../../utils/track';\nimport { ITrackAudioLevelUpdate, TrackAudioLevelMonitor } from '../../utils/track-audio-level-monitor';\nimport { EventReceiver } from '../../utils/typed-event-emitter';\nimport HMSLogger from '../../utils/logger';\nimport { HMSAudioPlugin } from '../../plugins';\nimport { HMSAudioPluginsManager } from '../../plugins/audio';\nimport { HMSAudioTrackSettings as IHMSAudioTrackSettings } from '../../interfaces';\nimport { DeviceStorageManager } from '../../device-manager/DeviceStorage';\n\nfunction generateHasPropertyChanged(newSettings: Partial<HMSAudioTrackSettings>, oldSettings: HMSAudioTrackSettings) {\n  return function hasChanged(prop: 'codec' | 'volume' | 'maxBitrate' | 'deviceId' | 'advanced') {\n    return prop in newSettings && newSettings[prop] !== oldSettings[prop];\n  };\n}\n\nconst TAG = 'HMSLocalAudioTrack';\n\nexport class HMSLocalAudioTrack extends HMSAudioTrack {\n  settings: HMSAudioTrackSettings;\n  private pluginsManager: HMSAudioPluginsManager;\n  private processedTrack?: MediaStreamTrack;\n\n  audioLevelMonitor?: TrackAudioLevelMonitor;\n\n  /**\n   * @internal\n   */\n  publishedTrackId: string;\n\n  constructor(\n    stream: HMSLocalStream,\n    track: MediaStreamTrack,\n    source: string,\n    settings: HMSAudioTrackSettings = new HMSAudioTrackSettingsBuilder().build(),\n  ) {\n    super(stream, track, source);\n    stream.tracks.push(this);\n\n    this.settings = settings;\n    this.pluginsManager = new HMSAudioPluginsManager(this);\n    this.publishedTrackId = this.trackId;\n    this.setFirstTrackId(track.id);\n  }\n\n  private async replaceTrackWith(settings: HMSAudioTrackSettings) {\n    const prevTrack = this.nativeTrack;\n    const prevState = this.enabled;\n    /**\n     * Stop has to be called before getting newTrack as it would cause NotReadableError\n     */\n    prevTrack?.stop();\n    const newTrack = await getAudioTrack(settings);\n    newTrack.enabled = prevState;\n\n    const localStream = this.stream as HMSLocalStream;\n    // change nativeTrack so plugin can start its work\n    await localStream.replaceSenderTrack(prevTrack, this.processedTrack || newTrack);\n    await localStream.replaceStreamTrack(prevTrack, newTrack);\n    this.nativeTrack = newTrack;\n  }\n\n  async setEnabled(value: boolean) {\n    if (value === this.enabled) return;\n\n    // Replace silent empty track with an actual audio track, if enabled.\n    if (value && isEmptyTrack(this.nativeTrack)) {\n      await this.replaceTrackWith(this.settings);\n    }\n    await super.setEnabled(value);\n    (this.stream as HMSLocalStream).trackUpdate(this);\n  }\n\n  async setSettings(settings: Partial<IHMSAudioTrackSettings>, internal = false) {\n    const { volume, codec, maxBitrate, deviceId, advanced } = { ...this.settings, ...settings };\n    const newSettings = new HMSAudioTrackSettings(volume, codec, maxBitrate, deviceId, advanced);\n\n    if (isEmptyTrack(this.nativeTrack)) {\n      // if it is an empty track, cache the settings for when it is unmuted\n      this.settings = newSettings;\n      return;\n    }\n\n    const stream = this.stream as HMSLocalStream;\n    const hasPropertyChanged = generateHasPropertyChanged(settings, this.settings);\n\n    if (hasPropertyChanged('deviceId')) {\n      const isLevelMonitored = Boolean(this.audioLevelMonitor);\n      const eventListeners = this.audioLevelMonitor?.listeners('AUDIO_LEVEL_UPDATE');\n      HMSLogger.d(TAG, 'Device change', { isLevelMonitored });\n      isLevelMonitored && this.destroyAudioLevelMonitor();\n      await this.replaceTrackWith(newSettings);\n      isLevelMonitored && this.initAudioLevelMonitor(eventListeners);\n      if (!internal) {\n        DeviceStorageManager.updateSelection('audioInput', {\n          deviceId: settings.deviceId,\n          groupId: this.nativeTrack.getSettings().groupId,\n        });\n      }\n    }\n\n    if (hasPropertyChanged('maxBitrate')) {\n      await stream.setMaxBitrate(newSettings.maxBitrate, this);\n    }\n\n    if (hasPropertyChanged('advanced')) {\n      await this.nativeTrack.applyConstraints(newSettings.toConstraints());\n    }\n\n    this.settings = newSettings;\n  }\n\n  /**\n   * @see HMSAudioPlugin\n   */\n  getPlugins(): string[] {\n    return this.pluginsManager.getPlugins();\n  }\n\n  /**\n   * @see HMSAudioPlugin\n   */\n  async addPlugin(plugin: HMSAudioPlugin): Promise<void> {\n    return this.pluginsManager.addPlugin(plugin);\n  }\n\n  /**\n   * @see HMSAudioPlugin\n   */\n  async removePlugin(plugin: HMSAudioPlugin): Promise<void> {\n    return this.pluginsManager.removePlugin(plugin);\n  }\n\n  /**\n   * @internal\n   */\n  async setProcessedTrack(processedTrack?: MediaStreamTrack) {\n    // if all plugins are removed reset everything back to native track\n    if (!processedTrack) {\n      if (this.processedTrack) {\n        // remove, reset back to the native track\n        await (this.stream as HMSLocalStream).replaceSenderTrack(this.processedTrack, this.nativeTrack);\n      }\n      this.processedTrack = undefined;\n      return;\n    }\n    if (processedTrack !== this.processedTrack) {\n      if (this.processedTrack) {\n        // replace previous processed track with new one\n        await (this.stream as HMSLocalStream).replaceSenderTrack(this.processedTrack, processedTrack);\n      } else {\n        // there is no prev processed track, replace native with new one\n        await (this.stream as HMSLocalStream).replaceSenderTrack(this.nativeTrack, processedTrack);\n      }\n      this.processedTrack = processedTrack;\n    }\n  }\n\n  initAudioLevelMonitor(listeners?: EventReceiver<ITrackAudioLevelUpdate | undefined>[] | undefined) {\n    HMSLogger.d(TAG, 'Monitor Audio Level for', this, this.getMediaTrackSettings().deviceId);\n    this.audioLevelMonitor = new TrackAudioLevelMonitor(this);\n    listeners?.forEach((listener) => this.audioLevelMonitor?.on('AUDIO_LEVEL_UPDATE', listener));\n    this.audioLevelMonitor.start();\n  }\n\n  destroyAudioLevelMonitor() {\n    this.audioLevelMonitor?.stop();\n    this.audioLevelMonitor = undefined;\n  }\n\n  async cleanup() {\n    super.cleanup();\n    await this.pluginsManager.cleanup();\n    this.processedTrack?.stop();\n    this.destroyAudioLevelMonitor();\n  }\n\n  /**\n   * @internal\n   * published track id will be different in case there was some processing done using plugins.\n   */\n  getTrackIDBeingSent() {\n    return this.processedTrack ? this.processedTrack.id : this.nativeTrack.id;\n  }\n}\n","/**\n * A plugin implementing this interface can be registered with HMSLocalVideoTrack to transform, process or\n * analyze the local video track.These can include applications like video filters, virtual background, live\n * analysis of video etc. The below functions are required for the sdk to properly use the plugin, usually\n * the plugin would also be exposing some public functions of its own for the UI to control its working.\n */\nexport interface HMSVideoPlugin {\n  /**\n   * The name is meant to uniquely specify a plugin instance. This will be used to track number of plugins\n   * added to the track, and same name won't be allowed twice.\n   */\n  getName(): string;\n\n  /**\n   * This function will be called before the call to init, it is used to check whether the plugin supports current\n   * OS and device or not. An error will be thrown back to the user if they try to use an unsupported plugin.\n   */\n  isSupported(): boolean;\n\n  /**\n   * This function will be called in the beginning for initialization which may include tasks like setting up\n   * variables, loading ML models etc. This can be used by a plugin to ensure it's prepared at the time\n   * processVideoFrame is called.\n   */\n  init(): Promise<void>;\n\n  /**\n   * @see HMSVideoPluginType\n   */\n  getPluginType(): HMSVideoPluginType;\n\n  /**\n   * This function will be called by the SDK for every video frame which the plugin needs to process.\n   * PluginFrameRate - the rate at which the plugin is expected to process the video frames. This is not necessarily\n   * equal to the capture frame rate. The user can specify this rate, and the sdk might also change it on basis of\n   * device type, or CPU usage.\n   * For an analyzing plugin, the below function will be called at plugin framerate.\n   * For a transforming plugin, the sdk will pass in the input and output at real frame rate with an additional boolean\n   * pass. The expectation is that the plugin should use results of previous runs instead of doing a complex processing\n   * again when pass is set to true. This helps in maintaining the framerate of the video as well as bringing down\n   * CPU usage in case of complex processing.\n   * @param input input canvas containing the input frame\n   * @param output the output canvas which should contain the output frame\n   * @param skipProcessing use results from previous run if true\n   */\n  processVideoFrame(\n    input: HTMLCanvasElement,\n    output?: HTMLCanvasElement,\n    skipProcessing?: boolean,\n  ): Promise<void> | void;\n\n  /**\n   * the plugin can use this function to dispose off its resources. It'll be called when the processor instance is\n   * no longer needed at the end.\n   */\n  stop(): void;\n}\n\n/**\n * Specifies the type of the plugin a transforming plugin will get an output canvas to give the resulting\n * transformation. While an analyzing plugin will only be passed the input canvas.\n */\nexport enum HMSVideoPluginType {\n  TRANSFORM = 'TRANSFORM',\n  ANALYZE = 'ANALYZE',\n}\n","/**\n * Delay for a @see ms amount of time\n * @param ms -- time in milliseconds\n */\nexport function sleep(ms: number): Promise<void> {\n  if (ms < 0) throw Error('`ms` should be a positive integer');\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/**\n * Debounce Fn - Function to limit the number of executions of the passed in\n * function in a given time duration\n * @param fn Function to be called\n * @param delay time by which the function execution has to be delayed\n * @returns {void}\n */\nexport function debounce(fn: () => void, delay: number = 300) {\n  let timer: any | undefined;\n  return function (...args: []) {\n    clearTimeout(timer);\n    timer = undefined;\n    //@ts-ignore\n    const context = this;\n    timer = setTimeout(() => {\n      fn.apply(context, args);\n    }, delay);\n  };\n}\n","export class RunningAverage {\n  private total: number = 0;\n  private count: number = 0;\n\n  add(item: number) {\n    this.count++;\n    this.total += item;\n  }\n\n  getAvg(): number {\n    return Math.floor(this.total / this.count);\n  }\n\n  reset() {\n    this.total = 0;\n    this.count = 0;\n  }\n}\n","import { RunningAverage } from '../../utils/math';\nimport MediaPluginsAnalyticsFactory from '../../analytics/MediaPluginsAnalyticsFactory';\nimport analyticsEventsService from '../../analytics/AnalyticsEventsService';\nimport HMSLogger from '../../utils/logger';\nimport { ErrorFactory, HMSAction } from '../../error/ErrorFactory';\nimport { HMSException } from '../../error/HMSException';\n\nconst TAG = 'VideoPluginsAnalytics';\n\nexport class VideoPluginsAnalytics {\n  private readonly initTime: Record<string, number>;\n  private readonly addedTimestamps: Record<string, number>;\n  private readonly preProcessingAvgs: RunningAverage;\n  private readonly processingAvgs: Record<string, RunningAverage>;\n  private readonly pluginAdded: Record<string, boolean>;\n  private readonly pluginInputFrameRate: Record<string, number>;\n  private readonly pluginFrameRate: Record<string, number>;\n\n  constructor() {\n    this.initTime = {};\n    this.preProcessingAvgs = new RunningAverage();\n    this.addedTimestamps = {};\n    this.processingAvgs = {};\n    this.pluginAdded = {};\n    this.pluginInputFrameRate = {};\n    this.pluginFrameRate = {};\n  }\n\n  added(name: string, inputFrameRate: number, pluginFrameRate?: number) {\n    this.pluginAdded[name] = true;\n    this.addedTimestamps[name] = Date.now();\n    this.initTime[name] = 0;\n    this.processingAvgs[name] = new RunningAverage();\n    this.pluginInputFrameRate[name] = inputFrameRate;\n    this.pluginFrameRate[name] = pluginFrameRate || inputFrameRate;\n  }\n\n  removed(name: string) {\n    //send stats\n    if (this.pluginAdded[name]) {\n      const stats = {\n        pluginName: name,\n        // duration in seconds\n        duration: Math.floor((Date.now() - this.addedTimestamps[name]) / 1000),\n        loadTime: this.initTime[name],\n        avgPreProcessingTime: this.preProcessingAvgs.getAvg(), //Do we need this in stat not plugin specific\n        avgProcessingTime: this.processingAvgs[name]?.getAvg(),\n        inputFrameRate: this.pluginInputFrameRate[name],\n        pluginFrameRate: this.pluginFrameRate[name],\n      };\n      //send stats\n      analyticsEventsService.queue(MediaPluginsAnalyticsFactory.stats(stats)).flush();\n      //clean the plugin details\n      this.clean(name);\n    }\n  }\n\n  failure(name: string, error: HMSException) {\n    // send failure event\n    if (this.pluginAdded[name]) {\n      analyticsEventsService.queue(MediaPluginsAnalyticsFactory.failure(name, error)).flush();\n      //clean the plugin details\n      this.clean(name);\n    }\n  }\n\n  async initWithTime<T>(name: string, initFn: () => Promise<T>) {\n    if (this.initTime[name]) {\n      HMSLogger.i(TAG, `Plugin Already loaded ${name}, time it took: ${this.initTime[name]}`);\n      return;\n    }\n    let time: number | undefined = undefined;\n    try {\n      time = await this.timeInMs(initFn);\n      HMSLogger.i(TAG, `Time taken for Plugin ${name} initialization : ${time}`);\n    } catch (e) {\n      //Failed during initialization of plugin(model loading etc...)\n      const err = ErrorFactory.MediaPluginErrors.InitFailed(\n        HMSAction.VIDEO_PLUGINS,\n        'failed during initialization of plugin' + ((e as Error).message || e),\n      );\n      HMSLogger.e(TAG, err);\n      this.failure(name, err);\n      throw err;\n    }\n    if (time) {\n      this.initTime[name] = time;\n    }\n  }\n\n  async preProcessWithTime<T>(preProcessFn: () => Promise<T>) {\n    //TODO: check if it is required to maintain and shall we handle preprocess failures\n    const time = await this.timeInMs(preProcessFn);\n    this.preProcessingAvgs.add(time);\n  }\n\n  async processWithTime<T>(name: string, processFn: () => Promise<T>) {\n    let time: number | undefined = undefined;\n    try {\n      time = await this.timeInMs(processFn);\n    } catch (e) {\n      //Failed during processing of plugin\n      const err = ErrorFactory.MediaPluginErrors.ProcessingFailed(\n        HMSAction.VIDEO_PLUGINS,\n        'Failed during processing of plugin' + ((e as Error).message || e),\n      );\n      HMSLogger.e(TAG, err);\n      this.failure(name, err);\n      throw err;\n    }\n    if (time) {\n      this.processingAvgs[name]?.add(time);\n    }\n  }\n\n  private async timeInMs<T>(fn: () => Promise<T>): Promise<number> {\n    const start = Date.now();\n    await fn();\n    return Math.floor(Date.now() - start);\n  }\n\n  private clean(name: string) {\n    delete this.addedTimestamps[name];\n    delete this.initTime[name];\n    delete this.processingAvgs[name];\n    delete this.pluginAdded[name];\n    delete this.pluginInputFrameRate[name];\n    delete this.pluginFrameRate[name];\n  }\n}\n","import { HMSVideoPlugin, HMSVideoPluginType } from './HMSVideoPlugin';\nimport { HMSLocalVideoTrack } from '../../media/tracks';\nimport HMSLogger from '../../utils/logger';\nimport { sleep } from '../../utils/timer-utils';\nimport { VideoPluginsAnalytics } from './VideoPluginsAnalytics';\nimport { ErrorFactory, HMSAction } from '../../error/ErrorFactory';\n\nconst DEFAULT_FRAME_RATE = 24;\nconst TAG = 'VideoPluginsManager';\n\ninterface CanvasElement extends HTMLCanvasElement {\n  captureStream(frameRate?: number): MediaStream;\n}\n\n/**\n * This class manages applying different plugins on a local video track. Plugins which need to modify the video\n * are called in the order they were added. Plugins which do not need to modify the video frames are called\n * with the original input.\n *\n * Concepts -\n * Video Plugin - A module which can take in input video painted on a canvas, do some processing on it and optionally\n * render its output on a passed in output canvas which will be shown in the UI.\n *\n * frameRate - the frame rate of the input video as present in track.getSettings, this is the rate at which new frames\n * are being produced and the rate we need to maintain in output as well.\n *\n * pluginFrameRate - this is the rate at which the plugin is supposed to do its processing. The processing can be an\n * expensive operation and can result in high usage of resources like CPU. This rate would usually be lower than the\n * real frame rate.\n *\n * pluginsLoop - a loop is run at framerate in this class, on each loop if the original track is unmuted all added\n * plugins are called one by one in the order they were called.\n *\n * @see HMSVideoPlugin\n */\nexport class HMSVideoPluginsManager {\n  /**\n   * plugins loop is the loop in which all plugins are applied\n   */\n  private pluginsLoopRunning: boolean = false;\n  private pluginsLoopState: 'paused' | 'running' = 'paused';\n  private readonly hmsTrack: HMSLocalVideoTrack;\n  private readonly plugins: string[]; // plugin names in order they were added\n  private readonly pluginsMap: Record<string, HMSVideoPlugin>; // plugin names to their instance mapping\n  private inputVideo?: HTMLVideoElement;\n  private inputCanvas?: CanvasElement;\n  private outputCanvas?: CanvasElement;\n  private outputTrack?: MediaStreamTrack;\n  private analytics: VideoPluginsAnalytics;\n  private pluginAddInProgress: boolean = false;\n  private pluginNumFramesToSkip: Record<string, number>;\n  private pluginNumFramesSkipped: Record<string, number>;\n\n  constructor(track: HMSLocalVideoTrack) {\n    this.hmsTrack = track;\n    this.plugins = [];\n    this.pluginsMap = {};\n    this.pluginNumFramesToSkip = {};\n    this.pluginNumFramesSkipped = {};\n    this.analytics = new VideoPluginsAnalytics();\n  }\n\n  getPlugins(): string[] {\n    return [...this.plugins];\n  }\n\n  /**\n   * @param plugin\n   * @param pluginFrameRate\n   */\n  async addPlugin(plugin: HMSVideoPlugin, pluginFrameRate?: number) {\n    if (this.pluginAddInProgress) {\n      const name = plugin.getName?.();\n      if (!name || name === '') {\n        HMSLogger.w('no name provided by the plugin');\n        return;\n      }\n\n      const err = ErrorFactory.MediaPluginErrors.AddAlreadyInProgress(\n        HMSAction.VIDEO_PLUGINS,\n        'Add Plugin is already in Progress',\n      );\n      this.analytics.failure(name, err);\n\n      HMSLogger.w(\"can't add another plugin when previous add is in progress\");\n      throw err;\n    }\n\n    this.pluginAddInProgress = true;\n\n    try {\n      await this.addPluginInternal(plugin, pluginFrameRate);\n    } catch (err) {\n      throw err;\n    } finally {\n      this.pluginAddInProgress = false;\n    }\n  }\n\n  private async addPluginInternal(plugin: HMSVideoPlugin, pluginFrameRate?: number) {\n    const name = plugin.getName?.();\n    if (!name || name === '') {\n      HMSLogger.w('no name provided by the plugin');\n      return;\n    }\n    if (this.pluginsMap[name]) {\n      HMSLogger.w(TAG, `plugin - ${plugin.getName()} already added.`);\n      return;\n    }\n    const { width, height } = this.hmsTrack.getMediaTrackSettings();\n    if (!width || !height || width <= 0 || height <= 0) {\n      HMSLogger.i(TAG, 'Track width/height is not valid');\n      return;\n    }\n\n    //TODO: assuming this inputFrameRate from getMediaTrackSettings will not change once set\n    //TODO: even if it changes will not have the info/params to know the change\n    const inputFrameRate = this.hmsTrack.getMediaTrackSettings().frameRate || DEFAULT_FRAME_RATE;\n\n    let numFramesToSkip = 0;\n    if (pluginFrameRate && pluginFrameRate > 0) {\n      HMSLogger.i(TAG, `adding plugin ${plugin.getName()} with framerate ${pluginFrameRate}`);\n      if (pluginFrameRate < inputFrameRate) {\n        numFramesToSkip = Math.ceil(inputFrameRate / pluginFrameRate) - 1;\n      }\n      this.analytics.added(name, inputFrameRate, pluginFrameRate);\n    } else {\n      HMSLogger.i(TAG, `adding plugin ${plugin.getName()}`);\n      this.analytics.added(name, inputFrameRate);\n    }\n\n    HMSLogger.i(TAG, 'numFrames to skip processing', numFramesToSkip);\n    this.pluginNumFramesToSkip[name] = numFramesToSkip;\n    this.pluginNumFramesSkipped[name] = numFramesToSkip;\n\n    if (!plugin.isSupported()) {\n      let err = ErrorFactory.MediaPluginErrors.PlatformNotSupported(HMSAction.VIDEO_PLUGINS, 'platform not supported ');\n      this.analytics.failure(name, err);\n      HMSLogger.i(TAG, `Platform is not supported for plugin - ${plugin.getName()}`);\n      return;\n    }\n    try {\n      await this.analytics.initWithTime(name, async () => await plugin.init());\n      this.plugins.push(name);\n      this.pluginsMap[name] = plugin;\n      await this.startPluginsLoop();\n    } catch (err) {\n      HMSLogger.e(TAG, 'failed to add plugin', err);\n      await this.removePlugin(plugin);\n      throw err;\n    }\n  }\n\n  async removePlugin(plugin: HMSVideoPlugin) {\n    const name = plugin.getName();\n    if (!this.pluginsMap[name]) {\n      HMSLogger.w(TAG, `plugin - ${name} not found to remove.`);\n      return;\n    }\n    HMSLogger.i(TAG, `removing plugin ${name}`);\n    this.removePluginEntry(name);\n    if (this.plugins.length === 0) {\n      HMSLogger.i(TAG, `No plugins left, stopping plugins loop`);\n      await this.stopPluginsLoop();\n    }\n    plugin.stop();\n    this.analytics.removed(name);\n  }\n\n  removePluginEntry(name: string) {\n    const index = this.plugins.indexOf(name);\n    if (index !== -1) {\n      this.plugins.splice(index, 1);\n    }\n    if (this.pluginsMap[name]) {\n      delete this.pluginsMap[name];\n    }\n    if (this.pluginNumFramesToSkip[name]) {\n      delete this.pluginNumFramesToSkip[name];\n    }\n    if (this.pluginNumFramesSkipped[name]) {\n      delete this.pluginNumFramesSkipped[name];\n    }\n  }\n\n  /**\n   * when video is unmuted it takes some time for all the plugins to be re run and an output stream to be\n   * produced. It can await on this function to confirm and tell the new unmuted state.\n   * If this is not awaited on video will freeze with a frame from past run.\n   */\n  async waitForRestart() {\n    if (!this.pluginsLoopRunning || this.pluginsLoopState === 'running') {\n      return;\n    }\n    while (this.pluginsLoopState === 'paused') {\n      await sleep(100);\n    }\n  }\n\n  /**\n   * remove every plugin one by one\n   */\n  async cleanup() {\n    for (const name of this.plugins) {\n      await this.removePlugin(this.pluginsMap[name]);\n    }\n    // memory cleanup\n    this.outputTrack?.stop();\n  }\n\n  private initElementsAndStream() {\n    if (!this.inputCanvas) {\n      this.inputCanvas = document.createElement('canvas') as CanvasElement;\n    }\n    if (!this.outputCanvas) {\n      this.outputCanvas = document.createElement('canvas') as CanvasElement;\n    }\n    if (!this.inputVideo) {\n      this.inputVideo = document.createElement('video');\n    }\n    // FF issue https://bugzilla.mozilla.org/show_bug.cgi?id=1388974\n    this.inputCanvas.getContext('2d');\n    this.outputCanvas.getContext('2d');\n    // capture stream automatically uses the framerate at which the output canvas is changing\n    const outputStream = this.outputCanvas.captureStream();\n    this.outputTrack = outputStream.getVideoTracks()[0];\n  }\n\n  private async startPluginsLoop() {\n    if (this.pluginsLoopRunning) {\n      return;\n    }\n    this.initElementsAndStream();\n    this.pluginsLoopRunning = true;\n    try {\n      await this.hmsTrack.setProcessedTrack(this.outputTrack);\n    } catch (err) {\n      this.pluginsLoopRunning = false;\n      HMSLogger.e(TAG, 'error in setting processed track', err);\n      throw err;\n    }\n    // can't await on pluginsLoop as it'll run for a long long time\n    this.pluginsLoop().then(() => {\n      HMSLogger.d(TAG, 'processLoop stopped');\n    });\n  }\n\n  private async stopPluginsLoop() {\n    this.pluginsLoopRunning = false;\n    await this.hmsTrack.setProcessedTrack(undefined);\n    this.resetCanvases();\n    this.outputTrack?.stop();\n    if (this.inputVideo) {\n      this.inputVideo.srcObject = null;\n      this.inputVideo = undefined;\n    }\n  }\n\n  private async pluginsLoop() {\n    while (this.pluginsLoopRunning) {\n      const inputFrameRate = this.hmsTrack.getMediaTrackSettings().frameRate || DEFAULT_FRAME_RATE;\n      const sleepTimeMs = Math.floor(1000 / inputFrameRate);\n      if (!this.hmsTrack.enabled || this.hmsTrack.nativeTrack.readyState === 'ended') {\n        if (this.pluginsLoopState === 'running') {\n          // mute just happened, reset canvases to black so even if it is sent to remote, it\n          // is a black screen instead of a stucked frame from previous run\n          this.resetCanvases();\n        }\n        this.pluginsLoopState = 'paused';\n        await sleep(sleepTimeMs);\n        continue;\n      }\n      let processingTime: number = 0;\n      try {\n        await this.analytics.preProcessWithTime(async () => await this.doPreProcessing());\n        const start = Date.now();\n        await this.processFramesThroughPlugins();\n        processingTime = Math.floor(Date.now() - start);\n        if (processingTime > sleepTimeMs) {\n          processingTime = sleepTimeMs;\n        }\n      } catch (err) {\n        // TODO: handle failures properly, detect which plugin failed, stop it and notify back to the UI\n        HMSLogger.e(TAG, 'error in plugins loop', err);\n      }\n      this.pluginsLoopState = 'running';\n      // take into account processing time to decide time to wait for the next loop\n      await sleep(sleepTimeMs - processingTime);\n    }\n  }\n\n  private async doPreProcessing() {\n    await this.addTrackToVideo(); // ensure current native track is playing in video\n    await this.updateInputCanvas(); // put the latest video frame on input canvas\n  }\n\n  /**\n   * pass the input canvas through all plugins in a loop\n   * @private\n   */\n  private async processFramesThroughPlugins() {\n    for (const name of this.plugins) {\n      const plugin = this.pluginsMap[name];\n      if (!plugin) {\n        continue;\n      }\n      try {\n        const skipProcessing = this.checkIfSkipRequired(name);\n        // TODO: should we use output of previous to pass in to next, instead of passing initial everytime?\n        if (plugin.getPluginType() === HMSVideoPluginType.TRANSFORM) {\n          const process = async () => {\n            await plugin.processVideoFrame(this.inputCanvas!, this.outputCanvas, skipProcessing);\n          };\n          if (!skipProcessing) {\n            await this.analytics.processWithTime(name, process);\n          } else {\n            await process();\n          }\n        } else if (plugin.getPluginType() === HMSVideoPluginType.ANALYZE && !skipProcessing) {\n          // there is no need to await for this case\n          await this.analytics.processWithTime(name, async () => await plugin.processVideoFrame(this.inputCanvas!));\n        }\n      } catch (err) {\n        //TODO error happened on processing of plugin notify UI\n        HMSLogger.e(TAG, `error in processing plugin ${name}`, err);\n        //remove plugin from loop and stop analytics for it\n        await this.removePlugin(plugin);\n      }\n    }\n  }\n\n  /**\n   * add the current native track to the inputVideoElement if it's not already added.\n   * @private\n   */\n  private async addTrackToVideo() {\n    if (!this.inputVideo) {\n      return;\n    }\n    const srcObject = this.inputVideo.srcObject;\n    if (srcObject !== null && srcObject instanceof MediaStream) {\n      const existingTrackID = srcObject.getVideoTracks()[0]?.id;\n      if (existingTrackID === this.hmsTrack.nativeTrack.id) {\n        // it's already attached\n        return;\n      }\n    }\n    this.inputVideo.pause();\n    this.inputVideo.srcObject = new MediaStream([this.hmsTrack.nativeTrack]);\n    this.inputVideo.muted = true;\n    await this.inputVideo.play();\n  }\n\n  /**\n   * get the new video frame from input video element and put it on canvas\n   * @private\n   */\n  private async updateInputCanvas() {\n    if (!this.inputCanvas || !this.inputVideo) {\n      return;\n    }\n    const { width, height } = this.hmsTrack.getMediaTrackSettings();\n    if (!width || !height || width <= 0 || height <= 0) {\n      HMSLogger.w(TAG, 'Invalid width/height of videoTrack', width, height);\n      return;\n    }\n    // TODO: should we reduce height/width to optimize?\n    if (this.inputCanvas.height !== height) {\n      this.inputCanvas.height = height;\n    }\n    if (this.inputCanvas.width !== width) {\n      this.inputCanvas.width = width;\n    }\n    const ctx = this.inputCanvas.getContext('2d');\n    ctx!.drawImage(this.inputVideo, 0, 0, width, height);\n  }\n\n  private resetCanvases() {\n    if (!this.outputCanvas || !this.inputCanvas) {\n      return;\n    }\n    const outputCtx = this.outputCanvas.getContext('2d');\n    if (outputCtx) {\n      outputCtx.fillStyle = `rgb(0, 0, 0)`;\n      outputCtx.fillRect(0, 0, this.outputCanvas.width, this.outputCanvas.height);\n    }\n    const inputCtx = this.inputCanvas.getContext('2d');\n    if (inputCtx) {\n      inputCtx.fillStyle = `rgb(0, 0, 0)`;\n      inputCtx.fillRect(0, 0, this.outputCanvas.width, this.outputCanvas.height);\n    }\n  }\n\n  /**\n    N = ceil(inputFrameRate/pluginFrameRate) - 1\n    N = this.pluginNumFramesToSkip[name] = frames to skip for every processed frame\n    all the frames we are skipping are using the previous frame output\n   **/\n  private checkIfSkipRequired(name: string) {\n    let skip = false;\n\n    if (this.pluginNumFramesSkipped[name] < this.pluginNumFramesToSkip[name]) {\n      this.pluginNumFramesSkipped[name]++;\n      skip = true;\n    } else {\n      skip = false;\n      this.pluginNumFramesSkipped[name] = 0;\n    }\n\n    return skip;\n  }\n}\n","import { HMSVideoTrack } from './HMSVideoTrack';\nimport HMSLocalStream from '../streams/HMSLocalStream';\nimport { HMSVideoTrackSettings, HMSVideoTrackSettingsBuilder } from '../settings';\nimport { getEmptyVideoTrack, getVideoTrack } from '../../utils/track';\nimport { HMSVideoPlugin } from '../../plugins';\nimport { HMSVideoPluginsManager } from '../../plugins/video';\nimport { HMSVideoTrackSettings as IHMSVideoTrackSettings } from '../../interfaces';\nimport { DeviceStorageManager } from '../../device-manager/DeviceStorage';\n\nfunction generateHasPropertyChanged(newSettings: Partial<HMSVideoTrackSettings>, oldSettings: HMSVideoTrackSettings) {\n  return function hasChanged(\n    prop: 'codec' | 'width' | 'height' | 'maxFramerate' | 'maxBitrate' | 'deviceId' | 'advanced',\n  ) {\n    return prop in newSettings && newSettings[prop] !== oldSettings[prop];\n  };\n}\n\nexport class HMSLocalVideoTrack extends HMSVideoTrack {\n  settings: HMSVideoTrackSettings;\n  private pluginsManager: HMSVideoPluginsManager;\n  private processedTrack?: MediaStreamTrack;\n\n  /**\n   * @internal\n   * This is required for handling remote mute/unmute as the published track will not necessarily be same as\n   * the first track id or current native track's id.\n   * It won't be same as first track id if the native track was changed after preview started but before join happened,\n   * with device change, or mute/unmute.\n   * It won't be same as native track id, as the native track can change post join(and publish), when the nativetrack\n   * changes, replacetrack is used which doesn't involve republishing which means from server's point of view, the track id\n   * is same as what was initially published.\n   */\n  publishedTrackId: string;\n\n  constructor(\n    stream: HMSLocalStream,\n    track: MediaStreamTrack,\n    source: string,\n    settings: HMSVideoTrackSettings = new HMSVideoTrackSettingsBuilder().build(),\n  ) {\n    super(stream, track, source);\n    stream.tracks.push(this);\n    this.settings = settings;\n    this.pluginsManager = new HMSVideoPluginsManager(this);\n    this.publishedTrackId = this.trackId;\n    this.setFirstTrackId(this.trackId);\n  }\n\n  /**\n   * use this function to set the enabled state of a track. If true the track will be unmuted and muted otherwise.\n   * @param value\n   */\n  async setEnabled(value: boolean): Promise<void> {\n    if (value === this.enabled) return;\n    if (this.source === 'regular') {\n      if (value) {\n        await this.replaceTrackWith(this.settings);\n      } else {\n        await this.replaceTrackWithBlank();\n      }\n    }\n    await super.setEnabled(value);\n    (this.stream as HMSLocalStream).trackUpdate(this);\n  }\n\n  /**\n   * @see HMSVideoTrack#addSink()\n   */\n  addSink(videoElement: HTMLVideoElement) {\n    this.addSinkInternal(videoElement, this.processedTrack || this.nativeTrack);\n  }\n\n  /**\n   * This function can be used to set media track settings. Frequent options -\n   * deviceID: can be used to change to different input source\n   * width, height - can be used to change capture dimensions\n   * maxFramerate - can be used to control the capture framerate\n   * @param settings\n   */\n  async setSettings(settings: Partial<IHMSVideoTrackSettings>, internal = false) {\n    const { width, height, codec, maxFramerate, maxBitrate, deviceId, advanced } = { ...this.settings, ...settings };\n    const newSettings = new HMSVideoTrackSettings(width, height, codec, maxFramerate, deviceId, advanced, maxBitrate);\n\n    if (!this.enabled) {\n      // if track is muted, we just cache the settings for when it is unmuted\n      this.settings = newSettings;\n      return;\n    }\n\n    const stream = this.stream as HMSLocalStream;\n    const hasPropertyChanged = generateHasPropertyChanged(settings, this.settings);\n\n    if (hasPropertyChanged('deviceId') && this.source === 'regular') {\n      if (this.enabled) {\n        await this.replaceTrackWith(newSettings);\n        if (!internal) {\n          DeviceStorageManager.updateSelection('videoInput', {\n            deviceId: settings.deviceId,\n            groupId: this.nativeTrack.getSettings().groupId,\n          });\n        }\n      }\n    }\n\n    if (hasPropertyChanged('maxBitrate') && newSettings.maxBitrate) {\n      await stream.setMaxBitrate(newSettings.maxBitrate, this);\n    }\n\n    if (hasPropertyChanged('width') || hasPropertyChanged('height') || hasPropertyChanged('advanced')) {\n      await this.nativeTrack.applyConstraints(newSettings.toConstraints());\n    }\n\n    this.settings = newSettings;\n  }\n\n  /**\n   * @see HMSVideoPlugin\n   */\n  getPlugins(): string[] {\n    return this.pluginsManager.getPlugins();\n  }\n\n  /**\n   * @see HMSVideoPlugin\n   */\n  async addPlugin(plugin: HMSVideoPlugin, pluginFrameRate?: number): Promise<void> {\n    return this.pluginsManager.addPlugin(plugin, pluginFrameRate);\n  }\n\n  /**\n   * @see HMSVideoPlugin\n   */\n  async removePlugin(plugin: HMSVideoPlugin): Promise<void> {\n    return this.pluginsManager.removePlugin(plugin);\n  }\n\n  /**\n   * @internal\n   */\n  async cleanup() {\n    super.cleanup();\n    await this.pluginsManager.cleanup();\n    this.processedTrack?.stop();\n  }\n\n  /**\n   * once the plugin manager has done its processing it can set or remove processed track via this method\n   * note that replacing sender track only makes sense if the native track is enabled. if it's disabled there is\n   * no point in replacing it. We'll update the processed track variable though so next time unmute happens\n   * it's set properly.\n   * @internal\n   */\n  async setProcessedTrack(processedTrack?: MediaStreamTrack) {\n    // required replacement will happen when video is unmuted\n    if (!this.nativeTrack.enabled) {\n      this.processedTrack = processedTrack;\n      return;\n    }\n    // if all plugins are removed reset everything back to native track\n    if (!processedTrack) {\n      if (this.processedTrack) {\n        // remove, reset back to the native track\n        await (this.stream as HMSLocalStream).replaceSenderTrack(this.processedTrack, this.nativeTrack);\n      }\n      this.processedTrack = undefined;\n      return;\n    }\n    if (processedTrack !== this.processedTrack) {\n      if (this.processedTrack) {\n        // replace previous processed track with new one\n        await (this.stream as HMSLocalStream).replaceSenderTrack(this.processedTrack, processedTrack);\n      } else {\n        // there is no prev processed track, replace native with new one\n        await (this.stream as HMSLocalStream).replaceSenderTrack(this.nativeTrack, processedTrack);\n      }\n      this.processedTrack = processedTrack;\n    }\n  }\n\n  /**\n   * @internal\n   * sent track id will be different in case there was some processing done using plugins.\n   * replace track is used to, start sending data from a new track without un publishing the prior one. There\n   * are thus two track ids - the one which was initially published and should be unpublished when required.\n   * The one whose data is currently being sent, which will be used when removing from connection senders.\n   */\n  getTrackIDBeingSent() {\n    return this.processedTrack ? this.processedTrack.id : this.nativeTrack.id;\n  }\n\n  /**\n   * called when the video is unmuted\n   * @private\n   */\n  private async replaceTrackWith(settings: HMSVideoTrackSettings) {\n    const prevTrack = this.nativeTrack;\n    prevTrack?.stop();\n    const newTrack = await getVideoTrack(settings);\n    const localStream = this.stream as HMSLocalStream;\n    // change nativeTrack so plugin can start its work\n    await localStream.replaceSenderTrack(prevTrack, this.processedTrack || newTrack);\n    await localStream.replaceStreamTrack(prevTrack, newTrack);\n    this.nativeTrack = newTrack;\n    await this.pluginsManager.waitForRestart();\n  }\n\n  /**\n   * called when the video is muted. A blank track is used to replace the original track. This is in order to\n   * turn off the camera light and keep the bytes flowing to avoid av sync, timestamp issues.\n   * @private\n   */\n  private async replaceTrackWithBlank() {\n    const prevTrack = this.nativeTrack;\n    prevTrack?.stop();\n    const newTrack = getEmptyVideoTrack(prevTrack);\n    const localStream = this.stream as HMSLocalStream;\n    await localStream.replaceSenderTrack(this.processedTrack || this.nativeTrack, newTrack);\n    await localStream.replaceStreamTrack(this.nativeTrack, newTrack);\n    this.nativeTrack = newTrack;\n  }\n}\n","import HMSMediaStream from './HMSMediaStream';\nimport { HMSLocalTrack, HMSLocalAudioTrack, HMSLocalVideoTrack } from '../tracks';\nimport HMSPublishConnection from '../../connection/publish';\nimport { HMSTrackSettings, HMSVideoTrackSettings, HMSAudioTrackSettings } from '../settings';\nimport HMSLogger from '../../utils/logger';\nimport { BuildGetMediaError, HMSGetMediaActions } from '../../error/utils';\nimport { getAudioTrack, getEmptyAudioTrack, getEmptyVideoTrack, getVideoTrack } from '../../utils/track';\nimport { IFetchAVTrackOptions } from '../../transport/ITransport';\nimport { SimulcastLayer } from '../../interfaces';\nimport { isNode } from '../../utils/support';\n\nconst TAG = 'HMSLocalStream';\n\nexport default class HMSLocalStream extends HMSMediaStream {\n  /** Connection set when publish is called for the first track */\n  private connection: HMSPublishConnection | null = null;\n\n  setConnection(connection: HMSPublishConnection) {\n    this.connection = connection;\n  }\n\n  static async getLocalScreen(videosettings: HMSVideoTrackSettings, audioSettings: HMSAudioTrackSettings) {\n    const audioConstraints: MediaTrackConstraints = audioSettings.toConstraints();\n    // remove advanced constraints as it not supported for screenshare audio\n    delete audioConstraints.advanced;\n    const constraints = {\n      video: videosettings.toConstraints(),\n      audio: {\n        ...audioConstraints,\n        autoGainControl: false,\n        noiseSuppression: false,\n        googAutoGainControl: false,\n        echoCancellation: false,\n      },\n    } as MediaStreamConstraints;\n    let stream;\n    try {\n      // @ts-ignore [https://github.com/microsoft/TypeScript/issues/33232]\n      stream = (await navigator.mediaDevices.getDisplayMedia(constraints)) as MediaStream;\n    } catch (err) {\n      throw BuildGetMediaError(err as Error, HMSGetMediaActions.SCREEN);\n    }\n\n    const tracks: Array<HMSLocalTrack> = [];\n    const local = new HMSLocalStream(stream);\n    const nativeVideoTrack = stream.getVideoTracks()[0];\n    const videoTrack = new HMSLocalVideoTrack(local, nativeVideoTrack, 'screen', videosettings);\n    tracks.push(videoTrack);\n    const nativeAudioTrack = stream.getAudioTracks()[0];\n    if (nativeAudioTrack) {\n      const audioTrack = new HMSLocalAudioTrack(local, nativeAudioTrack, 'screen', audioSettings);\n      tracks.push(audioTrack);\n    }\n\n    HMSLogger.v(TAG, 'getLocalScreen', tracks);\n    return tracks;\n  }\n\n  static async getLocalTracks(settings: HMSTrackSettings): Promise<Array<HMSLocalTrack>> {\n    return await this.getEmptyLocalTracks({ audio: true, video: true }, settings);\n  }\n\n  static async getEmptyLocalTracks(\n    fetchTrackOptions: IFetchAVTrackOptions = { audio: true, video: true },\n    settings?: HMSTrackSettings,\n  ): Promise<Array<HMSLocalTrack>> {\n    const nativeTracks = await this.getNativeLocalTracks(fetchTrackOptions, settings);\n    const nativeVideoTrack = nativeTracks.find((track) => track.kind === 'video');\n    const nativeAudioTrack = nativeTracks.find((track) => track.kind === 'audio');\n    const local = new HMSLocalStream(new MediaStream(nativeTracks));\n\n    const tracks: Array<HMSLocalTrack> = [];\n    if (nativeAudioTrack && settings?.audio) {\n      const audioTrack = new HMSLocalAudioTrack(local, nativeAudioTrack, 'regular', settings.audio);\n      tracks.push(audioTrack);\n    }\n\n    if (nativeVideoTrack && settings?.video) {\n      const videoTrack = new HMSLocalVideoTrack(local, nativeVideoTrack, 'regular', settings.video);\n      tracks.push(videoTrack);\n    }\n\n    HMSLogger.v(TAG, 'getEmptyLocalTracks', tracks);\n    return tracks;\n  }\n\n  addTransceiver(track: HMSLocalTrack, simulcastLayers: SimulcastLayer[]) {\n    let trackEncodings: RTCRtpEncodingParameters[] = [];\n    if (track instanceof HMSLocalVideoTrack) {\n      if (simulcastLayers.length > 0) {\n        HMSLogger.v(TAG, 'Simulcast enabled with layers', simulcastLayers);\n        trackEncodings.push(...simulcastLayers);\n      } else {\n        const encodings: RTCRtpEncodingParameters = { active: this.nativeStream.active };\n        if (track.settings.maxBitrate && !isNode) {\n          encodings.maxBitrate = track.settings.maxBitrate;\n        }\n        trackEncodings.push(encodings);\n      }\n    }\n\n    const transceiver = this.connection!.addTransceiver(track.nativeTrack, {\n      streams: [this.nativeStream],\n      direction: 'sendonly',\n      sendEncodings: trackEncodings,\n    });\n    this.setPreferredCodec(transceiver, track.nativeTrack.kind);\n    return transceiver;\n  }\n\n  async setMaxBitrate(maxBitrate: number, track: HMSLocalTrack): Promise<void> {\n    await this.connection?.setMaxBitrate(maxBitrate, track);\n  }\n\n  // @ts-ignore\n  setPreferredCodec(transceiver: RTCRtpTransceiver, kind: string) {\n    // TODO: Some browsers don't support setCodecPreferences, resort to SDPMunging?\n  }\n\n  /**\n   * On mute and unmute of video tracks as well as for changing cameras, we replace the track using replaceTrack api\n   * so as to avoid a renegotiation with the backend and reflect changes faster.\n   * @param track - the current track\n   * @param withTrack - the track to replace it with\n   */\n  async replaceTrack(track: MediaStreamTrack, withTrack: MediaStreamTrack) {\n    await this.replaceSenderTrack(track, withTrack);\n    track.stop(); // If the track is already stopped, this does not throw any error. 😉\n    this.replaceStreamTrack(track, withTrack);\n  }\n\n  replaceStreamTrack(track: MediaStreamTrack, withTrack: MediaStreamTrack) {\n    this.nativeStream.addTrack(withTrack);\n    this.nativeStream.removeTrack(track);\n  }\n\n  /**\n   * In case of video plugins we need to replace the track sent to remote without stopping the original one. As\n   * if the original is stopped, plugin would stop getting input frames to process. So only the track in the\n   * sender needs to be replaced.\n   */\n  async replaceSenderTrack(track: MediaStreamTrack, withTrack: MediaStreamTrack) {\n    const sender = this.connection?.getSenders().find((sender) => sender.track && sender.track!.id === track.id);\n\n    if (sender === undefined) {\n      HMSLogger.w(TAG, `No sender found for trackId=${track.id}`);\n      return;\n    }\n    await sender.replaceTrack(withTrack);\n  }\n\n  removeSender(track: HMSLocalTrack) {\n    let removedSenderCount = 0;\n    this.connection!.getSenders().forEach((sender) => {\n      if (sender.track?.id === track.trackId || sender.track?.id === track.getTrackIDBeingSent()) {\n        this.connection!.removeTrack(sender);\n        removedSenderCount += 1;\n\n        // Remove the local reference as well\n        const toRemoveLocalTrackIdx = this.tracks.indexOf(track);\n        if (toRemoveLocalTrackIdx !== -1) {\n          this.tracks.splice(toRemoveLocalTrackIdx, 1);\n        } else {\n          HMSLogger.e(TAG, `Cannot find ${track.trackId} in locally stored tracks`);\n        }\n      }\n    });\n    if (removedSenderCount !== 1) {\n      HMSLogger.e(TAG, `Removed ${removedSenderCount} sender's, expected to remove 1`);\n    }\n  }\n\n  trackUpdate(track: HMSLocalTrack) {\n    this.connection?.trackUpdate(track);\n  }\n\n  private static async getNativeLocalTracks(\n    fetchTrackOptions: IFetchAVTrackOptions = { audio: false, video: false },\n    settings?: HMSTrackSettings,\n  ) {\n    const nativeVideoTrack =\n      fetchTrackOptions.video === 'empty'\n        ? getEmptyVideoTrack()\n        : fetchTrackOptions.video && settings?.video && (await getVideoTrack(settings.video));\n    const nativeAudioTrack =\n      fetchTrackOptions.audio === 'empty'\n        ? getEmptyAudioTrack()\n        : fetchTrackOptions.audio && settings?.audio && (await getAudioTrack(settings.audio));\n\n    const nativeTracks: MediaStreamTrack[] = [];\n    if (nativeAudioTrack) nativeTracks.push(nativeAudioTrack);\n    if (nativeVideoTrack) nativeTracks.push(nativeVideoTrack);\n    return nativeTracks;\n  }\n}\n","/**\n * Method names for incoming RPC messages from BIZ Signal through Websocket.\n * Used to call the corresponding handler/manager in NotificationManager\n * which will call the corresponding HMSUpdateListener callbacks.\n */\n\nexport enum HMSNotificationMethod {\n  PEER_JOIN = 'on-peer-join',\n  PEER_LEAVE = 'on-peer-leave',\n  PEER_LIST = 'peer-list',\n  TRACK_METADATA_ADD = 'on-track-add',\n  TRACK_UPDATE = 'on-track-update',\n  CHANGE_TRACK_MUTE_STATE_UPDATE = 'on-change-track-mute-state-request',\n  ACTIVE_SPEAKERS = 'active-speakers',\n  BROADCAST = 'on-broadcast',\n  ROLE_CHANGE = 'on-role-change',\n  POLICY_CHANGE = 'on-policy-change',\n  ROLE_CHANGE_REQUEST = 'on-role-change-request',\n  TRACK_UPDATE_REQUEST = 'on-track-update-request',\n  PEER_UPDATE = 'on-peer-update',\n  PEER_LEAVE_REQUEST = 'on-peer-leave-request',\n  UNSUPPORTED = 'unsupported',\n  RTMP_START = 'on-rtmp-start',\n  RTMP_STOP = 'on-rtmp-stop',\n  RECORDING_START = 'on-record-start',\n  RECORDING_STOP = 'on-record-stop',\n}\n","import { HMSAudioListener, HMSPeerUpdate, HMSSpeaker, HMSUpdateListener } from '../../interfaces';\nimport { HMSAudioTrack } from '../../media/tracks';\nimport { IStore } from '../../sdk/store';\nimport { SpeakerList } from '../HMSNotifications';\n\nexport class ActiveSpeakerManager {\n  constructor(private store: IStore, public listener?: HMSUpdateListener, public audioListener?: HMSAudioListener) {}\n\n  handleActiveSpeakers(speakerList: SpeakerList) {\n    const speakers = speakerList['speaker-list'];\n    const hmsSpeakers: HMSSpeaker[] = speakers.map((speaker) => ({\n      audioLevel: speaker.level,\n      peer: this.store.getPeerById(speaker.peer_id)!,\n      track: this.store.getTrackById(speaker.track_id) as HMSAudioTrack,\n    }));\n\n    this.audioListener?.onAudioLevelUpdate(hmsSpeakers);\n    this.store.updateSpeakers(hmsSpeakers);\n    const dominantSpeaker = speakers[0];\n\n    if (dominantSpeaker) {\n      const dominantSpeakerPeer = this.store.getPeerById(dominantSpeaker.peer_id);\n      this.listener?.onPeerUpdate(HMSPeerUpdate.BECAME_DOMINANT_SPEAKER, dominantSpeakerPeer!);\n    } else {\n      this.listener?.onPeerUpdate(HMSPeerUpdate.RESIGNED_DOMINANT_SPEAKER, null);\n    }\n  }\n}\n","import { HMSRole } from '../../interfaces';\nimport { HMSMessage } from '../../interfaces/message';\nimport { ISignalParamsProvider } from '../../signal/ISignalSendParamsProvider';\nimport { SendMessage } from '../../notification-manager';\nimport { HMSPeer } from './peer';\n\nexport default class Message implements HMSMessage, ISignalParamsProvider<SendMessage> {\n  sender: HMSPeer;\n  recipientPeer?: HMSPeer;\n  recipientRoles?: HMSRole[];\n  message: any;\n  time: Date;\n  type: string;\n\n  constructor({ sender, message, type = 'chat', recipientPeer, recipientRoles, time }: HMSMessage) {\n    this.sender = sender;\n    this.message = message;\n    this.type = type;\n    this.recipientPeer = recipientPeer;\n    this.recipientRoles = recipientRoles;\n    this.time = time;\n  }\n\n  toSignalParams() {\n    const roles = this.recipientRoles?.map((role) => role.name);\n    const peer = this.recipientPeer?.peerId;\n    const sendParams: SendMessage = {\n      info: {\n        sender: this.sender.peerId,\n        message: this.message,\n        type: this.type,\n      },\n    };\n    if (roles?.length) {\n      sendParams.roles = roles;\n    }\n    if (peer) {\n      sendParams.peer_id = peer;\n    }\n    return sendParams;\n  }\n}\n","import { HMSPeer as IHMSPeer } from '../../../interfaces/peer';\nimport { HMSRole } from '../../../interfaces/role';\nimport { HMSAudioTrack, HMSTrack, HMSVideoTrack } from '../../../media/tracks';\n\nexport type HMSPeerInit = {\n  peerId: string;\n  name: string;\n  isLocal: boolean;\n  customerUserId?: string;\n  customerDescription?: string;\n  role?: HMSRole;\n};\n\nexport class HMSPeer implements IHMSPeer {\n  readonly peerId: string;\n  readonly isLocal: boolean;\n  name: string;\n  customerUserId?: string = '';\n  customerDescription?: string = '';\n  audioTrack?: HMSAudioTrack;\n  videoTrack?: HMSVideoTrack;\n  auxiliaryTracks: HMSTrack[] = [];\n  role?: HMSRole;\n\n  constructor({ peerId, name, isLocal, customerUserId, customerDescription, role }: HMSPeerInit) {\n    this.name = name;\n    this.peerId = peerId;\n    this.isLocal = isLocal;\n    this.customerUserId = customerUserId;\n    this.customerDescription = customerDescription;\n\n    if (role) {\n      this.role = role;\n    }\n  }\n\n  updateRole(newRole: HMSRole) {\n    this.role = newRole;\n  }\n}\n","import { v4 as uuidv4 } from 'uuid';\n\nexport default class HMSIdFactory {\n  static makePeerId = () => uuidv4();\n}\n","import { HMSLocalPeer as IHMSLocalPeer } from '../../../interfaces/peer';\nimport { HMSPeer, HMSPeerInit } from './HMSPeer';\nimport { HMSLocalAudioTrack, HMSLocalTrack, HMSLocalVideoTrack } from '../../../media/tracks';\nimport HMSIdFactory from '../../../utils/id-factory';\n\ntype HMSLocalPeerInit = Omit<HMSPeerInit, 'isLocal' | 'peerId'>;\n\nexport class HMSLocalPeer extends HMSPeer implements IHMSLocalPeer {\n  isLocal: boolean = true;\n  audioTrack?: HMSLocalAudioTrack;\n  videoTrack?: HMSLocalVideoTrack;\n  auxiliaryTracks: HMSLocalTrack[] = [];\n\n  constructor(peerData: HMSLocalPeerInit) {\n    super({ ...peerData, peerId: HMSIdFactory.makePeerId(), isLocal: true });\n  }\n}\n","import { HMSRemotePeer as IHMSRemotePeer } from '../../../interfaces/peer';\nimport { HMSPeer, HMSPeerInit } from './HMSPeer';\nimport { HMSRemoteAudioTrack, HMSRemoteTrack, HMSRemoteVideoTrack } from '../../../media/tracks';\n\ntype HMSRemotePeerInit = Omit<HMSPeerInit, 'isLocal'>;\n\nexport class HMSRemotePeer extends HMSPeer implements IHMSRemotePeer {\n  isLocal: boolean = false;\n  audioTrack?: HMSRemoteAudioTrack;\n  videoTrack?: HMSRemoteVideoTrack;\n  auxiliaryTracks: HMSRemoteTrack[] = [];\n\n  constructor(peerData: HMSRemotePeerInit) {\n    super({ ...peerData, isLocal: false });\n  }\n}\n","import { HMSUpdateListener } from '../../interfaces';\nimport Message from '../../sdk/models/HMSMessage';\nimport { HMSPeer } from '../../sdk/models/peer';\nimport { IStore } from '../../sdk/store';\nimport HMSLogger from '../../utils/logger';\nimport { MessageNotification } from '../HMSNotifications';\n\nexport class BroadcastManager {\n  constructor(private store: IStore, public listener?: HMSUpdateListener) {}\n\n  private get TAG() {\n    return `[${this.constructor.name}]`;\n  }\n\n  handleBroadcast(messageNotification: MessageNotification) {\n    const notifPeer = messageNotification.peer;\n    const notifMessage = messageNotification.info;\n    const notifRoles = messageNotification.roles;\n    // If sender peerId is available in store, use that peer.\n    let sender = this.store.getPeerById(notifPeer.peer_id);\n    // If not available in store, use peer data from received broadcast message from Biz\n    if (!sender) {\n      sender = new HMSPeer({\n        peerId: notifPeer.peer_id,\n        name: notifPeer.info.name,\n        isLocal: false,\n        customerUserId: notifPeer.info.user_id,\n        customerDescription: notifPeer.info.data,\n      });\n    }\n\n    let recipientPeer;\n    const recipientRoles = [];\n\n    if (notifRoles?.length) {\n      const knownRoles = this.store.getKnownRoles();\n      for (const role of notifRoles) {\n        if (knownRoles[role]) {\n          recipientRoles.push(knownRoles[role]);\n        }\n      }\n    }\n\n    if (messageNotification.private) {\n      const peer = this.store.getLocalPeer();\n      recipientPeer = peer;\n    }\n\n    const hmsMessage = new Message({\n      ...notifMessage,\n      sender,\n      recipientRoles,\n      recipientPeer,\n      time: new Date(messageNotification.timestamp),\n    });\n    HMSLogger.d(this.TAG, `Received Message:: `, hmsMessage);\n    this.listener?.onMessageReceived(hmsMessage);\n  }\n}\n","import { HMSUpdateListener } from '../..';\nimport { HMSTrackUpdate } from '../../interfaces';\nimport { HMSPeer } from '../../sdk/models/peer';\nimport { IStore } from '../../sdk/store';\nimport HMSLogger from '../../utils/logger';\nimport { PeerListNotification, PeerNotification } from '../HMSNotifications';\nimport { PeerManager } from './PeerManager';\nimport { TrackManager } from './TrackManager';\n\n/**\n * Handles:\n * - Initial Peer List - get peer and track meta-data for peers who are already in the room when you join\n * - Reconnect Peer List - Handle peer and track changes in the room missed out due to reconnection\n *\n * Cases to handle in reconnect peer list:\n * - Add additional peers as peer join\n * - Remove missing peers as peer leave\n * - For existing peers:\n *    - Add new tracks as track add\n *    - Remove missing tracks as track remove\n *    - Track state change(enabled) as track update\n */\nexport class PeerListManager {\n  constructor(\n    private store: IStore,\n    private peerManager: PeerManager,\n    private trackManager: TrackManager,\n    public listener?: HMSUpdateListener,\n  ) {}\n\n  private get TAG() {\n    return `[${this.constructor.name}]`;\n  }\n\n  handleInitialPeerList = (peerList: PeerListNotification) => {\n    const peers = Object.values(peerList.peers);\n    this.peerManager.handlePeerList(peers);\n  };\n\n  handleReconnectPeerList = (peerList: PeerListNotification) => {\n    const currentPeerList = this.store.getRemotePeers();\n    const peers = Object.values(peerList.peers);\n    const peersToRemove = currentPeerList.filter((hmsPeer) => !peerList.peers.hasOwnProperty(hmsPeer.peerId));\n\n    HMSLogger.d(this.TAG, { peersToRemove });\n\n    // Send peer-leave updates to all the missing peers\n    peersToRemove.forEach((peer) => {\n      const peerNotification: PeerNotification = {\n        peer_id: peer.peerId,\n        role: peer.role?.name || '',\n        info: {\n          name: peer.name,\n          data: peer.customerDescription || '',\n          user_id: peer.customerUserId || '',\n        },\n        tracks: {},\n      };\n\n      this.peerManager.handlePeerLeave(peerNotification);\n    });\n\n    // Check for any tracks which are added/removed\n    peers.forEach((newPeerNotification) => {\n      const oldPeer = this.store.getPeerById(newPeerNotification.peer_id);\n      const newPeerTrackStates = Object.values(newPeerNotification.tracks);\n\n      if (oldPeer) {\n        // Peer already present in room, we take diff between the tracks\n        const tracks = this.store.getPeerTracks(oldPeer.peerId);\n\n        // Remove all the tracks which are not present in the peer.tracks\n        tracks.forEach((track) => {\n          if (!newPeerNotification.tracks.hasOwnProperty(track.trackId)) {\n            this.removePeerTrack(oldPeer, track.trackId);\n            this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_REMOVED, track, oldPeer);\n          }\n        });\n\n        // Add track-metadata for all the new tracks\n        newPeerTrackStates.forEach((trackData) => {\n          if (!this.store.getTrackById(trackData.track_id)) {\n            // NOTE: We assume that, once the connection is re-established,\n            //  transport layer will send a native onTrackAdd\n            this.store.setTrackState({\n              peerId: oldPeer.peerId,\n              trackInfo: trackData,\n            });\n          }\n        });\n\n        // Handle RTC track add and track state change.\n        this.trackManager.handleTrackUpdate({\n          peer: { info: newPeerNotification.info, peer_id: newPeerNotification.peer_id },\n          tracks: newPeerNotification.tracks,\n        });\n      } else {\n        // New peer joined while reconnecting\n        this.peerManager.handlePeerJoin(newPeerNotification);\n      }\n    });\n  };\n\n  private removePeerTrack(peer: HMSPeer, trackId: string) {\n    if (peer.audioTrack?.trackId === trackId) {\n      peer.audioTrack = undefined;\n    } else if (peer.videoTrack?.trackId === trackId) {\n      peer.videoTrack = undefined;\n    } else {\n      const trackIndex = peer.auxiliaryTracks.findIndex((track) => track.trackId === trackId);\n      trackIndex >= 0 && peer.auxiliaryTracks.splice(trackIndex, 1);\n    }\n  }\n}\n","import { HMSPeerUpdate, HMSTrackUpdate, HMSUpdateListener } from '../../interfaces';\nimport { HMSRemotePeer } from '../../sdk/models/peer';\nimport { IStore } from '../../sdk/store';\nimport HMSLogger from '../../utils/logger';\nimport { PeerNotification } from '../HMSNotifications';\nimport { TrackManager } from './TrackManager';\n\n/**\n * Handles:\n * - New peer join\n * - Peer Leave\n * - Role update for peer\n *\n * Notes:\n * - Peer join comes with track meta-data,\n * we add it to the store and call TrackManager to process it when RTC Track comes in.\n */\nexport class PeerManager {\n  constructor(private store: IStore, private trackManager: TrackManager, public listener?: HMSUpdateListener) {}\n\n  private get TAG() {\n    return `[${this.constructor.name}]`;\n  }\n\n  handlePeerList = (peers: PeerNotification[]) => {\n    if (peers.length === 0) return;\n    let hmsPeers: HMSRemotePeer[] = [];\n    for (let peer of peers) {\n      hmsPeers.push(this.makePeer(peer));\n    }\n    this.listener?.onPeerUpdate(HMSPeerUpdate.PEER_LIST, hmsPeers);\n    this.trackManager.processPendingTracks();\n  };\n\n  handlePeerJoin = (peer: PeerNotification) => {\n    const hmsPeer = this.makePeer(peer);\n\n    this.listener?.onPeerUpdate(HMSPeerUpdate.PEER_JOINED, hmsPeer);\n    this.trackManager.processPendingTracks();\n  };\n\n  handlePeerLeave = (peer: PeerNotification) => {\n    const hmsPeer = this.store.getPeerById(peer.peer_id);\n    this.store.removePeer(peer.peer_id);\n    HMSLogger.d(this.TAG, `PEER_LEAVE event`, peer, this.store.getPeers());\n\n    if (!hmsPeer) {\n      return;\n    }\n\n    if (hmsPeer.audioTrack) {\n      this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_REMOVED, hmsPeer.audioTrack, hmsPeer);\n    }\n\n    if (hmsPeer.videoTrack) {\n      this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_REMOVED, hmsPeer.videoTrack, hmsPeer);\n    }\n\n    hmsPeer.auxiliaryTracks?.forEach((track) => {\n      this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_REMOVED, track, hmsPeer);\n    });\n\n    this.listener?.onPeerUpdate(HMSPeerUpdate.PEER_LEFT, hmsPeer);\n  };\n\n  handlePeerUpdate(notification: PeerNotification) {\n    const peer = this.store.getPeerById(notification.peer_id);\n\n    if (!peer) {\n      return;\n    }\n\n    if (peer.role && peer.role.name !== notification.role) {\n      const newRole = this.store.getPolicyForRole(notification.role);\n      peer.updateRole(newRole);\n      this.listener?.onPeerUpdate(HMSPeerUpdate.ROLE_UPDATED, peer);\n    }\n  }\n\n  private makePeer(peer: PeerNotification) {\n    const hmsPeer = new HMSRemotePeer({\n      peerId: peer.peer_id,\n      name: peer.info.name,\n      customerUserId: peer.info.user_id,\n      customerDescription: peer.info.data,\n      role: this.store.getPolicyForRole(peer.role),\n    });\n\n    this.store.addPeer(hmsPeer);\n    HMSLogger.d(this.TAG, `adding to the peerList`, hmsPeer);\n\n    for (const trackId in peer.tracks) {\n      this.store.setTrackState({\n        peerId: peer.peer_id,\n        trackInfo: peer.tracks[trackId],\n      });\n    }\n    return hmsPeer;\n  }\n}\n","import EventEmitter from 'events';\nimport { IStore } from '../../sdk/store';\nimport { PolicyParams } from '../HMSNotifications';\n\n/**\n * Handles:\n * - Set policy with publishParams, simulcast layers to store\n * - Emit 'local-peer-role-update' to trigger RoleChangeManager to publish/unpublish local tracks\n * - Emit 'policy-change' to finish preview before calling listener.onPreview\n */\nexport class PolicyChangeManager {\n  constructor(private store: IStore, private eventEmitter: EventEmitter) {}\n\n  handlePolicyChange(params: PolicyParams) {\n    const localPeer = this.store.getLocalPeer();\n\n    if (localPeer && !localPeer.role) {\n      const newRole = params.known_roles[params.name];\n      localPeer.updateRole(newRole);\n    }\n\n    this.store.setKnownRoles(params.known_roles);\n    // handle when role is not present in known_roles\n    const publishParams = params.known_roles[params.name]?.publishParams;\n    this.store.setPublishParams(publishParams);\n    if (publishParams && Object.keys(publishParams).length > 0) {\n      const { videoSimulcastLayers, screenSimulcastLayers } = publishParams;\n      this.store.setVideoSimulcastLayers(videoSimulcastLayers);\n      this.store.setScreenshareSimulcastLayers(screenSimulcastLayers);\n    }\n\n    if (localPeer?.role && localPeer.role.name !== params.name) {\n      const newRole = this.store.getPolicyForRole(params.name);\n      const oldRole = localPeer.role;\n      localPeer.updateRole(newRole);\n      this.eventEmitter.emit('local-peer-role-update', { detail: { oldRole, newRole } });\n    }\n    this.eventEmitter.emit('policy-change', { detail: { params } });\n  }\n}\n","import { HMSLocalTrack } from '../../media/tracks';\nimport { HMSRemotePeer, HMSRoleChangeRequest, HMSUpdateListener } from '../../interfaces';\nimport { IStore } from '../../sdk/store';\nimport {\n  RoleChangeRequestParams,\n  TrackUpdateRequestNotification,\n  ChangeTrackMuteStateNotification,\n} from '../HMSNotifications';\n\n/**\n * Handles request from remote peers to change something on the local side. For eg. role change, track mute/unmute.\n */\nexport class RequestManager {\n  constructor(private store: IStore, public listener?: HMSUpdateListener) {}\n\n  handleRoleChangeRequest(notification: RoleChangeRequestParams) {\n    const request: HMSRoleChangeRequest = {\n      requestedBy: this.store.getPeerById(notification.requested_by) as HMSRemotePeer,\n      role: this.store.getPolicyForRole(notification.role),\n      token: notification.token,\n    };\n\n    this.listener?.onRoleChangeRequest(request);\n  }\n\n  handleTrackUpdateRequest(trackUpdateRequest: TrackUpdateRequestNotification) {\n    const { requested_by, track_id, mute } = trackUpdateRequest;\n    const peer = this.store.getPeerById(requested_by);\n    const track = this.store.getLocalPeerTracks().find((track) => track.publishedTrackId === track_id);\n\n    if (!peer || peer.isLocal || !track) {\n      return;\n    }\n\n    const sendNotification = () => {\n      this.listener?.onChangeTrackStateRequest({ requestedBy: peer as HMSRemotePeer, track, enabled: !mute });\n    };\n\n    if (mute) {\n      // if track is already in the same state as change state, do nothing\n      if (track.enabled === !mute) {\n        return;\n      }\n      /**\n       * Directly mute track when request arrives\n       */\n      track.setEnabled(!mute).then(sendNotification);\n    } else {\n      /**\n       * Notify UI to unmute for requesting consent\n       */\n      sendNotification();\n    }\n  }\n\n  handleChangeTrackStateRequest(request: ChangeTrackMuteStateNotification) {\n    const { type, source, value, requested_by } = request;\n    const peer = this.store.getPeerById(requested_by);\n\n    if (!peer) {\n      return;\n    }\n    // value true means the track has to be muted\n    const enabled = !value;\n    const localPeerTracks = this.store.getLocalPeerTracks();\n    let tracks: HMSLocalTrack[] = localPeerTracks;\n    if (type) {\n      tracks = tracks.filter((track) => track.type === type);\n    }\n\n    if (source) {\n      tracks = tracks.filter((track) => track.source === source);\n    }\n\n    const tracksToBeUpdated = tracks.filter((track) => track.enabled !== enabled);\n    //Do nothing if all tracks are already in same state as the request\n    if (tracksToBeUpdated.length === 0) {\n      return;\n    }\n    // if track is to be muted, mute and send the notification, otherwise send notification\n    if (!enabled) {\n      const promises: Promise<void>[] = [];\n\n      for (let track of tracksToBeUpdated) {\n        promises.push(track.setEnabled(false));\n      }\n      Promise.all(promises).then(() => {\n        this.listener?.onChangeMultiTrackStateRequest({\n          requestedBy: peer as HMSRemotePeer,\n          tracks: tracksToBeUpdated,\n          enabled: false,\n        });\n      });\n    } else {\n      this.listener?.onChangeMultiTrackStateRequest({\n        requestedBy: peer as HMSRemotePeer,\n        tracks: tracksToBeUpdated,\n        type,\n        source,\n        enabled: true,\n      });\n    }\n  }\n}\n","import { RecordingNotification, PeerListNotification } from '../HMSNotifications';\nimport { HMSUpdateListener, HMSRoomUpdate } from '../../interfaces';\nimport { IStore } from '../../sdk/store';\n\nexport class RoomUpdateManager {\n  constructor(private store: IStore, public listener?: HMSUpdateListener) {}\n\n  onPeerList(notification: PeerListNotification) {\n    const { recording, streaming } = notification.room;\n    const room = this.store.getRoom();\n    if (!room.recording) {\n      room.recording = this.getDefaultRecordingState();\n    }\n    if (!room.rtmp) {\n      room.rtmp = {\n        running: false,\n      };\n    }\n    room.recording.server.running = recording.sfu.enabled;\n    room.recording.browser.running = recording.beam.enabled;\n    room.rtmp.running = streaming.enabled;\n    this.listener?.onRoomUpdate(HMSRoomUpdate.RECORDING_STATE_UPDATED, room);\n  }\n\n  onRTMPStart() {\n    this.setRTMPStatus(true);\n  }\n\n  onRTMPStop() {\n    this.setRTMPStatus(false);\n  }\n\n  onRecordingStart(notification: RecordingNotification) {\n    this.setRecordingStatus(notification.type, true);\n  }\n\n  onRecordingStop(notification: RecordingNotification) {\n    this.setRecordingStatus(notification.type, false);\n  }\n\n  private setRecordingStatus(type: 'sfu' | 'Browser', running: boolean) {\n    const room = this.store.getRoom();\n    if (!room.recording) {\n      room.recording = this.getDefaultRecordingState();\n    }\n    let action: number = -1;\n    if (type === 'sfu') {\n      room.recording.server.running = running;\n      action = HMSRoomUpdate.SERVER_RECORDING_STATE_UPDATED;\n    } else {\n      room.recording.browser.running = running;\n      action = HMSRoomUpdate.BROWSER_RECORDING_STATE_UPDATED;\n    }\n    this.listener?.onRoomUpdate(action, room);\n  }\n\n  private setRTMPStatus(running: boolean) {\n    const room = this.store.getRoom();\n    if (!room.rtmp) {\n      room.rtmp = {\n        running: false,\n      };\n    }\n    room.rtmp.running = running;\n    this.listener?.onRoomUpdate(HMSRoomUpdate.RTMP_STREAMING_STATE_UPDATED, room);\n  }\n\n  private getDefaultRecordingState() {\n    return {\n      browser: {\n        running: false,\n      },\n      server: {\n        running: false,\n      },\n    };\n  }\n}\n","import { EventEmitter } from 'events';\nimport { HMSTrackUpdate, HMSUpdateListener } from '../../interfaces';\nimport { HMSRemoteAudioTrack, HMSRemoteTrack, HMSRemoteVideoTrack, HMSTrackType } from '../../media/tracks';\nimport { IStore } from '../../sdk/store';\nimport HMSLogger from '../../utils/logger';\nimport { TrackStateNotification } from '../HMSNotifications';\n\n/**\n * Handles:\n * - Incoming track meta-data from BIZ(signal) to match a track to a peer.\n * - Incoming MediaStreamTracks(wrapped in HMSTracks) from RTCMediaChannel.\n * - Mute/unmute track meta-data updates from BIZ.\n *\n * Since track meta-data and RTC tracks come in asynchronously,\n * we store the track meta-data(TrackState) in SDK Store and tracks temporarily here in tracksToProcess.\n *\n * Once we have both TrackState and track,\n * we add it to peer, send listener.onTrackUpdate and remove it from tracksToProcess.\n *\n * Gotchas:\n * - TRACK_UPDATE comes before TRACK_ADD -> update state, process pending tracks when TRACK_ADD arrives.\n */\nexport class TrackManager {\n  private tracksToProcess: Map<string, HMSRemoteTrack> = new Map();\n\n  private get TAG() {\n    return `[${this.constructor.name}]`;\n  }\n\n  constructor(private store: IStore, private eventEmitter: EventEmitter, public listener?: HMSUpdateListener) {}\n\n  handleTrackMetadataAdd(params: TrackStateNotification) {\n    HMSLogger.d(this.TAG, `TRACK_METADATA_ADD`, params);\n\n    for (const trackId in params.tracks) {\n      this.store.setTrackState({\n        peerId: params.peer.peer_id,\n        trackInfo: params.tracks[trackId],\n      });\n    }\n\n    this.processPendingTracks();\n  }\n\n  /**\n   * Sets the tracks to peer and returns the peer\n   */\n  handleTrackAdd = (track: HMSRemoteTrack) => {\n    HMSLogger.d(this.TAG, `ONTRACKADD`, track, track.nativeTrack);\n    this.store.addTrack(track);\n    this.tracksToProcess.set(track.trackId, track);\n    this.processPendingTracks();\n  };\n\n  /**\n   * Sets the track of corresponding peer to null and returns the peer\n   */\n  handleTrackRemove = (track: HMSRemoteTrack) => {\n    HMSLogger.d(this.TAG, `ONTRACKREMOVE`, track, track.nativeTrack);\n    const trackStateEntry = this.store.getTrackState(track.trackId);\n\n    if (!trackStateEntry) return;\n\n    // emit this event here as peer will already be removed(if left the room) by the time this event is received\n    track.type === HMSTrackType.AUDIO && this.eventEmitter.emit('track-removed', { detail: track });\n    const hmsPeer = this.store.getPeerById(trackStateEntry.peerId);\n    if (!hmsPeer) {\n      return;\n    }\n\n    const removeAuxiliaryTrack = () => {\n      const auxiliaryTrackIndex = hmsPeer.auxiliaryTracks.indexOf(track);\n      if (auxiliaryTrackIndex > -1) {\n        hmsPeer.auxiliaryTracks.splice(auxiliaryTrackIndex, 1);\n      }\n    };\n\n    switch (track.type) {\n      case HMSTrackType.AUDIO:\n        if (track.source !== 'regular') {\n          removeAuxiliaryTrack();\n        } else {\n          hmsPeer.audioTrack = undefined;\n        }\n        break;\n      case HMSTrackType.VIDEO: {\n        if (track.source !== 'regular') {\n          removeAuxiliaryTrack();\n        } else {\n          hmsPeer.videoTrack = undefined;\n        }\n      }\n    }\n\n    this.store.removeTrack(track.trackId);\n    this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_REMOVED, track, hmsPeer);\n  };\n\n  handleTrackUpdate = (params: TrackStateNotification) => {\n    HMSLogger.d(this.TAG, `TRACK_UPDATE`, params);\n\n    const hmsPeer = this.store.getPeerById(params.peer.peer_id);\n    if (!hmsPeer) {\n      return;\n    }\n\n    for (const trackId in params.tracks) {\n      const currentTrackStateInfo = Object.assign({}, this.store.getTrackState(trackId)?.trackInfo);\n\n      const trackEntry = params.tracks[trackId];\n      const track = this.store.getTrackById(trackId);\n\n      this.store.setTrackState({\n        peerId: params.peer.peer_id,\n        trackInfo: { ...currentTrackStateInfo, ...trackEntry },\n      });\n\n      // TRACK_UPDATE came before TRACK_ADD -> update state, process pending tracks when TRACK_ADD arrives.\n      if (!track || this.tracksToProcess.has(trackId)) {\n        this.processPendingTracks();\n      } else {\n        track.setEnabled(!trackEntry.mute);\n        if (currentTrackStateInfo.mute !== trackEntry.mute) {\n          if (trackEntry.mute) {\n            this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_MUTED, track, hmsPeer);\n          } else {\n            this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_UNMUTED, track, hmsPeer);\n          }\n          track.type === HMSTrackType.AUDIO &&\n            this.eventEmitter.emit('track-updated', { detail: { track, enabled: !trackEntry.mute } });\n        } else if (currentTrackStateInfo.description !== trackEntry.description) {\n          this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_DESCRIPTION_CHANGED, track, hmsPeer);\n        }\n      }\n    }\n  };\n\n  processPendingTracks() {\n    const tracksCopy = new Map(this.tracksToProcess);\n\n    tracksCopy.forEach((track) => {\n      const state = this.store.getTrackState(track.trackId);\n      if (!state) {\n        return;\n      }\n\n      const hmsPeer = this.store.getPeerById(state.peerId);\n      if (!hmsPeer) {\n        return;\n      }\n\n      track.source = state.trackInfo.source;\n      track.peerId = hmsPeer.peerId;\n      track.setEnabled(!state.trackInfo.mute);\n\n      switch (track.type) {\n        case HMSTrackType.AUDIO:\n          if (!hmsPeer.audioTrack && track.source === 'regular') {\n            hmsPeer.audioTrack = track as HMSRemoteAudioTrack;\n          } else {\n            hmsPeer.auxiliaryTracks.push(track);\n          }\n          break;\n        case HMSTrackType.VIDEO:\n          const remoteTrack = track as HMSRemoteVideoTrack;\n          const simulcastDefinitions = this.store.getSimulcastDefinitionsForPeer(hmsPeer, remoteTrack.source!);\n          remoteTrack.setSimulcastDefinitons(simulcastDefinitions);\n          if (!hmsPeer.videoTrack && track.source === 'regular') {\n            hmsPeer.videoTrack = remoteTrack;\n          } else {\n            hmsPeer.auxiliaryTracks.push(remoteTrack);\n          }\n      }\n\n      /**\n       * Don't call onTrackUpdate for audio elements immediately because the operations(eg: setVolume) performed\n       * on onTrackUpdate can be overriden in AudioSinkManager when audio element is created\n       **/\n      track.type === HMSTrackType.AUDIO\n        ? this.eventEmitter.emit('track-added', { detail: { track, peer: hmsPeer } })\n        : this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_ADDED, track, hmsPeer);\n      this.tracksToProcess.delete(track.trackId);\n    });\n  }\n}\n","import EventEmitter from 'events';\nimport { HMSAudioListener, HMSUpdateListener } from '../interfaces';\nimport { HMSRemoteTrack } from '../media/tracks';\nimport { IStore } from '../sdk/store';\nimport HMSLogger from '../utils/logger';\nimport { HMSNotificationMethod } from './HMSNotificationMethod';\nimport {\n  MessageNotification,\n  PeerNotification,\n  PeerListNotification,\n  PolicyParams,\n  RoleChangeRequestParams,\n  SpeakerList,\n  TrackStateNotification,\n  TrackUpdateRequestNotification,\n  ChangeTrackMuteStateNotification,\n  RecordingNotification,\n} from './HMSNotifications';\nimport { ActiveSpeakerManager } from './managers/ActiveSpeakerManager';\nimport { BroadcastManager } from './managers/BroadcastManager';\nimport { PeerListManager } from './managers/PeerListManager';\nimport { PeerManager } from './managers/PeerManager';\nimport { PolicyChangeManager } from './managers/PolicyChangeManager';\nimport { RequestManager } from './managers/RequestManager';\nimport { RoomUpdateManager } from './managers/RoomUpdateManager';\nimport { TrackManager } from './managers/TrackManager';\n\nexport class NotificationManager {\n  private TAG = '[HMSNotificationManager]';\n  private trackManager: TrackManager;\n  private peerManager: PeerManager;\n  private peerListManager: PeerListManager;\n  private activeSpeakerManager: ActiveSpeakerManager;\n  private broadcastManager: BroadcastManager;\n  private policyChangeManager: PolicyChangeManager;\n  private requestManager: RequestManager;\n  private roomUpdateManager: RoomUpdateManager;\n  private eventEmitter: EventEmitter = new EventEmitter();\n\n  constructor(private store: IStore, private listener?: HMSUpdateListener, private audioListener?: HMSAudioListener) {\n    this.trackManager = new TrackManager(this.store, this.eventEmitter, this.listener);\n    this.peerManager = new PeerManager(this.store, this.trackManager, this.listener);\n    this.peerListManager = new PeerListManager(this.store, this.peerManager, this.trackManager, this.listener);\n    this.broadcastManager = new BroadcastManager(this.store, this.listener);\n    this.policyChangeManager = new PolicyChangeManager(this.store, this.eventEmitter);\n    this.requestManager = new RequestManager(this.store, this.listener);\n    this.activeSpeakerManager = new ActiveSpeakerManager(this.store, this.listener, this.audioListener);\n    this.roomUpdateManager = new RoomUpdateManager(this.store, this.listener);\n  }\n\n  setListener(listener?: HMSUpdateListener) {\n    this.listener = listener;\n    this.trackManager.listener = listener;\n    this.peerManager.listener = listener;\n    this.peerListManager.listener = listener;\n    this.broadcastManager.listener = listener;\n    this.requestManager.listener = listener;\n    this.activeSpeakerManager.listener = listener;\n    this.roomUpdateManager.listener = listener;\n  }\n\n  setAudioListener(audioListener?: HMSAudioListener) {\n    this.audioListener = audioListener;\n    this.activeSpeakerManager.audioListener = audioListener;\n  }\n\n  addEventListener(event: string, listener: EventListener) {\n    this.eventEmitter.addListener(event, listener);\n  }\n\n  removeEventListener(event: string, listener: EventListener) {\n    this.eventEmitter.removeListener(event, listener);\n  }\n\n  once(event: string, listener: EventListener) {\n    this.eventEmitter.once(event, listener);\n  }\n\n  handleNotification(message: { method: string; params: any }, isReconnecting = false) {\n    const method = message.method as HMSNotificationMethod;\n    const notification = message.params;\n\n    if (method !== HMSNotificationMethod.ACTIVE_SPEAKERS) {\n      HMSLogger.d(this.TAG, 'Received notification', { method, notification });\n    }\n\n    switch (method) {\n      case HMSNotificationMethod.PEER_JOIN: {\n        const peer = notification as PeerNotification;\n        this.peerManager.handlePeerJoin(peer);\n        break;\n      }\n\n      case HMSNotificationMethod.PEER_LEAVE: {\n        const peer = notification as PeerNotification;\n        this.peerManager.handlePeerLeave(peer);\n        break;\n      }\n      case HMSNotificationMethod.PEER_LIST: {\n        const peerList = notification as PeerListNotification;\n        if (isReconnecting) {\n          HMSLogger.d(this.TAG, `RECONNECT_PEER_LIST event`, peerList);\n          this.peerListManager.handleReconnectPeerList(peerList);\n        } else {\n          HMSLogger.d(this.TAG, `PEER_LIST event`, peerList);\n          this.peerListManager.handleInitialPeerList(peerList);\n        }\n        this.roomUpdateManager.onPeerList(peerList);\n        break;\n      }\n      case HMSNotificationMethod.TRACK_METADATA_ADD: {\n        this.trackManager.handleTrackMetadataAdd(notification as TrackStateNotification);\n        break;\n      }\n      case HMSNotificationMethod.TRACK_UPDATE: {\n        this.trackManager.handleTrackUpdate(notification as TrackStateNotification);\n        break;\n      }\n      case HMSNotificationMethod.ACTIVE_SPEAKERS:\n        this.activeSpeakerManager.handleActiveSpeakers(notification as SpeakerList);\n        break;\n\n      case HMSNotificationMethod.BROADCAST:\n        this.broadcastManager.handleBroadcast(notification as MessageNotification);\n        break;\n\n      case HMSNotificationMethod.POLICY_CHANGE:\n        this.policyChangeManager.handlePolicyChange(notification as PolicyParams);\n        break;\n\n      case HMSNotificationMethod.ROLE_CHANGE_REQUEST:\n        this.requestManager.handleRoleChangeRequest(notification as RoleChangeRequestParams);\n        break;\n\n      case HMSNotificationMethod.TRACK_UPDATE_REQUEST:\n        this.requestManager.handleTrackUpdateRequest(notification as TrackUpdateRequestNotification);\n        break;\n\n      case HMSNotificationMethod.CHANGE_TRACK_MUTE_STATE_UPDATE:\n        this.requestManager.handleChangeTrackStateRequest(notification as ChangeTrackMuteStateNotification);\n        break;\n\n      case HMSNotificationMethod.PEER_UPDATE:\n        this.peerManager.handlePeerUpdate(notification as PeerNotification);\n        break;\n\n      case HMSNotificationMethod.RTMP_START:\n        this.roomUpdateManager.onRTMPStart();\n        break;\n      case HMSNotificationMethod.RTMP_STOP:\n        this.roomUpdateManager.onRTMPStop();\n        break;\n      case HMSNotificationMethod.RECORDING_START:\n        this.roomUpdateManager.onRecordingStart(notification as RecordingNotification);\n        break;\n      case HMSNotificationMethod.RECORDING_STOP:\n        this.roomUpdateManager.onRecordingStop(notification as RecordingNotification);\n        break;\n      default:\n        return;\n    }\n  }\n\n  handleTrackAdd = (track: HMSRemoteTrack) => {\n    this.trackManager.handleTrackAdd(track);\n  };\n\n  handleTrackRemove = (track: HMSRemoteTrack) => {\n    this.trackManager.handleTrackRemove(track);\n  };\n}\n","import { HMSTrack, HMSTrackSource } from '../media/tracks/HMSTrack';\nimport { HMSRole } from '../interfaces/role';\nimport { Track } from '../signal/interfaces';\nimport { HMSLocalTrack } from '../media/tracks';\n\n/**\n * Interfaces for message received from BIZ Signal through Websocket.\n * These messages are handled by NotificationManager\n * which will call the corresponding HMSUpdateListener callbacks.\n */\n\nexport interface TrackStateNotification {\n  tracks: {\n    [track_id: string]: TrackState;\n  };\n  peer: PeerNotificationInfo;\n}\n\nexport interface PeerNotificationInfo {\n  peer_id: string;\n  info: Info;\n}\n\nexport interface Info {\n  name: string;\n  data: string;\n  user_id: string;\n}\n\nexport interface PolicyParams {\n  name: string;\n  known_roles: {\n    [role: string]: HMSRole;\n  };\n}\n\n/**\n * This is in a format biz sends/received the track metadata\n */\nexport class TrackState implements Track {\n  mute: boolean;\n  type: 'audio' | 'video';\n  source: HMSTrackSource;\n  description: string;\n  track_id: string;\n  stream_id: string;\n\n  constructor(track: HMSLocalTrack | Track) {\n    this.type = track.type;\n    this.source = track.source || 'regular';\n    this.description = '';\n    if (track instanceof HMSTrack) {\n      this.mute = !track.enabled;\n      this.track_id = track.publishedTrackId;\n      this.stream_id = track.stream.id;\n    } else {\n      this.mute = track.mute;\n      this.track_id = track.track_id;\n      this.stream_id = track.stream_id;\n    }\n  }\n}\n\nexport interface PeerNotification {\n  peer_id: string;\n  info: Info;\n  role: string;\n  tracks: {\n    [track_id: string]: TrackState;\n  };\n}\n\nexport interface PeerListNotification {\n  peers: {\n    [peer_id: string]: PeerNotification;\n  };\n  room: {\n    name: string;\n    recording: {\n      sfu: {\n        enabled: boolean;\n      };\n      beam: {\n        enabled: boolean;\n      };\n    };\n    streaming: {\n      enabled: boolean;\n    };\n  };\n}\n\ninterface Speaker {\n  peer_id: string;\n  track_id: string;\n  level: number;\n}\n\nexport interface SpeakerList {\n  'speaker-list': Speaker[];\n}\n\n/**\n * Represents the role change request received from the server\n */\nexport interface RoleChangeRequestParams {\n  requested_by: string;\n  role: string;\n  token: string;\n}\n\nexport interface TrackUpdateRequestNotification {\n  requested_by: string;\n  track_id: string;\n  stream_id: string;\n  mute: boolean;\n}\n\nexport interface ChangeTrackMuteStateNotification {\n  requested_by: string;\n  roles?: string[];\n  type?: 'audio' | 'video';\n  source?: HMSTrackSource;\n  value: boolean;\n}\n\nexport interface PeerLeaveRequestNotification {\n  requested_by: string;\n  reason: string;\n  room_end: boolean;\n}\n\nexport interface MessageNotification {\n  peer: {\n    peer_id: string;\n    info: {\n      name: string;\n      data: any;\n      user_id: string;\n    };\n  };\n  roles?: string[];\n  private: boolean;\n  timestamp: number;\n  info: MessageNotificationInfo;\n}\n\nexport interface SendMessage {\n  info: MessageNotificationInfo;\n  roles?: string[];\n  peer_id?: string;\n}\n\nexport interface MessageNotificationInfo {\n  sender: string;\n  message: any;\n  type: string;\n  time?: string;\n}\n\nexport interface RecordingNotification {\n  type: 'sfu' | 'Browser';\n  peer: PeerNotificationInfo;\n}\n","export enum TransportState {\n  Disconnected,\n  Connecting,\n  Joined,\n  Failed,\n  Reconnecting,\n  Leaving,\n}\n","import { HMSException } from '../error/HMSException';\nimport { HMSTrackSettings } from '../media/settings/HMSTrackSettings';\nimport { SelectedDevices } from '../device-manager';\nimport { DeviceMap } from '../interfaces';\nimport AnalyticsEvent from './AnalyticsEvent';\nimport { AnalyticsEventLevel } from './AnalyticsEventLevel';\nimport { IAnalyticsPropertiesProvider } from './IAnalyticsPropertiesProvider';\n\nexport default class AnalyticsEventFactory {\n  private static KEY_REQUESTED_AT = 'requested_at';\n  private static KEY_RESPONDED_AT = 'responded_at';\n\n  static connect(\n    error?: HMSException,\n    requestedAt: Date = new Date(),\n    respondedAt: Date = new Date(),\n    endpoint?: string,\n  ) {\n    const name = this.eventNameFor('connect', error === undefined);\n    const level = error ? AnalyticsEventLevel.ERROR : AnalyticsEventLevel.INFO;\n\n    const properties = this.getPropertiesWithError(\n      {\n        [this.KEY_REQUESTED_AT]: requestedAt?.getTime(),\n        [this.KEY_RESPONDED_AT]: respondedAt?.getTime(),\n        endpoint,\n      },\n      error,\n    );\n\n    return new AnalyticsEvent({ name, level, properties });\n  }\n\n  static disconnect(error?: HMSException) {\n    const name = 'disconnected';\n    const level = error ? AnalyticsEventLevel.ERROR : AnalyticsEventLevel.INFO;\n    const properties = this.getPropertiesWithError({}, error);\n\n    return new AnalyticsEvent({ name, level, properties });\n  }\n\n  static join(requestedAt: Date, respondedAt: Date, error?: HMSException) {\n    const name = this.eventNameFor('join', error === undefined);\n    const level = error ? AnalyticsEventLevel.ERROR : AnalyticsEventLevel.INFO;\n\n    const properties = this.getPropertiesWithError(\n      {\n        [this.KEY_REQUESTED_AT]: requestedAt.getTime(),\n        [this.KEY_RESPONDED_AT]: respondedAt.getTime(),\n      },\n      error,\n    );\n\n    return new AnalyticsEvent({ name, level, properties });\n  }\n\n  static publish({\n    devices,\n    settings,\n    error,\n  }: {\n    devices?: DeviceMap;\n    settings?: HMSTrackSettings;\n    error?: HMSException;\n  }) {\n    const name = this.eventNameFor('publish', error === undefined);\n    const level = error ? AnalyticsEventLevel.ERROR : AnalyticsEventLevel.INFO;\n    const properties = this.getPropertiesWithError(\n      {\n        devices,\n        audio: settings?.audio,\n        video: settings?.video,\n      },\n      error,\n    );\n    return new AnalyticsEvent({\n      name,\n      level,\n      properties,\n    });\n  }\n\n  static subscribeFail(error: HMSException) {\n    const name = this.eventNameFor('subscribe', false);\n    const level = AnalyticsEventLevel.ERROR;\n    const properties = error.toAnalyticsProperties();\n\n    return new AnalyticsEvent({ name, level, properties });\n  }\n\n  static leave() {\n    return new AnalyticsEvent({ name: 'leave', level: AnalyticsEventLevel.INFO });\n  }\n\n  static deviceChange({\n    selection,\n    type,\n    devices,\n    error,\n  }: {\n    selection: Partial<SelectedDevices>;\n    type?: 'change' | 'list';\n    devices: DeviceMap;\n    error?: HMSException;\n  }) {\n    const name = this.eventNameFor(error ? 'publish' : `device.${type}`, error === undefined);\n    const level = error ? AnalyticsEventLevel.ERROR : AnalyticsEventLevel.INFO;\n    const properties = this.getPropertiesWithError({ selection, devices }, error);\n    return new AnalyticsEvent({\n      name,\n      level,\n      properties,\n    });\n  }\n\n  static performance(stats: IAnalyticsPropertiesProvider) {\n    const name = 'perf.stats';\n    const level = AnalyticsEventLevel.INFO;\n    const properties = stats.toAnalyticsProperties();\n\n    return new AnalyticsEvent({ name, level, properties });\n  }\n\n  static rtcStats(stats: IAnalyticsPropertiesProvider) {\n    const name = 'rtc.stats';\n    const level = AnalyticsEventLevel.INFO;\n    const properties = stats.toAnalyticsProperties();\n\n    return new AnalyticsEvent({ name, level, properties });\n  }\n\n  private static eventNameFor(name: string, ok: boolean) {\n    const suffix = ok ? 'success' : 'failed';\n    return `${name}.${suffix}`;\n  }\n\n  private static getPropertiesWithError(initialProperties: any, error?: HMSException) {\n    if (error) {\n      initialProperties = { ...error.toAnalyticsProperties(), ...initialProperties };\n    }\n    return initialProperties;\n  }\n}\n","export class JoinParameters {\n  constructor(\n    public authToken: string,\n    public peerId: string,\n    public peerName: string,\n    public data: string,\n    public endpoint: string,\n    public autoSubscribeVideo: boolean,\n  ) {}\n}\n","export enum TransportFailureCategory {\n  ConnectFailed,\n  SignalDisconnect,\n  PublishIceConnectionFailed,\n  SubscribeIceConnectionFailed,\n}\n\nexport const Dependencies = {\n  [TransportFailureCategory.ConnectFailed]: [],\n  [TransportFailureCategory.SignalDisconnect]: [],\n  [TransportFailureCategory.PublishIceConnectionFailed]: [TransportFailureCategory.SignalDisconnect],\n  [TransportFailureCategory.SubscribeIceConnectionFailed]: [TransportFailureCategory.SignalDisconnect],\n};\n","export interface PromiseCallbacks<T> {\n  resolve: (value: T) => void;\n  reject: (reason?: any) => void;\n}\n\nexport class PromiseWithCallbacks<T> {\n  promise: Promise<T>;\n  resolve!: (value: T) => void;\n  reject!: (reason?: any) => void;\n\n  constructor(cb: (resolve: (value: T) => void, reject: (reason?: any) => void) => any) {\n    this.promise = new Promise<T>((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n      cb(resolve, reject);\n    });\n  }\n}\n","import AnalyticsEvent from '../analytics/AnalyticsEvent';\nimport AnalyticsEventFactory from '../analytics/AnalyticsEventFactory';\nimport { AnalyticsEventsService } from '../analytics/AnalyticsEventsService';\nimport { HMSException } from '../error/HMSException';\nimport { MAX_TRANSPORT_RETRIES, MAX_TRANSPORT_RETRY_DELAY } from '../utils/constants';\nimport HMSLogger from '../utils/logger';\nimport { PromiseWithCallbacks } from '../utils/promise';\nimport { TransportFailureCategory as TFC, Dependencies as TFCDependencies } from './models/TransportFailureCategory';\nimport { TransportState } from './models/TransportState';\n\n/**\n * Task which is executed by [RetryScheduler.schedule] until max retry count\n * is reached.\n *\n * Any exception raised while executing the task assumes that task is failed.\n * Failed tasks are retried if max retry count is not reached.\n *\n * @returns True if the task if successful, otherwise False\n *\n *\n */\ntype RetryTask = () => Promise<boolean>;\n\nconst TAG = '[RetryScheduler]';\n\nexport class RetryScheduler {\n  private analyticsEventsService: AnalyticsEventsService;\n  private onStateChange: (state: TransportState, error?: HMSException) => void;\n\n  private inProgress = new Map<TFC, PromiseWithCallbacks<number>>();\n  private retryTaskIds: number[] = [];\n\n  constructor(\n    analyticsEventsService: AnalyticsEventsService,\n    onStateChange: (state: TransportState, error?: HMSException) => Promise<void>,\n  ) {\n    this.analyticsEventsService = analyticsEventsService;\n    this.onStateChange = onStateChange;\n  }\n\n  async schedule(\n    category: TFC,\n    error: HMSException,\n    task: RetryTask,\n    maxFailedRetries = MAX_TRANSPORT_RETRIES,\n    changeState = true,\n  ) {\n    await this.scheduleTask(category, error, changeState, task, maxFailedRetries);\n  }\n\n  reset() {\n    this.retryTaskIds.forEach((future) => clearTimeout(future));\n    this.retryTaskIds = [];\n    this.inProgress.clear();\n  }\n\n  private async scheduleTask(\n    category: TFC,\n    error: HMSException,\n    changeState: Boolean,\n    task: RetryTask,\n    maxFailedRetries = MAX_TRANSPORT_RETRIES,\n    failedRetryCount = 0,\n  ): Promise<void> {\n    HMSLogger.d(TAG, 'schedule: ', { category: TFC[category], error });\n\n    // First schedule call\n    if (failedRetryCount === 0) {\n      const inProgressTask = this.inProgress.get(category);\n      if (inProgressTask) {\n        HMSLogger.d(TAG, `schedule: Already a task for ${TFC[category]} scheduled, waiting for its completion`);\n        await inProgressTask.promise;\n        return;\n      }\n\n      const taskPromise = new PromiseWithCallbacks<number>((_, __) => {});\n      this.inProgress.set(category, taskPromise);\n\n      this.sendEvent(error, category);\n    }\n\n    let hasFailedDependency = false;\n    const dependencies = TFCDependencies[category];\n\n    for (const dependencyIndexString in dependencies) {\n      const dependency = dependencies[parseInt(dependencyIndexString)];\n      try {\n        const dependencyTask = this.inProgress.get(dependency);\n        if (dependencyTask) {\n          HMSLogger.d(\n            TAG,\n            `schedule: Suspending retry task of ${TFC[category]}, waiting for ${TFC[dependency]} to recover`,\n          );\n          await dependencyTask.promise;\n          HMSLogger.d(\n            TAG,\n            `schedule: Resuming retry task ${TFC[category]} as it's dependency ${TFC[dependency]} is recovered`,\n          );\n        }\n      } catch (ex) {\n        HMSLogger.d(\n          TAG,\n          `schedule: Stopping retry task of ${TFC[category]} as it's dependency ${TFC[dependency]} failed to recover`,\n        );\n        hasFailedDependency = true;\n        break;\n      }\n    }\n\n    if (failedRetryCount >= maxFailedRetries || hasFailedDependency) {\n      error.description += `. [${TFC[category]}] Could not recover after ${failedRetryCount} tries`;\n\n      if (hasFailedDependency) {\n        error.description += ` Could not recover all of it's required dependencies - [${(dependencies as Array<TFC>)\n          .map((dep) => TFC[dep])\n          .toString()}]`;\n      }\n      error.isTerminal = true;\n\n      // @NOTE: Don't reject to throw error for dependencies, use onStateChange\n      // const taskPromise = this.inProgress.get(category);\n      this.inProgress.delete(category);\n      // taskPromise?.reject(error);\n      this.sendEvent(error, category);\n\n      this.reset();\n\n      if (changeState) {\n        this.onStateChange(TransportState.Failed, error);\n      } else {\n        throw error;\n      }\n\n      return;\n    }\n\n    if (changeState) {\n      this.onStateChange(TransportState.Reconnecting, error);\n    }\n\n    const delay = this.getDelayForRetryCount(failedRetryCount);\n\n    HMSLogger.i(\n      TAG,\n      `schedule: [${TFC[category]}] [failedRetryCount=${failedRetryCount}] Scheduling retry task in ${delay}ms`,\n    );\n\n    let taskSucceeded: boolean;\n    try {\n      taskSucceeded = await this.setTimeoutPromise(task, delay);\n    } catch (ex) {\n      taskSucceeded = false;\n      HMSLogger.w(TAG, `[${TFC[category]}] Un-caught exception ${ex.name} in retry-task, initiating retry`, ex);\n    }\n\n    if (taskSucceeded) {\n      const taskPromise = this.inProgress.get(category);\n      this.inProgress.delete(category);\n      taskPromise?.resolve(failedRetryCount);\n\n      if (changeState && this.inProgress.size === 0) {\n        this.onStateChange(TransportState.Joined);\n      }\n      HMSLogger.i(TAG, `schedule: [${TFC[category]}] [failedRetryCount=${failedRetryCount}] Recovered ♻️`);\n    } else {\n      await this.scheduleTask(category, error, changeState, task, maxFailedRetries, failedRetryCount + 1);\n    }\n  }\n\n  private sendEvent(error: HMSException, category: TFC) {\n    let event: AnalyticsEvent;\n    switch (category) {\n      case TFC.ConnectFailed:\n        event = AnalyticsEventFactory.connect(error);\n        break;\n      case TFC.SignalDisconnect:\n        event = AnalyticsEventFactory.disconnect(error);\n        break;\n      case TFC.PublishIceConnectionFailed:\n        event = AnalyticsEventFactory.publish({ error });\n        break;\n      case TFC.SubscribeIceConnectionFailed:\n        event = AnalyticsEventFactory.subscribeFail(error);\n        break;\n    }\n    this.analyticsEventsService.queue(event!).flush();\n  }\n\n  private getDelayForRetryCount(n: number) {\n    let delay = Math.pow(2, n);\n    const jitter = Math.random();\n    return Math.round(Math.min(delay + jitter, MAX_TRANSPORT_RETRY_DELAY) * 1000);\n  }\n\n  private async setTimeoutPromise<T>(task: () => Promise<T>, delay: number): Promise<T> {\n    return new Promise((resolve, reject) => {\n      const timeoutId = window.setTimeout(async () => {\n        try {\n          const value: T = await task();\n          value && this.retryTaskIds.splice(this.retryTaskIds.indexOf(timeoutId), 1);\n          resolve(value);\n        } catch (error) {\n          reject(error);\n        }\n      }, delay);\n\n      this.retryTaskIds.push(timeoutId);\n    });\n  }\n}\n","import HMSLogger from '../utils/logger';\nimport { Queue } from '../utils/queue';\nimport AnalyticsEvent from './AnalyticsEvent';\nimport { IAnalyticsTransportProvider } from './IAnalyticsTransportProvider';\n\nexport abstract class AnalyticsTransport {\n  abstract transportProvider: IAnalyticsTransportProvider;\n  abstract failedEvents: Queue<AnalyticsEvent>;\n\n  private get TAG() {\n    return `[${this.constructor.name}]`;\n  }\n\n  sendEvent(event: AnalyticsEvent) {\n    try {\n      this.sendSingleEvent(event);\n      this.flushFailedEvents();\n    } catch (error) {}\n  }\n\n  flushFailedEvents() {\n    try {\n      HMSLogger.d(this.TAG, 'Flushing failed events', this.failedEvents);\n      while (this.failedEvents.size() > 0) {\n        const event = this.failedEvents.dequeue();\n        if (event) this.sendSingleEvent(event);\n      }\n    } catch (error) {\n      HMSLogger.w(this.TAG, 'flushFailedEvents failed', error);\n    }\n  }\n\n  private sendSingleEvent(event: AnalyticsEvent) {\n    try {\n      HMSLogger.d(this.TAG, 'Sending event', { event });\n      this.transportProvider.sendEvent(event);\n    } catch (error) {\n      HMSLogger.w(\n        this.TAG,\n        `${this.transportProvider.constructor.name}.sendEvent failed, adding to local storage events`,\n        {\n          event,\n          error,\n        },\n      );\n      this.failedEvents.enqueue(event);\n      throw error;\n    }\n  }\n}\n","export interface IQueue<T> {\n  size(): number;\n  enqueue(item: T): void;\n  dequeue(): T | undefined;\n}\n\nexport class Queue<T> implements IQueue<T> {\n  protected storage: T[] = [];\n\n  constructor(private capacity: number = Infinity) {}\n\n  size() {\n    return this.storage.length;\n  }\n\n  enqueue(item: T) {\n    if (this.size() === this.capacity) {\n      throw Error('Queue has reached max capacity, cannot add more items');\n    }\n    this.storage.push(item);\n  }\n\n  dequeue() {\n    return this.storage.shift();\n  }\n}\n","import { ANALYTICS_BUFFER_SIZE } from '../../utils/constants';\nimport { LocalStorage } from '../../utils/local-storage';\nimport { Queue } from '../../utils/queue';\nimport AnalyticsEvent from '../AnalyticsEvent';\n\nexport class LocalStorageEvents extends Queue<AnalyticsEvent> {\n  private localStorage = new LocalStorage<AnalyticsEvent[]>('hms-analytics');\n\n  constructor() {\n    super(ANALYTICS_BUFFER_SIZE);\n    // @TODO: Currently we don't send failed events of old sessions. So reset localstorage for every session.\n    // Once support for failed events from old sessions is added, remove clear and init queue from localstorage.\n    this.localStorage.clear();\n    this.initLocalStorageQueue();\n  }\n\n  enqueue(event: AnalyticsEvent) {\n    super.enqueue(event);\n    this.localStorage.set(this.storage);\n  }\n\n  dequeue() {\n    const removedEvent = super.dequeue();\n    this.localStorage.set(this.storage);\n    return removedEvent;\n  }\n\n  private initLocalStorageQueue() {\n    this.localStorage.get()?.forEach((event) => {\n      const eventInstance = new AnalyticsEvent(event);\n      super.enqueue(eventInstance);\n    });\n  }\n}\n","import { ISignal } from '../../signal/ISignal';\nimport { AnalyticsTransport } from '../AnalyticsTransport';\nimport { LocalStorageEvents } from './LocalStoageEvents';\n\nexport class SignalAnalyticsTransport extends AnalyticsTransport {\n  failedEvents = new LocalStorageEvents();\n\n  constructor(public transportProvider: ISignal) {\n    super();\n  }\n}\n","import HMSConnection from '../connection';\nimport { RTC_STATS_MONITOR_INTERVAL } from '../utils/constants';\nimport HMSLogger from '../utils/logger';\nimport { sleep } from '../utils/timer-utils';\nimport { TypedEventEmitter } from '../utils/typed-event-emitter';\nimport { RTCStats } from './RTCStats';\n\nexport class RTCStatsMonitor extends TypedEventEmitter<{ RTC_STATS_CHANGE: RTCStats }> {\n  private isMonitored: boolean = false;\n  constructor(private readonly connections: HMSConnection[], private readonly interval = RTC_STATS_MONITOR_INTERVAL) {\n    super();\n  }\n\n  async start() {\n    this.stop();\n    this.isMonitored = true;\n    HMSLogger.d('Starting RTCStatsMonitor');\n    this.startLoop().then(() => HMSLogger.d('Stopping RTCStatsMonitor'));\n  }\n\n  stop() {\n    this.isMonitored = false;\n  }\n\n  private async startLoop() {\n    while (this.isMonitored) {\n      await this.handleConnectionsStats();\n      await sleep(this.interval);\n    }\n  }\n\n  private async handleConnectionsStats() {\n    let totalPacketsLost = 0;\n    let availableIncomingBitrate = 0;\n    let availableOutgoingBitrate = 0;\n    for (const conn of this.connections) {\n      const stats = await conn.getStats();\n      stats.forEach((stat) => {\n        if (stat.packetsLost) totalPacketsLost += stat.packetsLost;\n        if (stat.availableIncomingBitrate) availableIncomingBitrate = Number(stat.availableIncomingBitrate);\n        if (stat.availableOutgoingBitrate) availableOutgoingBitrate = Number(stat.availableOutgoingBitrate);\n      });\n    }\n\n    this.emit('RTC_STATS_CHANGE', {\n      packetsLost: totalPacketsLost,\n      availableIncomingBitrate,\n      availableOutgoingBitrate,\n    });\n  }\n}\n","import { IStore } from '../sdk/store/IStore';\nimport { RTCStats } from '../rtc-stats';\nimport { TypedEventEmitter } from '../utils/typed-event-emitter';\nimport { HMSRemoteVideoTrack } from '../media/tracks';\nimport HMSLogger from '../utils/logger';\n\ninterface TrackDegradationControllerEvents {\n  TRACK_DEGRADED: HMSRemoteVideoTrack;\n  TRACK_RESTORED: HMSRemoteVideoTrack;\n}\n\n/** @see docs/Subscribe-Degradation.md */\nexport class TrackDegradationController extends TypedEventEmitter<TrackDegradationControllerEvents> {\n  private readonly TAG = '[TrackDegradationController]';\n  private readonly PACKETS_LOST_THRESHOLD: number;\n  private readonly MIN_DEGRADE_GRACE_PERIOD: number;\n  private readonly MIN_RECOVER_GRACE_PERIOD: number;\n  private readonly MAX_RECOVER_GRACE_PERIOD = 120;\n\n  private recoveringTrack?: HMSRemoteVideoTrack;\n  private degradeGracePeriod: number;\n  private recoverGracePeriod: number;\n  private recoverAttemptCount = 0;\n  private packetsLost = 0;\n\n  private get isAttemptingRecover() {\n    return Boolean(this.recoveringTrack);\n  }\n\n  constructor(private store: IStore) {\n    super();\n\n    const storeParams = this.store.getSubscribeDegradationParams()!;\n    this.PACKETS_LOST_THRESHOLD = storeParams.packetLossThreshold;\n    this.MIN_DEGRADE_GRACE_PERIOD = storeParams.degradeGracePeriodSeconds;\n    this.MIN_RECOVER_GRACE_PERIOD = storeParams.recoverGracePeriodSeconds;\n\n    this.degradeGracePeriod = this.MIN_DEGRADE_GRACE_PERIOD;\n    this.recoverGracePeriod = this.MIN_RECOVER_GRACE_PERIOD;\n  }\n\n  handleRtcStatsChange(rtcStats: RTCStats) {\n    /**\n     * rtcStats.packetLost is a running counter\n     * Degrade if packetsLost increase is greater than threshold\n     */\n    const shouldDegrade = rtcStats.packetsLost > this.packetsLost + this.PACKETS_LOST_THRESHOLD;\n    this.packetsLost = rtcStats.packetsLost;\n    shouldDegrade ? this.degrade() : this.recover();\n  }\n\n  degrade() {\n    if (this.degradeGracePeriod > 0) {\n      this.degradeGracePeriod--;\n      return;\n    }\n\n    if (this.isAttemptingRecover) {\n      return this.cancelRecovery();\n    }\n\n    HMSLogger.d(this.TAG, 'Packet loss increased, Degrading', { packetsLost: this.packetsLost });\n\n    this.degradeActiveTracksByHalf();\n\n    this.degradeGracePeriod = this.MIN_DEGRADE_GRACE_PERIOD;\n    this.recoverGracePeriod = this.MIN_RECOVER_GRACE_PERIOD;\n  }\n\n  recover() {\n    this.degradeGracePeriod = this.MIN_DEGRADE_GRACE_PERIOD;\n    if (this.recoverGracePeriod > 0) {\n      this.recoverGracePeriod--;\n      return;\n    }\n\n    this.recoveringTrack = this.getActiveTracks(true).find((track) => track.degraded);\n    if (!this.recoveringTrack) {\n      return;\n    }\n\n    HMSLogger.d(this.TAG, 'Packet lost stable, recovering track', this.recoveringTrack);\n    this.recoveringTrack.setDegraded(false);\n    this.emit('TRACK_RESTORED', this.recoveringTrack);\n    this.recoverGracePeriod = this.MIN_RECOVER_GRACE_PERIOD;\n  }\n\n  private degradeActiveTracksByHalf() {\n    const activeTracks = this.getActiveTracks(false);\n    if (!activeTracks.length) return;\n    HMSLogger.d(this.TAG, { activeTracks: [...activeTracks] });\n\n    let halfCount = Math.ceil(activeTracks.length / 2);\n    while (halfCount--) {\n      const track = activeTracks.pop();\n      track!.setDegraded(true);\n      this.emit('TRACK_DEGRADED', track!);\n    }\n  }\n\n  private getActiveTracks(includeDegraded: boolean) {\n    return this.store\n      .getRemoteVideoTracks()\n      .filter((track) => track.hasSinks() && (!track.degraded || includeDegraded))\n      .sort((trackA, trackB) => {\n        const comparators = this.store.getComparator().getTrackComparators();\n        /**\n         * Sort in descending order of importance.\n         * Importance: Screenshare > Role Priority > Speaker > TrackId\n         */\n        return (\n          -1 *\n          (comparators.screenShare(trackA, trackB) ||\n            comparators.rolePriority(trackA, trackB) ||\n            comparators.peerAudioLevel(trackA, trackB) ||\n            this.store.getComparator().stringComparator(trackA.trackId, trackB.trackId))\n        );\n      })\n      .slice(0); // Shallow copy - clone array, keep track references\n  }\n\n  private cancelRecovery() {\n    if (this.recoveringTrack) {\n      this.recoveringTrack.setDegraded(true);\n      this.emit('TRACK_DEGRADED', this.recoveringTrack);\n    }\n    this.recoveringTrack = undefined;\n    this.recoverAttemptCount++;\n    this.recoverGracePeriod = this.getDelayForRecoverCount(this.recoverAttemptCount);\n    this.degradeGracePeriod = this.MIN_DEGRADE_GRACE_PERIOD;\n    HMSLogger.d(this.TAG, 'Recover Attempt Failed', {\n      count: this.recoverAttemptCount,\n      delay: this.recoverGracePeriod,\n    });\n  }\n\n  private getDelayForRecoverCount(count: number) {\n    const delay = this.MIN_RECOVER_GRACE_PERIOD + this.MIN_RECOVER_GRACE_PERIOD * count;\n    return Math.min(delay, this.MAX_RECOVER_GRACE_PERIOD);\n  }\n}\n","import ITransportObserver from './ITransportObserver';\nimport ITransport, { IFetchAVTrackOptions } from './ITransport';\nimport HMSPublishConnection from '../connection/publish';\nimport HMSSubscribeConnection from '../connection/subscribe';\nimport InitService from '../signal/init';\nimport { ISignalEventsObserver } from '../signal/ISignalEventsObserver';\nimport JsonRpcSignal from '../signal/jsonrpc';\nimport { HMSConnectionRole, HMSTrickle } from '../connection/model';\nimport { IPublishConnectionObserver } from '../connection/publish/IPublishConnectionObserver';\nimport ISubscribeConnectionObserver from '../connection/subscribe/ISubscribeConnectionObserver';\nimport { HMSTrack, HMSLocalTrack } from '../media/tracks';\nimport { HMSException } from '../error/HMSException';\nimport { PromiseCallbacks } from '../utils/promise';\nimport {\n  MAX_TRANSPORT_RETRIES,\n  RENEGOTIATION_CALLBACK_ID,\n  SUBSCRIBE_ICE_CONNECTION_CALLBACK_ID,\n  SUBSCRIBE_TIMEOUT,\n} from '../utils/constants';\nimport HMSLocalStream from '../media/streams/HMSLocalStream';\nimport HMSLogger from '../utils/logger';\nimport { HMSVideoTrackSettings, HMSAudioTrackSettings, HMSTrackSettings } from '../media/settings';\nimport { TrackState } from '../notification-manager';\nimport { TransportState } from './models/TransportState';\nimport { ErrorFactory, HMSAction } from '../error/ErrorFactory';\nimport analyticsEventsService from '../analytics/AnalyticsEventsService';\nimport AnalyticsEventFactory from '../analytics/AnalyticsEventFactory';\nimport { JoinParameters } from './models/JoinParameters';\nimport { InitConfig } from '../signal/init/models';\nimport { TransportFailureCategory } from './models/TransportFailureCategory';\nimport { RetryScheduler } from './RetryScheduler';\nimport { userAgent } from '../utils/support';\nimport { ErrorCodes } from '../error/ErrorCodes';\nimport { SignalAnalyticsTransport } from '../analytics/signal-transport/SignalAnalyticsTransport';\nimport { HMSPeer, HMSRoleChangeRequest } from '../interfaces';\nimport { RTCStatsMonitor } from '../rtc-stats';\nimport { TrackDegradationController } from '../degradation';\nimport { IStore } from '../sdk/store';\nimport { DeviceManager } from '../device-manager';\nimport { MultiTrackUpdateRequestParams, TrackUpdateRequestParams } from '../signal/interfaces';\nimport Message from '../sdk/models/HMSMessage';\nimport { ISignal } from '../signal/ISignal';\nimport { RTMPRecordingConfig } from '../interfaces/rtmp-recording-config';\n\nconst TAG = '[HMSTransport]:';\n\n// @DISCUSS: action and extra are not used at all.\ninterface CallbackTriple {\n  promise: PromiseCallbacks<boolean>;\n  action: HMSAction;\n  extra: any;\n}\n\nexport default class HMSTransport implements ITransport {\n  private state: TransportState = TransportState.Disconnected;\n  private trackStates: Map<string, TrackState> = new Map();\n  private publishConnection: HMSPublishConnection | null = null;\n  private subscribeConnection: HMSSubscribeConnection | null = null;\n  private initConfig?: InitConfig;\n  private endpoint!: string;\n  private joinParameters?: JoinParameters;\n  private retryScheduler = new RetryScheduler(analyticsEventsService, async (state, error) => {\n    if (state !== this.state) {\n      this.state = state;\n      await this.observer.onStateChange(this.state, error);\n    }\n  });\n  private subscribeConnStatsMonitor?: RTCStatsMonitor;\n  private trackDegradationController?: TrackDegradationController;\n\n  constructor(private observer: ITransportObserver, private deviceManager: DeviceManager, private store: IStore) {}\n\n  /**\n   * Map of callbacks used to wait for an event to fire.\n   * Used here for:\n   *  1. publish/unpublish waits for [IPublishConnectionObserver.onRenegotiationNeeded] to complete\n   */\n  private readonly callbacks = new Map<string, CallbackTriple>();\n\n  private signalObserver: ISignalEventsObserver = {\n    onOffer: async (jsep: RTCSessionDescriptionInit) => {\n      try {\n        await this.subscribeConnection!.setRemoteDescription(jsep);\n        HMSLogger.d(\n          TAG,\n          `[SUBSCRIBE] Adding ${this.subscribeConnection!.candidates.length} ice-candidates`,\n          this.subscribeConnection!.candidates,\n        );\n        for (const candidate of this.subscribeConnection!.candidates) {\n          await this.subscribeConnection!.addIceCandidate(candidate);\n        }\n        this.subscribeConnection!.candidates.length = 0;\n        const answer = await this.subscribeConnection!.createAnswer();\n        await this.subscribeConnection!.setLocalDescription(answer);\n        this.signal.answer(answer);\n        HMSLogger.d(TAG, '[role=SUBSCRIBE] onOffer renegotiation DONE ✅');\n      } catch (err) {\n        HMSLogger.d(TAG, '[role=SUBSCRIBE] onOffer renegotiation FAILED ❌');\n        this.state = TransportState.Failed;\n        let ex: HMSException;\n        if (err instanceof HMSException) {\n          ex = err;\n        } else {\n          ex = ErrorFactory.GenericErrors.Unknown(HMSAction.PUBLISH, (err as Error).message);\n        }\n\n        analyticsEventsService.queue(AnalyticsEventFactory.subscribeFail(ex)).flush();\n        throw ex;\n      }\n    },\n\n    onTrickle: async (trickle: HMSTrickle) => {\n      const connection =\n        trickle.target === HMSConnectionRole.Publish ? this.publishConnection! : this.subscribeConnection!;\n      if (connection.remoteDescription === null) {\n        // ICE candidates can't be added without any remote session description\n        connection.candidates.push(trickle.candidate);\n      } else {\n        await connection.addIceCandidate(trickle.candidate);\n      }\n    },\n\n    onNotification: (message: Object) => this.observer.onNotification(message),\n\n    onServerError: async (error: HMSException) => {\n      await this.leave();\n      await this.observer.onStateChange(TransportState.Failed, error);\n    },\n\n    onFailure: (exception: HMSException) => {\n      // @DISCUSS: Should we remove this? Pong failure would have already scheduled signal retry.\n      if (this.joinParameters) {\n        this.retryScheduler.schedule(\n          TransportFailureCategory.SignalDisconnect,\n          exception,\n          this.retrySignalDisconnectTask,\n        );\n      }\n    },\n\n    onOffline: async () => {\n      HMSLogger.d(TAG, 'socket offline', TransportState[this.state]);\n      try {\n        if (this.state !== TransportState.Leaving && this.joinParameters) {\n          this.retryScheduler.schedule(\n            TransportFailureCategory.SignalDisconnect,\n            ErrorFactory.WebSocketConnectionErrors.WebSocketConnectionLost(\n              HMSAction.RECONNECT_SIGNAL,\n              'Network offline',\n            ),\n            this.retrySignalDisconnectTask,\n          );\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    },\n\n    onOnline: () => {\n      HMSLogger.d(TAG, 'socket online', TransportState[this.state]);\n      this.analyticsSignalTransport.flushFailedEvents();\n    },\n  };\n\n  private signal: ISignal = new JsonRpcSignal(this.signalObserver);\n  private analyticsSignalTransport = new SignalAnalyticsTransport(this.signal);\n\n  private publishConnectionObserver: IPublishConnectionObserver = {\n    onRenegotiationNeeded: async () => {\n      await this.performPublishRenegotiation();\n    },\n\n    onIceConnectionChange: async (newState: RTCIceConnectionState) => {\n      HMSLogger.d('publisher ice connection state change, ', newState);\n\n      // @TODO: Uncomment this and remove connectionstatechange\n      if (newState === 'failed') {\n        // await this.handleIceConnectionFailure(HMSConnectionRole.Publish);\n      }\n    },\n\n    // @TODO(eswar): Remove this. Use iceconnectionstate change with interval and threshold.\n    onConnectionStateChange: async (newState: RTCPeerConnectionState) => {\n      HMSLogger.d('publisher connection state change, ', newState);\n\n      if (newState === 'failed') {\n        await this.handleIceConnectionFailure(HMSConnectionRole.Publish);\n      }\n    },\n  };\n\n  private subscribeConnectionObserver: ISubscribeConnectionObserver = {\n    onApiChannelMessage: (message: string) => {\n      this.observer.onNotification(JSON.parse(message));\n    },\n\n    onTrackAdd: (track: HMSTrack) => {\n      HMSLogger.d(TAG, '[Subscribe] onTrackAdd', track);\n      this.observer.onTrackAdd(track);\n    },\n\n    onTrackRemove: (track: HMSTrack) => {\n      HMSLogger.d(TAG, '[Subscribe] onTrackRemove', track);\n      this.observer.onTrackRemove(track);\n    },\n\n    onIceConnectionChange: async (newState: RTCIceConnectionState) => {\n      HMSLogger.d('subscriber ice connection state change, ', newState);\n      if (newState === 'failed') {\n        // await this.handleIceConnectionFailure(HMSConnectionRole.Subscribe);\n      }\n\n      if (newState === 'connected') {\n        const callback = this.callbacks.get(SUBSCRIBE_ICE_CONNECTION_CALLBACK_ID);\n        this.callbacks.delete(SUBSCRIBE_ICE_CONNECTION_CALLBACK_ID);\n\n        if (callback) {\n          callback.promise.resolve(true);\n        }\n      }\n    },\n\n    // @TODO(eswar): Remove this. Use iceconnectionstate change with interval and threshold.\n    onConnectionStateChange: async (newState: RTCPeerConnectionState) => {\n      HMSLogger.d('subscriber connection state change, ', newState);\n      if (newState === 'failed') {\n        await this.handleIceConnectionFailure(HMSConnectionRole.Subscribe);\n      }\n\n      if (newState === 'connected') {\n        const callback = this.callbacks.get(SUBSCRIBE_ICE_CONNECTION_CALLBACK_ID);\n        this.callbacks.delete(SUBSCRIBE_ICE_CONNECTION_CALLBACK_ID);\n\n        if (callback) {\n          callback.promise.resolve(true);\n        }\n      }\n    },\n  };\n\n  async getLocalScreen(\n    videoSettings: HMSVideoTrackSettings,\n    audioSettings: HMSAudioTrackSettings,\n  ): Promise<Array<HMSLocalTrack>> {\n    try {\n      return await HMSLocalStream.getLocalScreen(videoSettings, audioSettings);\n    } catch (error) {\n      if (error instanceof HMSException) {\n        analyticsEventsService\n          .queue(\n            AnalyticsEventFactory.publish({\n              error,\n              devices: this.deviceManager.getDevices(),\n              settings: new HMSTrackSettings(videoSettings, audioSettings, false),\n            }),\n          )\n          .flush();\n      }\n      throw error;\n    }\n  }\n\n  async getLocalTracks(settings: HMSTrackSettings): Promise<Array<HMSLocalTrack>> {\n    try {\n      return await HMSLocalStream.getLocalTracks(settings);\n    } catch (error) {\n      if (error instanceof HMSException) {\n        analyticsEventsService\n          .queue(\n            AnalyticsEventFactory.publish({\n              devices: this.deviceManager.getDevices(),\n              error,\n              settings,\n            }),\n          )\n          .flush();\n      }\n      throw error;\n    }\n  }\n\n  async getEmptyLocalTracks(\n    fetchTrackOptions: IFetchAVTrackOptions = { audio: true, video: true },\n    settings?: HMSTrackSettings,\n  ): Promise<Array<HMSLocalTrack>> {\n    try {\n      const tracks = await HMSLocalStream.getEmptyLocalTracks(fetchTrackOptions, settings);\n      return tracks;\n    } catch (error) {\n      if (error instanceof HMSException) {\n        analyticsEventsService\n          .queue(\n            AnalyticsEventFactory.publish({\n              devices: this.deviceManager.getDevices(),\n              error,\n              settings,\n            }),\n          )\n          .flush();\n      }\n      throw error;\n    }\n  }\n\n  async join(\n    authToken: string,\n    peerId: string,\n    customData: { name: string; metaData: string },\n    initEndpoint: string = 'https://prod-init.100ms.live/init',\n    autoSubscribeVideo: boolean = false,\n  ): Promise<void> {\n    if (this.state === TransportState.Failed) {\n      this.state = TransportState.Disconnected;\n    }\n\n    if (this.state !== TransportState.Disconnected && this.state !== TransportState.Reconnecting) {\n      throw ErrorFactory.WebsocketMethodErrors.AlreadyJoined(HMSAction.JOIN, `Cannot join a meeting in ${this.state}`);\n    }\n\n    if (this.state === TransportState.Disconnected) {\n      this.state = TransportState.Connecting;\n      this.observer.onStateChange(this.state);\n    }\n\n    this.joinParameters = new JoinParameters(\n      authToken,\n      peerId,\n      customData.name,\n      customData.metaData,\n      initEndpoint,\n      autoSubscribeVideo,\n    );\n\n    HMSLogger.d(TAG, 'join: started ⏰');\n    const joinRequestedAt = new Date();\n    try {\n      if (!this.signal.isConnected || !this.initConfig) {\n        await this.connect(authToken, initEndpoint, peerId);\n      }\n\n      if (this.initConfig) {\n        await this.connectionJoin(\n          customData.name,\n          customData.metaData,\n          this.initConfig.rtcConfiguration,\n          autoSubscribeVideo,\n        );\n      }\n    } catch (error) {\n      HMSLogger.e(TAG, `join: failed ❌ [token=${authToken}]`, error);\n      this.state = TransportState.Failed;\n      if (error instanceof HMSException) {\n        analyticsEventsService.queue(AnalyticsEventFactory.join(joinRequestedAt, new Date(), error)).flush();\n      }\n      const ex = error as HMSException;\n      ex.isTerminal = ex.code === 500;\n      await this.observer.onStateChange(this.state, ex);\n      throw ex;\n    }\n\n    HMSLogger.d(TAG, '✅ join: successful');\n    this.state = TransportState.Joined;\n    this.observer.onStateChange(this.state);\n  }\n\n  async connect(token: string, endpoint: string, peerId: string) {\n    try {\n      return await this.internalConnect(token, endpoint, peerId);\n    } catch (error) {\n      const shouldRetry =\n        error instanceof HMSException &&\n        ([\n          ErrorCodes.WebSocketConnectionErrors.WEBSOCKET_CONNECTION_LOST,\n          ErrorCodes.InitAPIErrors.ENDPOINT_UNREACHABLE,\n          ErrorCodes.InitAPIErrors.CONNECTION_LOST,\n          ErrorCodes.InitAPIErrors.HTTP_ERROR,\n        ].includes(error.code) ||\n          error.code.toString().startsWith('5') ||\n          error.code.toString().startsWith('429'));\n\n      if (shouldRetry) {\n        const task = async () => {\n          await this.internalConnect(token, endpoint, peerId);\n          return Boolean(this.initConfig && this.initConfig.endpoint);\n        };\n\n        await this.retryScheduler.schedule(\n          TransportFailureCategory.ConnectFailed,\n          error as HMSException,\n          task,\n          MAX_TRANSPORT_RETRIES,\n          false,\n        );\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  async leave(): Promise<void> {\n    analyticsEventsService.removeTransport(this.analyticsSignalTransport);\n\n    this.retryScheduler.reset();\n    this.joinParameters = undefined;\n\n    try {\n      this.state = TransportState.Leaving;\n      this.subscribeConnStatsMonitor?.stop();\n      this.subscribeConnStatsMonitor?.removeAllListeners();\n      this.trackDegradationController?.removeAllListeners();\n      await this.publishConnection?.close();\n      await this.subscribeConnection?.close();\n      if (this.signal.isConnected) {\n        this.signal.leave();\n        await this.signal.close();\n      }\n    } catch (err) {\n      if (err instanceof HMSException) {\n        analyticsEventsService.queue(AnalyticsEventFactory.disconnect(err)).flush();\n      }\n      HMSLogger.e(TAG, 'leave: FAILED ❌', err);\n    } finally {\n      this.state = TransportState.Disconnected;\n      this.observer.onStateChange(this.state);\n    }\n  }\n\n  async publish(tracks: Array<HMSLocalTrack>): Promise<void> {\n    for (const track of tracks) {\n      try {\n        await this.publishTrack(track);\n      } catch (error) {\n        if (error instanceof HMSException) {\n          analyticsEventsService\n            .queue(\n              AnalyticsEventFactory.publish({\n                devices: this.deviceManager.getDevices(),\n                error,\n              }),\n            )\n            .flush();\n        }\n      }\n    }\n  }\n\n  async unpublish(tracks: Array<HMSLocalTrack>): Promise<void> {\n    for (const track of tracks) {\n      await this.unpublishTrack(track);\n    }\n  }\n\n  async sendMessage(message: Message) {\n    await this.signal.broadcast(message);\n  }\n\n  /**\n   * TODO: check if track.publishedTrackId be used instead of the hack to match with track with same type and\n   * source. The hack won't work if there are multiple tracks with same source and type.\n   */\n  trackUpdate(track: HMSLocalTrack) {\n    const currentTrackStates = Array.from(this.trackStates.values());\n    const originalTrackState = currentTrackStates.find(\n      (trackState) => track.type === trackState.type && track.source === trackState.source,\n    );\n    if (originalTrackState) {\n      const newTrackState = new TrackState({\n        ...originalTrackState,\n        mute: !track.enabled,\n      });\n      this.trackStates.set(originalTrackState.track_id, newTrackState);\n      HMSLogger.d(TAG, 'Track Update', this.trackStates, track);\n      this.signal.trackUpdate(new Map([[originalTrackState.track_id, newTrackState]]));\n    }\n  }\n\n  async changeRole(forPeer: HMSPeer, toRole: string, force: boolean = false) {\n    await this.signal.requestRoleChange({\n      requested_for: forPeer.peerId,\n      role: toRole,\n      force,\n    });\n  }\n\n  async acceptRoleChange(request: HMSRoleChangeRequest) {\n    await this.signal.acceptRoleChangeRequest({ role: request.role.name, token: request.token });\n  }\n\n  async endRoom(lock: boolean, reason: string) {\n    await this.signal.endRoom(lock, reason);\n  }\n\n  async removePeer(peerId: string, reason: string) {\n    await this.signal.removePeer({ requested_for: peerId, reason });\n  }\n\n  async startRTMPOrRecording(params: RTMPRecordingConfig) {\n    if (params.rtmpURLs?.length) {\n      await this.signal.startRTMPOrRecording({\n        meeting_url: params.meetingURL,\n        record: params.record,\n        rtmp_urls: params.rtmpURLs,\n      });\n    } else {\n      await this.signal.startRTMPOrRecording({\n        meeting_url: params.meetingURL,\n        record: params.record,\n      });\n    }\n  }\n\n  async stopRTMPOrRecording() {\n    await this.signal.stopRTMPAndRecording();\n  }\n\n  async changeTrackState(trackUpdateRequest: TrackUpdateRequestParams) {\n    await this.signal.requestTrackStateChange(trackUpdateRequest);\n  }\n\n  async changeMultiTrackState(trackUpdateRequest: MultiTrackUpdateRequestParams) {\n    await this.signal.requestMultiTrackStateChange(trackUpdateRequest);\n  }\n\n  private async publishTrack(track: HMSLocalTrack): Promise<void> {\n    track.publishedTrackId = track.nativeTrack.id;\n    HMSLogger.d(TAG, `⏳ publishTrack: trackId=${track.trackId}, toPublishTrackId=${track.publishedTrackId}`, track);\n    this.trackStates.set(track.publishedTrackId, new TrackState(track));\n\n    const p = new Promise<boolean>((resolve, reject) => {\n      this.callbacks.set(RENEGOTIATION_CALLBACK_ID, {\n        promise: { resolve, reject },\n        action: HMSAction.PUBLISH,\n        extra: {},\n      });\n    });\n    const stream = track.stream as HMSLocalStream;\n    stream.setConnection(this.publishConnection!);\n    const simulcastLayers = this.store.getSimulcastLayers(track.source!);\n    stream.addTransceiver(track, simulcastLayers);\n    HMSLogger.time(`publish-${track.trackId}-${track.type}`);\n    await p;\n    HMSLogger.timeEnd(`publish-${track.trackId}-${track.type}`);\n    // add track to store after publish\n    this.store.addTrack(track);\n\n    // @ts-ignore\n    const maxBitrate = track.settings.maxBitrate;\n    if (maxBitrate) {\n      await stream\n        .setMaxBitrate(maxBitrate, track)\n        .then(() => {\n          HMSLogger.i(TAG, `Setting maxBitrate for ${track.source} ${track.type} to ${maxBitrate} kpbs`);\n        })\n        .catch((error) => HMSLogger.e(TAG, 'Failed setting maxBitrate', error));\n    }\n\n    HMSLogger.d(TAG, `✅ publishTrack: trackId=${track.trackId}`, track, this.callbacks);\n  }\n\n  private async unpublishTrack(track: HMSLocalTrack): Promise<void> {\n    HMSLogger.d(TAG, `⏳ unpublishTrack: trackId=${track.trackId}`, track);\n    if (this.trackStates.has(track.publishedTrackId)) {\n      this.trackStates.delete(track.publishedTrackId);\n    } else {\n      // TODO: hotfix to unpublish replaced video track id, solve it properly\n      // it won't work when there are multiple regular video tracks, hmslocalvideotrack can store\n      // the original initial track id for a proper fix\n      const currentTrackStates = Array.from(this.trackStates.values());\n      const originalTrackState = currentTrackStates.find(\n        (trackState) => track.type === trackState.type && track.source === trackState.source,\n      );\n      if (originalTrackState) {\n        this.trackStates.delete(originalTrackState.track_id);\n      }\n    }\n    const p = new Promise<boolean>((resolve, reject) => {\n      this.callbacks.set(RENEGOTIATION_CALLBACK_ID, {\n        promise: { resolve, reject },\n        action: HMSAction.UNPUBLISH,\n        extra: {},\n      });\n    });\n    const stream = track.stream as HMSLocalStream;\n    stream.removeSender(track);\n    await p;\n    await track.cleanup();\n    // remove track from store on unpublish\n    this.store.removeTrack(track.trackId);\n    HMSLogger.d(TAG, `✅ unpublishTrack: trackId=${track.trackId}`, this.callbacks);\n  }\n\n  private async connectionJoin(\n    name: string,\n    data: string,\n    config: RTCConfiguration,\n    autoSubscribeVideo: boolean,\n    constraints: RTCOfferOptions = { offerToReceiveAudio: false, offerToReceiveVideo: false },\n  ) {\n    this.publishConnection = new HMSPublishConnection(this.signal, config, this.publishConnectionObserver, this);\n    this.subscribeConnection = new HMSSubscribeConnection(this.signal, config, this.subscribeConnectionObserver);\n\n    try {\n      HMSLogger.d(TAG, '⏳ join: Negotiating over PUBLISH connection');\n      const offer = await this.publishConnection!.createOffer(constraints, new Map());\n      await this.publishConnection!.setLocalDescription(offer);\n      const answer = await this.signal.join(name, data, offer, !autoSubscribeVideo);\n      await this.publishConnection!.setRemoteDescription(answer);\n      for (const candidate of this.publishConnection!.candidates || []) {\n        await this.publishConnection!.addIceCandidate(candidate);\n      }\n\n      this.publishConnection!.initAfterJoin();\n      await this.initRtcStatsMonitor();\n      HMSLogger.d(TAG, '✅ join: Negotiated over PUBLISH connection');\n    } catch (error) {\n      this.state = TransportState.Failed;\n      throw error;\n    }\n  }\n\n  private async performPublishRenegotiation(constraints?: RTCOfferOptions) {\n    HMSLogger.d(TAG, `⏳ [role=PUBLISH] onRenegotiationNeeded START`, this.trackStates);\n    const callback = this.callbacks.get(RENEGOTIATION_CALLBACK_ID);\n    this.callbacks.delete(RENEGOTIATION_CALLBACK_ID);\n\n    try {\n      const offer = await this.publishConnection!.createOffer(constraints, this.trackStates);\n      await this.publishConnection!.setLocalDescription(offer);\n      HMSLogger.time(`renegotiation-offer-exchange`);\n      const answer = await this.signal.offer(offer, this.trackStates);\n      HMSLogger.timeEnd(`renegotiation-offer-exchange`);\n      await this.publishConnection!.setRemoteDescription(answer);\n      callback!.promise.resolve(true);\n      HMSLogger.d(TAG, `[role=PUBLISH] onRenegotiationNeeded DONE ✅`);\n    } catch (err) {\n      let ex: HMSException;\n      if (err instanceof HMSException) {\n        ex = err;\n      } else {\n        ex = ErrorFactory.GenericErrors.Unknown(HMSAction.PUBLISH, (err as Error).message);\n      }\n\n      callback!.promise.reject(ex);\n      HMSLogger.d(TAG, `[role=PUBLISH] onRenegotiationNeeded FAILED ❌`);\n    }\n  }\n\n  private async handleIceConnectionFailure(role: HMSConnectionRole) {\n    if (role === HMSConnectionRole.Publish) {\n      this.retryScheduler.schedule(\n        TransportFailureCategory.PublishIceConnectionFailed,\n        ErrorFactory.WebrtcErrors.ICEFailure(HMSAction.PUBLISH),\n        this.retryPublishIceFailedTask,\n      );\n    } else {\n      this.retryScheduler.schedule(\n        TransportFailureCategory.SubscribeIceConnectionFailed,\n        ErrorFactory.WebrtcErrors.ICEFailure(HMSAction.SUBSCRIBE),\n        this.retrySubscribeIceFailedTask,\n        1,\n      );\n    }\n  }\n\n  private async internalConnect(token: string, endpoint: string, peerId: string) {\n    HMSLogger.d(TAG, 'connect: started ⏰');\n    const connectRequestedAt = new Date();\n    try {\n      this.initConfig = await InitService.fetchInitConfig(token, endpoint);\n      await this.openSignal(token, peerId);\n      HMSLogger.d(TAG, 'Adding Analytics Transport: JsonRpcSignal');\n      analyticsEventsService.addTransport(this.analyticsSignalTransport);\n      analyticsEventsService.flush();\n    } catch (error) {\n      analyticsEventsService\n        .queue(AnalyticsEventFactory.connect(error as HMSException, connectRequestedAt, new Date(), endpoint))\n        .flush();\n      HMSLogger.d(TAG, '❌ internal connect: failed', error);\n      throw error;\n    }\n  }\n\n  private async openSignal(token: string, peerId: string) {\n    if (!this.initConfig) {\n      throw ErrorFactory.WebSocketConnectionErrors.GenericConnect(HMSAction.INIT, 'Init Config not found');\n    }\n\n    HMSLogger.d(TAG, '⏳ internal connect: connecting to ws endpoint', this.initConfig.endpoint);\n    const url = new URL(this.initConfig.endpoint);\n    url.searchParams.set('peer', peerId);\n    url.searchParams.set('token', token);\n    url.searchParams.set('user_agent', userAgent);\n    this.endpoint = url.toString();\n    await this.signal.open(this.endpoint);\n    HMSLogger.d(TAG, '✅ internal connect: connected to ws endpoint');\n  }\n\n  private async initRtcStatsMonitor() {\n    if (this.store.getSubscribeDegradationParams()) {\n      this.subscribeConnStatsMonitor = new RTCStatsMonitor([this.subscribeConnection!]);\n      this.trackDegradationController = new TrackDegradationController(this.store);\n      this.subscribeConnStatsMonitor.on('RTC_STATS_CHANGE', (stats) =>\n        this.trackDegradationController?.handleRtcStatsChange(stats),\n      );\n      this.trackDegradationController.on('TRACK_DEGRADED', this.observer.onTrackDegrade);\n      this.trackDegradationController.on('TRACK_RESTORED', this.observer.onTrackRestore);\n      await this.subscribeConnStatsMonitor.start();\n    }\n  }\n\n  private retryPublishIceFailedTask = async () => {\n    if (\n      this.publishConnection!.iceConnectionState !== 'connected' ||\n      this.publishConnection!.connectionState !== 'connected'\n    ) {\n      const p = new Promise<boolean>((resolve, reject) => {\n        this.callbacks.set(RENEGOTIATION_CALLBACK_ID, {\n          promise: { resolve, reject },\n          action: HMSAction.RESTART_ICE,\n          extra: {},\n        });\n      });\n      await this.performPublishRenegotiation({ iceRestart: true });\n      await p;\n    }\n\n    return true;\n  };\n\n  private retrySubscribeIceFailedTask = async () => {\n    if (\n      this.subscribeConnection!.iceConnectionState !== 'connected' ||\n      this.subscribeConnection!.connectionState !== 'connected'\n    ) {\n      const p = new Promise<boolean>((resolve, reject) => {\n        // Use subscribe constant string\n        this.callbacks.set(SUBSCRIBE_ICE_CONNECTION_CALLBACK_ID, {\n          promise: { resolve, reject },\n          action: HMSAction.RESTART_ICE,\n          extra: {},\n        });\n      });\n\n      const timeout = new Promise((resolve) => {\n        setTimeout(resolve, SUBSCRIBE_TIMEOUT, false);\n      });\n\n      return Promise.race([p, timeout]) as Promise<boolean>;\n    }\n\n    return true;\n  };\n\n  private retrySignalDisconnectTask = async () => {\n    let ok = this.signal.isConnected;\n\n    HMSLogger.d(TAG, 'retrySignalDisconnectTask', { signalConnected: this.signal.isConnected });\n    // Check if ws is disconnected - otherwise if only publishIce fails\n    // and ws connect is success then we don't need to reconnect to WebSocket\n    if (!this.signal.isConnected) {\n      try {\n        await this.internalConnect(\n          this.joinParameters!.authToken,\n          this.joinParameters!.endpoint,\n          this.joinParameters!.peerId,\n        );\n        ok = true;\n      } catch (ex) {\n        ok = false;\n      }\n    }\n\n    ok = this.signal.isConnected && (await this.retryPublishIceFailedTask());\n\n    // Send track update to sync local track state changes during reconnection\n    this.signal.trackUpdate(this.trackStates);\n\n    return ok;\n  };\n}\n","import { ErrorFactory, HMSAction } from '../error/ErrorFactory';\n\nexport interface AuthToken {\n  roomId: string;\n  userId: string;\n  role: string;\n}\n\nexport default function decodeJWT(token: string): AuthToken {\n  if (token.length === 0) {\n    throw ErrorFactory.InitAPIErrors.InvalidTokenFormat(HMSAction.INIT, 'Token cannot be an empty string');\n  }\n\n  const parts = token.split('.');\n  if (parts.length !== 3) {\n    throw ErrorFactory.InitAPIErrors.InvalidTokenFormat(\n      HMSAction.INIT,\n      `Expected 3 '.' separate fields - header, payload and signature respectively`,\n    );\n  }\n\n  const payloadStr = atob(parts[1]);\n  try {\n    const payload = JSON.parse(payloadStr);\n    return {\n      roomId: payload.room_id,\n      userId: payload.user_id,\n      role: payload.role,\n    } as AuthToken;\n  } catch (err) {\n    throw ErrorFactory.InitAPIErrors.InvalidTokenFormat(HMSAction.INIT, (err as Error).message);\n  }\n}\n","import { HMSRoom, HMSRoomType } from '../../interfaces/room';\nimport { IStore } from '../store/IStore';\n\nexport default class Room implements HMSRoom {\n  shareableLink!: string;\n  type!: HMSRoomType;\n  hasWaitingRoom!: boolean;\n\n  public get localPeer() {\n    return this.store.getLocalPeer()!;\n  }\n\n  public get peers() {\n    return this.store.getPeers();\n  }\n\n  constructor(public id: string, public name: string, private store: IStore) {}\n}\n","import { EventEmitter } from 'events';\nimport { v4 as uuid } from 'uuid';\nimport { HMSAudioTrack } from '../media/tracks';\nimport { DeviceManager } from '../device-manager';\nimport { NotificationManager } from '../notification-manager/NotificationManager';\nimport HMSLogger from '../utils/logger';\nimport { IStore } from '../sdk/store';\nimport { HMSException } from '../error/HMSException';\nimport { ErrorFactory, HMSAction } from '../error/ErrorFactory';\nimport { HMSDeviceChangeEvent, HMSUpdateListener, HMSTrackUpdate } from '../interfaces';\nimport { HMSRemotePeer } from '../sdk/models/peer';\nimport { isMobile } from '../utils/support';\n\nexport interface AutoplayEvent {\n  error: HMSException;\n}\n\nexport const AutoplayError = 'autoplay-error';\n\ntype AudioSinkState = {\n  autoplayFailed?: boolean;\n  initialized: boolean;\n  // this promise will be set for the first track. remaining tracks will be processed once it's know whether\n  // autoplay is allowed or not\n  autoplayCheckPromise?: Promise<void>;\n};\n\nconst INITIAL_STATE: AudioSinkState = {\n  autoplayFailed: undefined,\n  initialized: false,\n  autoplayCheckPromise: undefined,\n};\n\nexport class AudioSinkManager {\n  private audioSink?: HTMLElement;\n  private autoPausedTracks: Set<HMSAudioTrack> = new Set();\n  private TAG = '[AudioSinkManager]:';\n  private volume: number = 100;\n  private eventEmitter: EventEmitter = new EventEmitter();\n  private state = { ...INITIAL_STATE };\n  private audioContext?: AudioContext;\n  private listener?: HMSUpdateListener;\n\n  constructor(\n    private store: IStore,\n    private notificationManager: NotificationManager,\n    private deviceManager: DeviceManager,\n  ) {\n    this.notificationManager.addEventListener('track-added', this.handleTrackAdd as EventListener);\n    this.notificationManager.addEventListener('track-removed', this.handleTrackRemove as EventListener);\n    this.notificationManager.addEventListener('track-updated', this.handleTrackUpdate as EventListener);\n    this.deviceManager.addEventListener('audio-device-change', this.handleAudioDeviceChange);\n    // Initiate a Audio Context so safari will play audio on speaker instead of earpiece\n    this.audioContext = new AudioContext();\n  }\n\n  setListener(listener?: HMSUpdateListener) {\n    this.listener = listener;\n  }\n\n  addEventListener(event: string, listener: (event: AutoplayEvent) => void) {\n    this.eventEmitter.addListener(event, listener);\n  }\n\n  removeEventListener(event: string, listener: (event: AutoplayEvent) => void) {\n    this.eventEmitter.removeListener(event, listener);\n  }\n\n  private get outputDevice() {\n    return this.deviceManager.outputDevice;\n  }\n\n  getVolume() {\n    return this.volume;\n  }\n\n  setVolume(value: number) {\n    this.store.updateAudioOutputVolume(value);\n    this.volume = value;\n  }\n\n  /**\n   *  This function is to be called only on user interaction when\n   *  autoplay error is received.\n   */\n  async unblockAutoplay() {\n    if (this.autoPausedTracks.size > 0) {\n      this.unpauseAudioTracks();\n    }\n  }\n\n  init(elementId?: string) {\n    if (this.state.initialized) {\n      return;\n    }\n    this.state.initialized = true;\n    const audioSink = document.createElement('div');\n    audioSink.id = `HMS-SDK-audio-sink-${uuid()}`;\n    const userElement = elementId && document.getElementById(elementId);\n    const audioSinkParent = userElement || document.body;\n    audioSinkParent.append(audioSink);\n\n    this.audioSink = audioSink;\n  }\n\n  cleanUp() {\n    this.audioSink?.remove();\n    this.audioSink = undefined;\n    this.audioContext?.close();\n    this.audioContext = undefined;\n    this.notificationManager.removeEventListener('track-added', this.handleTrackAdd as EventListener);\n    this.notificationManager.removeEventListener('track-removed', this.handleTrackRemove as EventListener);\n    this.notificationManager.removeEventListener('track-updated', this.handleTrackUpdate as EventListener);\n    this.deviceManager.removeEventListener('audio-device-change', this.handleAudioDeviceChange);\n    this.autoPausedTracks = new Set();\n    this.state = { ...INITIAL_STATE };\n  }\n\n  private handleAudioPaused = (event: any) => {\n    const audioEl = event.target as HTMLAudioElement;\n    //@ts-ignore\n    const track = audioEl.srcObject?.getAudioTracks()[0];\n    if (!track?.enabled) {\n      // No need to play if already disabled\n      return;\n    }\n    // this means the audio paused because of external factors(headset removal)\n    HMSLogger.d(this.TAG, 'Audio Paused', event.target.id);\n    const audioTrack = this.store.getTrackById(event.target.id);\n    if (audioTrack) {\n      if (isMobile()) {\n        // Play after a delay since mobile devices don't call onDevice change event\n        setTimeout(async () => {\n          if (audioTrack) {\n            await this.playAudioFor(audioTrack as HMSAudioTrack);\n          }\n        }, 500);\n      } else {\n        this.autoPausedTracks.add(audioTrack as HMSAudioTrack);\n      }\n    }\n  };\n\n  private handleTrackUpdate = (event: CustomEvent<{ track: HMSAudioTrack; enabled: boolean }>) => {\n    // @ts-ignore\n    if (window.HMS?.AUDIO_SINK) {\n      const { track, enabled } = event.detail;\n      if (enabled) {\n        track.addSink();\n        this.playAudioFor(track);\n      } else {\n        track.removeSink();\n      }\n    }\n  };\n\n  private handleTrackAdd = (event: CustomEvent<{ track: HMSAudioTrack; peer: HMSRemotePeer }>) => {\n    this.handleTrackAddAsync(event);\n  };\n\n  private handleTrackAddAsync = async (event: CustomEvent<{ track: HMSAudioTrack; peer: HMSRemotePeer }>) => {\n    const { track, peer } = event.detail;\n\n    const audioEl = document.createElement('audio');\n    audioEl.style.display = 'none';\n    audioEl.id = track.trackId;\n    audioEl.addEventListener('pause', this.handleAudioPaused);\n\n    track.setAudioElement(audioEl);\n    track.setVolume(this.volume);\n    HMSLogger.d(this.TAG, 'Audio track added', track.trackId);\n    this.audioSink?.append(audioEl);\n    this.outputDevice && (await track.setOutputDevice(this.outputDevice));\n    // @ts-ignore\n    if (window.HMS?.AUDIO_SINK) {\n      // No need to play if track is not enabled\n      if (!track.enabled) {\n        track.removeSink();\n        this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_ADDED, track, peer);\n        return;\n      }\n      track.addSink();\n    } else {\n      audioEl.srcObject = new MediaStream([track.nativeTrack]);\n    }\n    this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_ADDED, track, peer);\n    /**\n     * if it's not known whether autoplay will succeed, wait for it to be known\n     */\n    if (this.state.autoplayFailed === undefined) {\n      if (!this.state.autoplayCheckPromise) {\n        // it's the first track, try to play it, that'll tell us whether autoplay is allowed\n        this.state.autoplayCheckPromise = new Promise<void>((resolve) => {\n          this.playAudioFor(track).then(resolve);\n        });\n      }\n      // and wait for the result to be known\n      await this.state.autoplayCheckPromise;\n    }\n    /**\n     * Don't play the track if autoplay failed, add to paused list\n     */\n    if (this.state.autoplayFailed) {\n      this.autoPausedTracks.add(track);\n      return;\n    }\n    await this.playAudioFor(track);\n  };\n\n  private handleAudioDeviceChange = (event: HMSDeviceChangeEvent) => {\n    // if there is no selection that means this is an init request. No need to do anything\n    if (event.error || !event.selection) {\n      return;\n    }\n    this.unpauseAudioTracks();\n  };\n\n  /**\n   * try to play audio for the passed in track, assume autoplay error happened if play fails\n   * @param track\n   * @private\n   */\n  private async playAudioFor(track: HMSAudioTrack) {\n    const audioEl = track.getAudioElement();\n    if (!audioEl) {\n      HMSLogger.w(this.TAG, 'No audio element found on track', track.trackId);\n      return;\n    }\n    try {\n      if (this.audioContext?.state === 'suspended') {\n        this.audioContext?.resume();\n      }\n      await audioEl.play();\n      this.state.autoplayFailed = false;\n      this.autoPausedTracks.delete(track);\n      HMSLogger.d(this.TAG, 'Played track', track.trackId);\n    } catch (error) {\n      this.autoPausedTracks.add(track);\n      HMSLogger.e(this.TAG, 'Failed to play track', track.trackId, error);\n      if (!this.state.autoplayFailed) {\n        this.state.autoplayFailed = true;\n        const ex = ErrorFactory.TracksErrors.AutoplayBlocked(HMSAction.AUTOPLAY, '');\n        this.eventEmitter.emit(AutoplayError, { error: ex });\n      }\n    }\n  }\n\n  private handleTrackRemove = (event: CustomEvent<HMSAudioTrack>) => {\n    const track = event.detail;\n    this.autoPausedTracks.delete(track);\n    const audioEl = document.getElementById(track.trackId) as HTMLAudioElement;\n    if (audioEl) {\n      audioEl.removeEventListener('pause', this.handleAudioPaused);\n      audioEl.srcObject = null;\n      audioEl.remove();\n      track.setAudioElement(null);\n    }\n    // Reset autoplay error thrown because if all tracks are removed and a new track is added\n    // Autoplay error is thrown in safari\n    if (this.audioSink && this.audioSink.childElementCount === 0) {\n      this.state.autoplayCheckPromise = undefined;\n      this.state.autoplayFailed = undefined;\n    }\n    HMSLogger.d(this.TAG, 'Audio track removed', track.trackId);\n  };\n\n  private unpauseAudioTracks = async () => {\n    const promises: Promise<void>[] = [];\n    this.autoPausedTracks.forEach((track) => {\n      promises.push(this.playAudioFor(track));\n    });\n    // Return after all pending tracks are played\n    await Promise.all(promises);\n  };\n}\n","import EventEmitter from 'events';\nimport { HMSDeviceManager, DeviceMap } from '../interfaces/HMSDeviceManager';\nimport { HMSLocalAudioTrack, HMSLocalVideoTrack } from '../media/tracks';\nimport { HMSAudioTrackSettingsBuilder, HMSVideoTrackSettingsBuilder } from '../media/settings';\nimport { HMSDeviceChangeEvent } from '../interfaces';\nimport AnalyticsEventFactory from '../analytics/AnalyticsEventFactory';\nimport analyticsEventsService from '../analytics/AnalyticsEventsService';\nimport { DeviceStorageManager } from './DeviceStorage';\nimport { IStore } from '../sdk/store';\nimport { debounce } from '../utils/timer-utils';\nimport HMSLogger from '../utils/logger';\nimport { HMSException } from '../error/HMSException';\n\nexport type SelectedDevices = {\n  audioInput?: MediaDeviceInfo;\n  videoInput?: MediaDeviceInfo;\n  audioOutput?: MediaDeviceInfo;\n};\n\ntype DeviceAndGroup = Partial<MediaTrackSettings>;\nexport class DeviceManager implements HMSDeviceManager {\n  audioInput: MediaDeviceInfo[] = [];\n  audioOutput: MediaDeviceInfo[] = [];\n  videoInput: MediaDeviceInfo[] = [];\n  outputDevice?: MediaDeviceInfo;\n  // true if user has allowed the permission\n  // false if user has denied the permission or prompt was never shown or ignored\n  // or if the camera/mic is not available in the device\n  hasWebcamPermission = false;\n  hasMicrophonePermission = false;\n\n  private eventEmitter: EventEmitter = new EventEmitter();\n  private TAG: string = '[Device Manager]:';\n  private initialized = false;\n  private videoInputChanged = false;\n  private audioInputChanged = false;\n\n  constructor(private store: IStore) {}\n\n  updateOutputDevice = (deviceId?: string) => {\n    const newDevice = this.audioOutput.find((device) => device.deviceId === deviceId);\n    if (newDevice) {\n      this.outputDevice = newDevice;\n      this.store.updateAudioOutputDevice(newDevice);\n      DeviceStorageManager.updateSelection('audioOutput', { deviceId: newDevice.deviceId, groupId: newDevice.groupId });\n    }\n    return newDevice;\n  };\n\n  async init() {\n    if (this.initialized) {\n      return;\n    }\n    this.initialized = true;\n    navigator.mediaDevices.addEventListener('devicechange', this.handleDeviceChange);\n    await this.enumerateDevices();\n    this.logDevices('Init');\n    this.setOutputDevice();\n    this.eventEmitter.emit('audio-device-change', { devices: this.getDevices() } as HMSDeviceChangeEvent);\n    analyticsEventsService\n      .queue(\n        AnalyticsEventFactory.deviceChange({\n          selection: this.getCurrentSelection(),\n          type: 'list',\n          devices: this.getDevices(),\n        }),\n      )\n      .flush();\n  }\n\n  getDevices(): DeviceMap {\n    return {\n      audioInput: this.audioInput,\n      audioOutput: this.audioOutput,\n      videoInput: this.videoInput,\n    };\n  }\n\n  cleanUp() {\n    this.initialized = false;\n    this.audioInput = [];\n    this.audioOutput = [];\n    this.videoInput = [];\n    this.outputDevice = undefined;\n    navigator.mediaDevices.removeEventListener('devicechange', this.handleDeviceChange);\n  }\n\n  private createIdentifier(deviceInfo?: DeviceAndGroup) {\n    if (!deviceInfo) {\n      return '';\n    }\n    return `${deviceInfo.deviceId}${deviceInfo.groupId}`;\n  }\n\n  private getCurrentSelection = (): SelectedDevices => {\n    const localPeer = this.store.getLocalPeer();\n    const audioDevice = this.createIdentifier(localPeer?.audioTrack?.getMediaTrackSettings());\n    const videoDevice = this.createIdentifier(localPeer?.videoTrack?.getMediaTrackSettings());\n    const audioSelection = this.audioInput.find((device) => {\n      const id = this.createIdentifier(device);\n      return id === audioDevice;\n    });\n    const videoSelection = this.videoInput.find((device) => this.createIdentifier(device) === videoDevice);\n    return {\n      audioInput: audioSelection,\n      videoInput: videoSelection,\n      audioOutput: this.outputDevice,\n    };\n  };\n\n  private computeChange = (prevDevices: string[], currentDevices: MediaDeviceInfo[]) => {\n    if (prevDevices.length !== currentDevices.length) {\n      return true;\n    }\n    return currentDevices.some((device) => !prevDevices.includes(this.createIdentifier(device)));\n  };\n\n  private enumerateDevices = async () => {\n    try {\n      const devices = await navigator.mediaDevices.enumerateDevices();\n      const prevVideoInput = this.videoInput.map(this.createIdentifier);\n      const prevAudioInput = this.audioInput.map(this.createIdentifier);\n      this.audioInput = [];\n      this.audioOutput = [];\n      this.videoInput = [];\n      devices.forEach((device) => {\n        if (device.kind === 'audioinput' && device.label) {\n          this.hasMicrophonePermission = true;\n          this.audioInput.push(device as MediaDeviceInfo);\n        } else if (device.kind === 'audiooutput') {\n          this.audioOutput.push(device);\n        } else if (device.kind === 'videoinput' && device.label) {\n          this.hasWebcamPermission = true;\n          this.videoInput.push(device as MediaDeviceInfo);\n        }\n      });\n      this.videoInputChanged = this.computeChange(prevVideoInput, this.videoInput);\n      this.audioInputChanged = this.computeChange(prevAudioInput, this.audioInput);\n      DeviceStorageManager.setDevices({\n        videoInput: [...this.videoInput],\n        audioInput: [...this.audioInput],\n        audioOutput: [...this.audioOutput],\n      });\n      this.logDevices('Enumerate Devices');\n    } catch (error) {\n      HMSLogger.e(this.TAG, 'Failed enumerating devices', error);\n    }\n  };\n\n  private handleDeviceChange = debounce(async () => {\n    await this.enumerateDevices();\n    analyticsEventsService\n      .queue(\n        AnalyticsEventFactory.deviceChange({\n          selection: this.getCurrentSelection(),\n          type: 'list',\n          devices: this.getDevices(),\n        }),\n      )\n      .flush();\n    this.logDevices('After Device Change');\n    const localPeer = this.store.getLocalPeer();\n    this.setOutputDevice(true);\n    await this.handleAudioInputDeviceChange(localPeer?.audioTrack);\n    await this.handleVideoInputDeviceChange(localPeer?.videoTrack);\n  }, 500).bind(this);\n\n  /**\n   * Function to get the device after device change\n   * Chrome and Edge provide a default device from which we select the actual device\n   * Firefox and safari give 0th device as system default\n   * @returns {MediaDeviceInfo}\n   */\n  getNewAudioInputDevice() {\n    const defaultDevice = this.audioInput.find((device) => device.deviceId === 'default');\n    if (defaultDevice) {\n      // Selecting a non-default device so that the deviceId comparision does not give\n      // false positives when device is removed, because the other available device\n      // get's the deviceId as default once this device is removed\n      const nextDevice = this.audioInput.find((device) => {\n        return device.label !== defaultDevice.label && defaultDevice.label.includes(device.label);\n      });\n      return nextDevice;\n    }\n    return this.audioInput[0];\n  }\n\n  /**\n   * This method is to select the input/output from same group\n   * same group meaning both input/output are of same device\n   * This method might override the default coming from browser and system so as to select options from same\n   * device type. This is required in certain cases where browser's default is not correct.\n   * Algo:\n   * 1. find the non default input device if selected one is default by matching device label\n   * 2. find the corresponding output device which has the same group id or same label\n   * 3. select the default one if nothing was found\n   * 4. select the first option if there is no default\n   */\n  setOutputDevice(deviceChange: boolean = false) {\n    const inputDevice = this.getNewAudioInputDevice();\n    const prevSelection = this.createIdentifier(this.outputDevice);\n    this.outputDevice = undefined;\n    if (inputDevice?.groupId) {\n      // only check for label because if groupId check is added it will select speaker\n      // when an external earphone without microphone is added\n      this.outputDevice = this.audioOutput.find(\n        (device) => inputDevice.deviceId !== 'default' && device.label === inputDevice.label,\n      );\n    }\n    if (!this.outputDevice) {\n      // select default deviceId device if available, otherwise select 0th device\n      this.outputDevice = this.audioOutput.find((device) => device.deviceId === 'default') || this.audioOutput[0];\n    }\n    this.store.updateAudioOutputDevice(this.outputDevice);\n    // send event only on device change and device is not same as previous\n    if (deviceChange && prevSelection !== this.createIdentifier(this.outputDevice)) {\n      this.eventEmitter.emit('audio-device-change', {\n        selection: this.outputDevice,\n        type: 'audioOutput',\n        devices: this.getDevices(),\n      } as HMSDeviceChangeEvent);\n    }\n  }\n\n  private handleAudioInputDeviceChange = async (audioTrack?: HMSLocalAudioTrack) => {\n    if (!audioTrack) {\n      HMSLogger.d(this.TAG, 'No Audio track on local peer');\n      return;\n    }\n    // no need to proceed further if input has not changed\n    if (!this.audioInputChanged) {\n      HMSLogger.d(this.TAG, 'No Change in AudioInput Device');\n      return;\n    }\n    const newSelection = this.getNewAudioInputDevice();\n    if (!newSelection || !newSelection.deviceId) {\n      HMSLogger.w(this.TAG, 'Audio device not found');\n      return;\n    }\n    const { settings } = audioTrack;\n    const newAudioTrackSettings = new HMSAudioTrackSettingsBuilder()\n      .codec(settings.codec)\n      .maxBitrate(settings.maxBitrate)\n      .deviceId(newSelection.deviceId)\n      .build();\n    try {\n      await audioTrack.setSettings(newAudioTrackSettings, true);\n      this.eventEmitter.emit('audio-device-change', {\n        devices: this.getDevices(),\n        selection: newSelection,\n        type: 'audioInput',\n      } as HMSDeviceChangeEvent);\n      this.logDevices('Audio Device Change Success');\n    } catch (error) {\n      HMSLogger.e(this.TAG, '[Audio Device Change]', error);\n      analyticsEventsService\n        .queue(\n          AnalyticsEventFactory.deviceChange({\n            selection: { audioInput: newSelection },\n            devices: this.getDevices(),\n            error: error as HMSException,\n          }),\n        )\n        .flush();\n      this.eventEmitter.emit('audio-device-change', {\n        error,\n        selection: newSelection,\n        type: 'audioInput',\n        devices: this.getDevices(),\n      } as HMSDeviceChangeEvent);\n    }\n  };\n\n  private handleVideoInputDeviceChange = async (videoTrack?: HMSLocalVideoTrack) => {\n    if (!videoTrack) {\n      HMSLogger.d(this.TAG, 'No Audio track on local peer');\n      return;\n    }\n    // no need to proceed further if input has not changed\n    if (!this.videoInputChanged) {\n      HMSLogger.d(this.TAG, 'No Change in VideoInput Device');\n      return;\n    }\n    const newSelection = this.videoInput[0];\n    if (!newSelection || !newSelection.deviceId) {\n      HMSLogger.w(this.TAG, 'Video device not found');\n      return;\n    }\n    const { settings, enabled } = videoTrack;\n    const newVideoTrackSettings = new HMSVideoTrackSettingsBuilder()\n      .codec(settings.codec)\n      .maxBitrate(settings.maxBitrate)\n      .maxFramerate(settings.maxFramerate)\n      .setWidth(settings.width)\n      .setHeight(settings.height)\n      .deviceId(newSelection.deviceId)\n      .build();\n    try {\n      await (videoTrack as HMSLocalVideoTrack).setSettings(newVideoTrackSettings, true);\n      if (!enabled) {\n        // On replace track, enabled will be true. Need to be set to previous state\n        videoTrack.setEnabled(enabled);\n      }\n      this.eventEmitter.emit('video-device-change', {\n        devices: this.getDevices(),\n        selection: newSelection,\n        type: 'video',\n      } as HMSDeviceChangeEvent);\n      this.logDevices('Video Device Change Success');\n    } catch (error) {\n      HMSLogger.e(this.TAG, '[Video Device Change]', error);\n      analyticsEventsService\n        .queue(\n          AnalyticsEventFactory.deviceChange({\n            selection: { videoInput: newSelection },\n            devices: this.getDevices(),\n            error: error as HMSException,\n          }),\n        )\n        .flush();\n      this.eventEmitter.emit('video-device-change', {\n        error: error as Error,\n        type: 'video',\n        selection: newSelection,\n        devices: this.getDevices(),\n      } as HMSDeviceChangeEvent);\n    }\n  };\n\n  addEventListener(event: string, listener: (event: HMSDeviceChangeEvent) => void) {\n    this.eventEmitter.addListener(event, listener);\n  }\n\n  removeEventListener(event: string, listener: (event: HMSDeviceChangeEvent) => void) {\n    this.eventEmitter.removeListener(event, listener);\n  }\n\n  private logDevices(label = '') {\n    HMSLogger.d(\n      this.TAG,\n      label,\n      JSON.stringify(\n        {\n          videoInput: [...this.videoInput],\n          audioInput: [...this.audioInput],\n          audioOutput: [...this.audioOutput],\n          selected: this.getCurrentSelection(),\n        },\n        null,\n        4,\n      ),\n    );\n  }\n}\n","import { AudioSinkManager } from '../audio-sink-manager';\nimport { DeviceManager } from '.';\n\nexport interface IAudioOutputManager {\n  getDevice(): MediaDeviceInfo | undefined;\n  setDevice(deviceId: string): MediaDeviceInfo | undefined;\n  getVolume(): number;\n  setVolume(value: number): void;\n}\n\nexport class AudioOutputManager implements IAudioOutputManager {\n  constructor(private deviceManager: DeviceManager, private audioSinkManager: AudioSinkManager) {}\n\n  getVolume() {\n    return this.audioSinkManager.getVolume();\n  }\n\n  setVolume(value: number) {\n    if (value < 0 || value > 100) {\n      throw Error('Please pass a valid number between 0-100');\n    }\n    this.audioSinkManager.setVolume(value);\n  }\n\n  getDevice() {\n    return this.deviceManager.outputDevice;\n  }\n\n  setDevice(deviceId?: string) {\n    return this.deviceManager.updateOutputDevice(deviceId);\n  }\n\n  async unblockAutoplay() {\n    await this.audioSinkManager.unblockAutoplay();\n  }\n}\n","import { HMSTrack } from '../..';\nimport { HMSTrackType } from '../../media/tracks';\nimport { HMSPeer } from '../models/peer';\nimport { IStore } from './IStore';\n\n/**\n * Function passed as argument to the sort method of the list.\n * @returns a negative value if first argument is less than second argument, zero if they're equal and a positive value otherwise\n *\n * @see Array.sort\n */\ntype ComparatorFn<T> = (a: T, b: T) => number;\n\ninterface PeerComparators {\n  videoEnabled: ComparatorFn<HMSPeer>;\n  audioEnabled: ComparatorFn<HMSPeer>;\n  screenShare: ComparatorFn<HMSPeer>;\n  audioLevel: ComparatorFn<HMSPeer | undefined>;\n  rolePriority: ComparatorFn<HMSPeer>;\n}\n\ninterface TrackComparators {\n  video: ComparatorFn<HMSTrack>;\n  audio: ComparatorFn<HMSTrack>;\n  enabled: ComparatorFn<HMSTrack>;\n  audioLevel: ComparatorFn<HMSTrack>;\n  peerAudioLevel: ComparatorFn<HMSTrack>;\n  screenShare: ComparatorFn<HMSTrack>;\n  rolePriority: ComparatorFn<HMSTrack>;\n}\n\ninterface IComparator {\n  getPeerComparators: () => PeerComparators;\n  getTrackComparators: () => TrackComparators;\n}\n\n/**\n * Used to sort list of items(peers/tracks) based on common use cases.\n * Usage: peerList.sort(comparator.getPeerComparators().audioLevel);\n */\nexport class Comparator implements IComparator {\n  constructor(private readonly store: IStore) {}\n\n  getPeerComparators(): PeerComparators {\n    return {\n      videoEnabled: (peerA: HMSPeer, peerB: HMSPeer) =>\n        this.primitiveComparator<boolean>(Boolean(peerA.videoTrack?.enabled), Boolean(peerB.videoTrack?.enabled)),\n\n      audioEnabled: (peerA: HMSPeer, peerB: HMSPeer) =>\n        this.primitiveComparator<boolean>(Boolean(peerA.audioTrack?.enabled), Boolean(peerB.audioTrack?.enabled)),\n\n      screenShare: (peerA: HMSPeer, peerB: HMSPeer) =>\n        this.primitiveComparator<boolean>(\n          peerA.auxiliaryTracks.some((track) => track.source === 'screen'),\n          peerB.auxiliaryTracks.some((track) => track.source === 'screen'),\n        ),\n\n      audioLevel: (peerA?: HMSPeer, peerB?: HMSPeer) =>\n        this.primitiveComparator<number>(\n          this.store.getSpeakers().find((speaker) => speaker.peer.peerId === peerA?.peerId)?.audioLevel || -1,\n          this.store.getSpeakers().find((speaker) => speaker.peer.peerId === peerB?.peerId)?.audioLevel || -1,\n        ),\n\n      rolePriority: (peerA: HMSPeer, peerB: HMSPeer) =>\n        this.primitiveComparator<number>(peerA.role?.priority || 0, peerB.role?.priority || 0),\n    };\n  }\n\n  getTrackComparators(): TrackComparators {\n    return {\n      video: (trackA: HMSTrack, trackB: HMSTrack) =>\n        this.primitiveComparator<boolean>(trackA.type === HMSTrackType.VIDEO, trackB.type === HMSTrackType.VIDEO),\n\n      audio: (trackA: HMSTrack, trackB: HMSTrack) =>\n        this.primitiveComparator<boolean>(trackA.type === HMSTrackType.AUDIO, trackB.type === HMSTrackType.AUDIO),\n\n      enabled: (trackA: HMSTrack, trackB: HMSTrack) =>\n        this.primitiveComparator<boolean>(Boolean(trackA.enabled), Boolean(trackB.enabled)),\n\n      peerAudioLevel: (trackA: HMSTrack, trackB: HMSTrack) => {\n        const peerA = this.store.getPeerByTrackId(trackA.trackId);\n        const peerB = this.store.getPeerByTrackId(trackB.trackId);\n        return this.getPeerComparators().audioLevel(peerA, peerB);\n      },\n\n      /**\n       * Only HMSAudioTracks comparable as speaker objects have only HMSAudioTracks\n       */\n      audioLevel: (trackA: HMSTrack, trackB: HMSTrack) =>\n        this.primitiveComparator<number>(\n          this.store.getSpeakers().find((speaker) => speaker.track.trackId === trackA.trackId)?.audioLevel || 0,\n          this.store.getSpeakers().find((speaker) => speaker.track.trackId === trackB.trackId)?.audioLevel || 0,\n        ),\n\n      screenShare: (trackA: HMSTrack, trackB: HMSTrack) =>\n        this.primitiveComparator(trackA.source === 'screen', trackB.source === 'screen'),\n\n      rolePriority: (trackA: HMSTrack, trackB: HMSTrack) =>\n        this.primitiveComparator<number>(\n          this.store.getPeerByTrackId(trackA.trackId)?.role?.priority || 0,\n          this.store.getPeerByTrackId(trackB.trackId)?.role?.priority || 0,\n        ),\n    };\n  }\n\n  /**\n   * @returns a negative value if a is less than b, zero if they're equal and a positive value otherwise\n   */\n  primitiveComparator = <T>(a: T, b: T): number => {\n    return a === b ? 0 : Number(a) - Number(b);\n  };\n\n  stringComparator = (a: string, b: string) => (a === b ? 0 : a < b ? -1 : 1);\n}\n","import { IStore, KnownRoles, TrackStateEntry } from './IStore';\nimport HMSRoom from '../models/HMSRoom';\nimport { HMSLocalPeer, HMSPeer, HMSRemotePeer } from '../models/peer';\nimport { HMSSpeaker } from '../../interfaces';\nimport { IErrorListener } from '../../interfaces/error-listener';\nimport {\n  HMSTrack,\n  HMSVideoTrack,\n  HMSAudioTrack,\n  HMSTrackType,\n  HMSTrackSource,\n  HMSRemoteVideoTrack,\n  HMSLocalTrack,\n} from '../../media/tracks';\nimport {\n  SimulcastLayer,\n  SimulcastLayers,\n  SimulcastDimensions,\n  simulcastMapping,\n  RID,\n  SimulcastLayerDefinition,\n} from '../../interfaces/simulcast-layers';\nimport { Comparator } from './Comparator';\nimport { HMSConfig, PublishParams } from '../../interfaces';\nimport { SelectedDevices } from '../../device-manager';\nimport { DeviceStorageManager } from '../../device-manager/DeviceStorage';\nimport { ErrorFactory, HMSAction } from '../../error/ErrorFactory';\n\nclass Store implements IStore {\n  private readonly comparator: Comparator = new Comparator(this);\n  private room?: HMSRoom;\n  private knownRoles: KnownRoles = {};\n  private localPeerId?: string;\n  private peers: Record<string, HMSPeer> = {};\n  private tracks: Record<string, HMSTrack> = {};\n  // Not used currently. Will be used exclusively for preview tracks.\n  // private previewTracks: Record<string, HMSTrack> = {};\n  private peerTrackStates: Record<string, TrackStateEntry> = {};\n  private speakers: HMSSpeaker[] = [];\n  private videoLayers: SimulcastLayers | null = null;\n  private screenshareLayers: SimulcastLayers | null = null;\n  private config?: HMSConfig;\n  private publishParams?: PublishParams;\n  private errorListener?: IErrorListener;\n\n  getConfig() {\n    return this.config;\n  }\n\n  getPublishParams() {\n    return this.publishParams;\n  }\n\n  getComparator() {\n    return this.comparator;\n  }\n\n  getRoom() {\n    return this.room!;\n  }\n\n  getPolicyForRole(role: string) {\n    return this.knownRoles[role];\n  }\n\n  getKnownRoles() {\n    return this.knownRoles;\n  }\n\n  getLocalPeer() {\n    if (this.localPeerId && this.peers[this.localPeerId]) {\n      return this.peers[this.localPeerId] as HMSLocalPeer;\n    }\n    return undefined;\n  }\n\n  getRemotePeers() {\n    return Object.values(this.peers).filter((peer) => !peer.isLocal) as HMSRemotePeer[];\n  }\n\n  getPeers(): HMSPeer[] {\n    return Object.values(this.peers);\n  }\n\n  getPeerById(peerId: string) {\n    if (this.peers[peerId]) {\n      return this.peers[peerId];\n    }\n    return undefined;\n  }\n\n  getTracks() {\n    return Object.values(this.tracks);\n  }\n\n  getVideoTracks() {\n    return this.getTracks().filter((track) => track.type === HMSTrackType.VIDEO) as HMSVideoTrack[];\n  }\n\n  getRemoteVideoTracks() {\n    return this.getTracks().filter((track) => track instanceof HMSRemoteVideoTrack) as HMSRemoteVideoTrack[];\n  }\n\n  getAudioTracks() {\n    return this.getTracks().filter((track) => track.type === HMSTrackType.AUDIO) as HMSAudioTrack[];\n  }\n\n  getPeerTracks(peerId?: string) {\n    const peer = peerId ? this.peers[peerId] : undefined;\n    const tracks: HMSTrack[] = [];\n    peer?.videoTrack && tracks.push(peer.videoTrack);\n    peer?.audioTrack && tracks.push(peer.audioTrack);\n    return tracks.concat(peer?.auxiliaryTracks || []);\n  }\n\n  getLocalPeerTracks() {\n    return this.getPeerTracks(this.localPeerId) as HMSLocalTrack[];\n  }\n\n  getTrackById(trackId: string) {\n    return this.tracks[trackId];\n  }\n\n  getPeerByTrackId(trackId: string) {\n    const track = this.tracks[trackId];\n    return track.peerId ? this.peers[track.peerId] : undefined;\n  }\n\n  getSpeakers() {\n    return this.speakers;\n  }\n\n  getSpeakerPeers() {\n    return this.speakers.map((speaker) => speaker.peer);\n  }\n\n  setRoom(room: HMSRoom) {\n    this.room = room;\n  }\n\n  setKnownRoles(knownRoles: KnownRoles) {\n    this.knownRoles = knownRoles;\n    this.updatePeersPolicy();\n  }\n\n  setConfig(config: HMSConfig) {\n    DeviceStorageManager.rememberDevices(Boolean(config.rememberDeviceSelection));\n    if (config.rememberDeviceSelection) {\n      const devices: SelectedDevices | undefined = DeviceStorageManager.getSelection();\n      if (devices) {\n        if (!config.settings) {\n          config.settings = {};\n        }\n        if (devices.audioInput?.deviceId) {\n          config.settings.audioInputDeviceId = config.settings.audioInputDeviceId || devices.audioInput.deviceId;\n        }\n        if (devices.audioOutput?.deviceId) {\n          config.settings.audioOutputDeviceId = config.settings.audioOutputDeviceId || devices.audioOutput.deviceId;\n        }\n        if (devices.videoInput?.deviceId) {\n          config.settings.videoDeviceId = config.settings.videoDeviceId || devices.videoInput.deviceId;\n        }\n      }\n    }\n    this.config = config;\n  }\n\n  setPublishParams(params: PublishParams) {\n    this.publishParams = params;\n  }\n\n  addPeer(peer: HMSPeer) {\n    this.peers[peer.peerId] = peer;\n    if (peer.isLocal) this.localPeerId = peer.peerId;\n  }\n\n  /**\n   * @param {HMSTrack} track the published track that has to be added\n   *\n   * Note: Only use this method to add published tracks not preview traks\n   */\n  addTrack(track: HMSTrack) {\n    this.tracks[track.trackId] = track;\n  }\n\n  getTrackState(trackId: string) {\n    return this.peerTrackStates[trackId];\n  }\n\n  setTrackState(trackStateEntry: TrackStateEntry) {\n    this.peerTrackStates[trackStateEntry.trackInfo.track_id] = trackStateEntry;\n  }\n\n  removePeer(peerId: string) {\n    if (this.localPeerId === peerId) this.localPeerId = undefined;\n    delete this.peers[peerId];\n  }\n\n  removeTrack(trackId: string) {\n    delete this.tracks[trackId];\n  }\n\n  updateSpeakers(speakers: HMSSpeaker[]) {\n    this.speakers = speakers;\n  }\n\n  updateAudioOutputVolume(value: number) {\n    this.getAudioTracks().forEach((track) => track.setVolume(value));\n  }\n\n  updateAudioOutputDevice(device: MediaDeviceInfo) {\n    this.getAudioTracks().forEach((track) => {\n      track.setOutputDevice(device);\n    });\n  }\n\n  getSubscribeDegradationParams() {\n    const params = this.getLocalPeer()?.role?.subscribeParams.subscribeDegradation;\n    if (params && Object.keys(params).length > 0) {\n      return params;\n    }\n    return undefined;\n  }\n\n  getSimulcastLayers(source: HMSTrackSource): SimulcastLayer[] {\n    if (source === 'screen') {\n      return this.screenshareLayers?.layers || [];\n    }\n    return this.videoLayers?.layers || [];\n  }\n\n  getSimulcastDimensions(source: HMSTrackSource): SimulcastDimensions {\n    const layers = source === 'screen' ? this.screenshareLayers : this.videoLayers;\n    const width = layers?.width;\n    const height = layers?.height;\n    return {\n      width,\n      height,\n    };\n  }\n\n  /**\n   * Convert maxBitrate from kbps to bps\n   * @internal\n   * @param simulcastLayers\n   * @returns {SimulcastLayers}\n   */\n  private convertSimulcastLayers(simulcastLayers: SimulcastLayers) {\n    return {\n      ...simulcastLayers,\n      layers: (simulcastLayers.layers || []).map((layer) => {\n        return {\n          ...layer,\n          maxBitrate: layer.maxBitrate * 1000,\n        };\n      }),\n    };\n  }\n\n  setVideoSimulcastLayers(simulcastLayers: SimulcastLayers): void {\n    this.videoLayers = this.convertSimulcastLayers(simulcastLayers);\n  }\n\n  setScreenshareSimulcastLayers(simulcastLayers: SimulcastLayers): void {\n    this.screenshareLayers = this.convertSimulcastLayers(simulcastLayers);\n  }\n\n  getSimulcastDefinitionsForPeer(peer: HMSPeer, source: HMSTrackSource) {\n    if (!peer.role) return [];\n\n    const publishParams = this.getPolicyForRole(peer.role.name).publishParams;\n    let simulcastLayers: SimulcastLayers | undefined;\n    if (source === 'regular') {\n      simulcastLayers = publishParams.videoSimulcastLayers;\n    } else if (source === 'screen') {\n      simulcastLayers = publishParams.screenSimulcastLayers;\n    }\n    if (!simulcastLayers || !simulcastLayers.layers || simulcastLayers.layers.length === 0) {\n      return [];\n    }\n    const width = simulcastLayers.width;\n    const height = simulcastLayers.height;\n    return simulcastLayers.layers.map((value) => {\n      const layer = simulcastMapping[value.rid as RID];\n      const resolution = {\n        width: width && value.scaleResolutionDownBy ? width / value.scaleResolutionDownBy : undefined,\n        height: height && value.scaleResolutionDownBy ? height / value.scaleResolutionDownBy : undefined,\n      };\n      return {\n        layer,\n        resolution,\n      } as SimulcastLayerDefinition;\n    });\n  }\n\n  cleanUp() {\n    const tracks = this.getTracks();\n    for (const track of tracks) {\n      track.cleanup();\n    }\n    this.config = undefined;\n  }\n\n  setErrorListener(listener: IErrorListener) {\n    this.errorListener = listener;\n  }\n\n  private updatePeersPolicy() {\n    this.getPeers().forEach((peer) => {\n      if (!peer.role) {\n        this.errorListener?.onError(ErrorFactory.GenericErrors.InvalidRole(HMSAction.VALIDATION, ''));\n        return;\n      }\n      peer.role = this.getPolicyForRole(peer.role.name);\n    });\n  }\n}\n\nexport { Store };\n","import { HMSRole } from '../interfaces';\nimport InitialSettings from '../interfaces/settings';\nimport { HMSPeerUpdate, HMSTrackUpdate, HMSUpdateListener } from '../interfaces/update-listener';\nimport ITransport from '../transport/ITransport';\nimport { IStore } from './store';\n\nexport type PublishConfig = {\n  publishAudio?: boolean;\n  publishVideo?: boolean;\n};\n\nexport default class RoleChangeManager {\n  constructor(\n    private store: IStore,\n    private transport: ITransport,\n    private publish: (settings: InitialSettings, publishConfig?: PublishConfig) => void,\n    private removeAuxillaryTrack: (trackId: string) => void,\n    private listener?: HMSUpdateListener,\n  ) {}\n\n  public handleLocalPeerRoleUpdate = async (event: any) => {\n    const localPeer = this.store.getLocalPeer();\n\n    if (!localPeer) {\n      return;\n    }\n    const oldRole = event.detail.oldRole as HMSRole;\n    const newRole = event.detail.newRole as HMSRole;\n\n    const wasPublishing = oldRole.publishParams.allowed || [];\n    const isPublishing = newRole.publishParams.allowed || [];\n\n    const toRemove = {\n      removeVideo: false,\n      removeAudio: false,\n      removeScreen: false,\n    };\n\n    if (wasPublishing.length > 0) {\n      // check if we have to remove any tracks\n      if (isPublishing.length === 0) {\n        toRemove.removeVideo = true;\n        toRemove.removeAudio = true;\n        toRemove.removeScreen = true;\n      } else {\n        if (wasPublishing.includes('video') && !isPublishing.includes('video')) {\n          toRemove.removeVideo = true;\n        }\n\n        if (wasPublishing.includes('audio') && !isPublishing.includes('audio')) {\n          toRemove.removeAudio = true;\n        }\n\n        if (wasPublishing.includes('screen') && !isPublishing.includes('screen')) {\n          toRemove.removeScreen = true;\n        }\n      }\n    }\n\n    await this.removeLocalTracks(toRemove);\n    this.store.setPublishParams(newRole.publishParams);\n\n    const initialSettings = this.store.getConfig()?.settings || {\n      isAudioMuted: true,\n      isVideoMuted: true,\n      audioInputDeviceId: 'default',\n      videoDeviceId: 'default',\n      audioOutputDeviceId: 'default',\n    };\n    // call publish with new settings, local track manager will diff policies\n    await this.publish({ ...initialSettings, isAudioMuted: true, isVideoMuted: true });\n\n    this.listener?.onPeerUpdate(HMSPeerUpdate.ROLE_UPDATED, localPeer);\n  };\n\n  private async removeLocalTracks({\n    removeVideo,\n    removeAudio,\n    removeScreen,\n  }: {\n    removeVideo: boolean;\n    removeAudio: boolean;\n    removeScreen: boolean;\n  }) {\n    const localPeer = this.store.getLocalPeer();\n\n    if (!localPeer) {\n      return;\n    }\n\n    const tracksToUnpublish = [];\n\n    // TODO check auxillary tracks for regular audio and video too\n    if (localPeer?.videoTrack && removeVideo) {\n      // TODO: stop processed track and cleanup plugins loop non async\n      // vb can throw change role off otherwise\n      tracksToUnpublish.push(localPeer.videoTrack);\n      localPeer.videoTrack = undefined;\n    }\n\n    if (localPeer?.audioTrack && removeAudio) {\n      tracksToUnpublish.push(localPeer.audioTrack);\n      localPeer.audioTrack = undefined;\n    }\n\n    await this.transport.unpublish(tracksToUnpublish);\n    for (let track of tracksToUnpublish) {\n      this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_REMOVED, track, localPeer);\n    }\n\n    if (localPeer.auxiliaryTracks && removeScreen) {\n      const localAuxTracks = [...localPeer.auxiliaryTracks];\n      for (const track of localAuxTracks) {\n        if (track.source === 'screen') {\n          await this.removeAuxillaryTrack(track.trackId);\n        }\n      }\n    }\n  }\n}\n","import { HMSAudioCodec, HMSVideoCodec, PublishParams } from '../interfaces';\nimport {\n  HMSAudioTrackSettings,\n  HMSAudioTrackSettingsBuilder,\n  HMSTrackSettings,\n  HMSTrackSettingsBuilder,\n  HMSVideoTrackSettings,\n  HMSVideoTrackSettingsBuilder,\n} from '../media/settings';\nimport InitialSettings from '../interfaces/settings';\nimport { HMSLocalAudioTrack, HMSLocalTrack, HMSLocalVideoTrack, HMSTrackType } from '../media/tracks';\nimport { IStore } from './store';\nimport { IFetchAVTrackOptions } from '../transport/ITransport';\nimport HMSLogger from '../utils/logger';\nimport { HMSException } from '../error/HMSException';\nimport { ErrorFactory, HMSAction } from '../error/ErrorFactory';\nimport ITransportObserver from '../transport/ITransportObserver';\nimport HMSLocalStream from '../media/streams/HMSLocalStream';\nimport analyticsEventsService from '../analytics/AnalyticsEventsService';\nimport AnalyticsEventFactory from '../analytics/AnalyticsEventFactory';\nimport { DeviceManager } from '../device-manager';\nimport { BuildGetMediaError, HMSGetMediaActions } from '../error/utils';\n\nconst defaultSettings = {\n  isAudioMuted: false,\n  isVideoMuted: false,\n  audioInputDeviceId: 'default',\n  audioOutputDeviceId: 'default',\n  videoDeviceId: 'default',\n};\n\nlet blankCanvas: any;\n\nexport class LocalTrackManager {\n  readonly TAG: string = '[LocalTrackManager]';\n\n  constructor(private store: IStore, private observer: ITransportObserver, private deviceManager: DeviceManager) {}\n\n  async getTracksToPublish(initialSettings: InitialSettings): Promise<HMSLocalTrack[]> {\n    const publishParams = this.store.getPublishParams();\n    if (!publishParams) return [];\n\n    const { allowed } = publishParams;\n    const canPublishAudio = Boolean(allowed && allowed.includes('audio'));\n    const canPublishVideo = Boolean(allowed && allowed.includes('video'));\n\n    if (!canPublishAudio && !canPublishVideo) {\n      return [];\n    }\n    let tracksToPublish: Array<HMSLocalTrack> = [];\n\n    const trackSettings = this.getTrackSettings(initialSettings, publishParams);\n\n    if (!trackSettings) {\n      return [];\n    }\n\n    const localTracks = this.store.getLocalPeerTracks();\n    const videoTrack = localTracks.find((t) => t.type === HMSTrackType.VIDEO && t.source === 'regular') as\n      | HMSLocalVideoTrack\n      | undefined;\n    const audioTrack = localTracks.find((t) => t.type === HMSTrackType.AUDIO && t.source === 'regular') as\n      | HMSLocalAudioTrack\n      | undefined;\n    const screenTrack = localTracks.find((t) => t.type === HMSTrackType.VIDEO && t.source === 'screen') as\n      | HMSLocalVideoTrack\n      | undefined;\n\n    // The track gets added to the store only after it is published.\n    const isVideoTrackPublished = Boolean(videoTrack && this.store.getTrackById(videoTrack.trackId));\n    const isAudioTrackPublished = Boolean(audioTrack && this.store.getTrackById(audioTrack.trackId));\n\n    if (videoTrack && trackSettings.video) {\n      await videoTrack.setSettings(trackSettings.video);\n    }\n\n    if (audioTrack && trackSettings.audio) {\n      await audioTrack.setSettings(trackSettings.audio);\n    }\n\n    if (screenTrack && trackSettings.screen) {\n      screenTrack.setSettings(trackSettings.screen);\n    }\n\n    if (isVideoTrackPublished && isAudioTrackPublished) {\n      // there is nothing to publish\n      return [];\n    }\n\n    let fetchTrackOptions: IFetchAVTrackOptions = {\n      audio: canPublishAudio && !audioTrack && (initialSettings.isAudioMuted ? 'empty' : true),\n      video: canPublishVideo && !videoTrack && (initialSettings.isVideoMuted ? 'empty' : true),\n    };\n    try {\n      HMSLogger.d(this.TAG, 'Init Local Tracks', { fetchTrackOptions });\n      tracksToPublish = await this.getLocalTracks(fetchTrackOptions, trackSettings);\n    } catch (error) {\n      if (error instanceof HMSException && error.action === HMSAction.TRACK) {\n        this.observer.onFailure(error);\n\n        const audioFailure = error.message.includes('audio');\n        const videoFailure = error.message.includes('video');\n        fetchTrackOptions.audio = audioFailure ? 'empty' : fetchTrackOptions.audio;\n        fetchTrackOptions.video = videoFailure ? 'empty' : fetchTrackOptions.video;\n        HMSLogger.w(this.TAG, 'Fetch AV Tracks failed', { fetchTrackOptions }, error);\n        try {\n          tracksToPublish.push(...(await this.getLocalTracks(fetchTrackOptions, trackSettings)));\n        } catch (error) {\n          HMSLogger.w(this.TAG, 'Fetch empty tacks failed', error);\n          fetchTrackOptions.audio = fetchTrackOptions.audio && 'empty';\n          fetchTrackOptions.video = fetchTrackOptions.video && 'empty';\n          tracksToPublish.push(...(await this.getLocalTracks(fetchTrackOptions, trackSettings)));\n          this.observer.onFailure(ErrorFactory.TracksErrors.GenericTrack(HMSAction.TRACK, (error as Error).message));\n        }\n      } else {\n        HMSLogger.w(this.TAG, 'Fetch AV Tracks failed - unknown exception', error);\n        this.observer.onFailure(ErrorFactory.TracksErrors.GenericTrack(HMSAction.TRACK, (error as Error).message));\n      }\n    }\n\n    /**\n     * concat local tracks only if both are true which means it is either join or switched from a role\n     * with no tracks earlier.\n     * the reason we need this is for preview API to work, in case of preview we want to publish the same\n     * tracks which were shown and are already part of the local peer instead of creating new ones.\n     * */\n    // if (publishConfig.publishAudio && publishConfig.publishVideo) {\n    //   return tracks.concat(localTracks);\n    // }\n    if (videoTrack && canPublishVideo && !isVideoTrackPublished) {\n      tracksToPublish.push(videoTrack);\n    }\n    if (audioTrack && canPublishAudio && !isAudioTrackPublished) {\n      tracksToPublish.push(audioTrack);\n    }\n    return tracksToPublish;\n  }\n\n  async getLocalTracks(\n    fetchTrackOptions: IFetchAVTrackOptions = { audio: true, video: true },\n    settings: HMSTrackSettings,\n  ): Promise<Array<HMSLocalTrack>> {\n    try {\n      const nativeTracks = await this.getNativeLocalTracks(fetchTrackOptions, settings);\n      const nativeVideoTrack = nativeTracks.find((track) => track.kind === 'video');\n      const nativeAudioTrack = nativeTracks.find((track) => track.kind === 'audio');\n      const local = new HMSLocalStream(new MediaStream(nativeTracks));\n\n      const tracks: Array<HMSLocalTrack> = [];\n      if (nativeAudioTrack && settings?.audio) {\n        const audioTrack = new HMSLocalAudioTrack(local, nativeAudioTrack, 'regular', settings.audio);\n        tracks.push(audioTrack);\n      }\n\n      if (nativeVideoTrack && settings?.video) {\n        const videoTrack = new HMSLocalVideoTrack(local, nativeVideoTrack, 'regular', settings.video);\n        tracks.push(videoTrack);\n      }\n      return tracks;\n    } catch (error) {\n      // TOOD: On OverConstrained error, retry with dropping all constraints.\n      // Just retry getusermedia again - it sometimes work when AbortError or NotFoundError is thrown on a few devices\n      if (error instanceof HMSException) {\n        analyticsEventsService\n          .queue(\n            AnalyticsEventFactory.publish({\n              devices: this.deviceManager.getDevices(),\n              error,\n              settings,\n            }),\n          )\n          .flush();\n      }\n      throw error;\n    }\n  }\n\n  private async getNativeLocalTracks(\n    fetchTrackOptions: IFetchAVTrackOptions = { audio: false, video: false },\n    settings: HMSTrackSettings,\n  ) {\n    let trackSettings = new HMSTrackSettings(\n      fetchTrackOptions.video === true ? settings.video : null,\n      fetchTrackOptions.audio === true ? settings.audio : null,\n      settings.simulcast,\n    );\n\n    let nativeTracks: MediaStreamTrack[] = [];\n\n    if (trackSettings.audio || trackSettings.video) {\n      nativeTracks.push(...(await this.getAVTracks(trackSettings)));\n    }\n\n    if (fetchTrackOptions.audio === 'empty') {\n      nativeTracks.push(this.getEmptyAudioTrack());\n    }\n\n    if (fetchTrackOptions.video === 'empty') {\n      nativeTracks.push(this.getEmptyVideoTrack());\n    }\n\n    return nativeTracks;\n  }\n\n  private getEmptyVideoTrack(prevTrack?: MediaStreamTrack): MediaStreamTrack {\n    const width = prevTrack?.getSettings()?.width || 320;\n    const height = prevTrack?.getSettings()?.height || 240;\n    const frameRate = 10; // fps TODO: experiment, see if this can be reduced\n    if (!blankCanvas) {\n      blankCanvas = Object.assign(document.createElement('canvas'), { width, height });\n      blankCanvas.getContext('2d')?.fillRect(0, 0, width, height);\n    }\n    const stream = blankCanvas.captureStream(frameRate);\n    const emptyTrack = stream.getVideoTracks()[0];\n    const intervalID = setInterval(() => {\n      if (emptyTrack.readyState === 'ended') {\n        clearInterval(intervalID);\n        return;\n      }\n      const ctx = blankCanvas.getContext('2d');\n      if (ctx) {\n        const pixel = ctx.getImageData(0, 0, 1, 1).data;\n        const red = pixel[0] === 0 ? 1 : 0; // toggle red in pixel\n        ctx.fillStyle = `rgb(${red}, 0, 0)`;\n        ctx.fillRect(0, 0, 1, 1);\n      }\n    }, 1000 / frameRate);\n    emptyTrack.onended = () => {\n      clearInterval(intervalID);\n    };\n    emptyTrack.enabled = false;\n    return emptyTrack;\n  }\n\n  private getEmptyAudioTrack(): MediaStreamTrack {\n    const ctx = new AudioContext();\n    const oscillator = ctx.createOscillator();\n    const dst = oscillator.connect(ctx.createMediaStreamDestination());\n    oscillator.start();\n    // @ts-expect-error\n    const emptyTrack = dst.stream.getAudioTracks()[0];\n    emptyTrack.enabled = false;\n    return emptyTrack;\n  }\n\n  private async getAVTracks(settings: HMSTrackSettings): Promise<Array<MediaStreamTrack>> {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: settings.audio ? settings.audio.toConstraints() : false,\n        video: settings.video ? settings.video.toConstraints() : false,\n      });\n\n      return stream.getVideoTracks().concat(stream.getAudioTracks());\n    } catch (error) {\n      let videoError = false;\n      let audioError = false;\n\n      await this.deviceManager.init();\n\n      if (!this.deviceManager.hasWebcamPermission && settings.video) {\n        videoError = true;\n      }\n\n      if (!this.deviceManager.hasMicrophonePermission && settings.audio) {\n        audioError = true;\n      }\n\n      if (videoError && audioError) {\n        throw BuildGetMediaError(error as Error, HMSGetMediaActions.AV);\n      } else if (videoError) {\n        throw BuildGetMediaError(error as Error, HMSGetMediaActions.VIDEO);\n      } else {\n        throw BuildGetMediaError(error as Error, HMSGetMediaActions.AUDIO);\n      }\n    }\n  }\n\n  private getTrackSettings(initialSettings: InitialSettings, publishParams: PublishParams): HMSTrackSettings | null {\n    const { audio, video, screen, allowed } = publishParams;\n    const canPublishAudio = Boolean(allowed && allowed.includes('audio'));\n    const canPublishVideo = Boolean(allowed && allowed.includes('video'));\n    const canPublishScreen = Boolean(allowed && allowed.includes('screen'));\n\n    if (!canPublishAudio && !canPublishVideo) {\n      return null;\n    }\n    const { audioInputDeviceId, videoDeviceId } = initialSettings;\n\n    let audioSettings: HMSAudioTrackSettings | null = null;\n    let videoSettings: HMSVideoTrackSettings | null = null;\n    let screenSettings: HMSVideoTrackSettings | null = null;\n    if (canPublishAudio) {\n      audioSettings = new HMSAudioTrackSettingsBuilder()\n        .codec(audio.codec as HMSAudioCodec)\n        .maxBitrate(audio.bitRate)\n        .deviceId(audioInputDeviceId || defaultSettings.audioInputDeviceId)\n        .build();\n    }\n    if (canPublishVideo) {\n      const dimensions = this.store.getSimulcastDimensions('regular');\n      videoSettings = new HMSVideoTrackSettingsBuilder()\n        .codec(video.codec as HMSVideoCodec)\n        .maxBitrate(video.bitRate)\n        .maxFramerate(video.frameRate)\n        .setWidth(dimensions?.width || video.width) // take simulcast width if available\n        .setHeight(dimensions?.height || video.height) // take simulcast width if available\n        .deviceId(videoDeviceId || defaultSettings.videoDeviceId)\n        .build();\n    }\n    if (canPublishScreen) {\n      const dimensions = this.store.getSimulcastDimensions('screen');\n      screenSettings = new HMSVideoTrackSettingsBuilder()\n        // Don't cap maxBitrate for screenshare.\n        // If publish params doesn't have bitRate value - don't set maxBitrate.\n        .maxBitrate(screen.bitRate, false)\n        .codec(screen.codec as HMSVideoCodec)\n        .maxFramerate(screen.frameRate)\n        .setWidth(dimensions?.width || screen.width)\n        .setHeight(dimensions?.height || screen.height)\n        .build();\n    }\n\n    return new HMSTrackSettingsBuilder().video(videoSettings).audio(audioSettings).screen(screenSettings).build();\n  }\n}\n","import HMSLogger from '../utils/logger';\n\nexport class AudioContextManager {\n  private audioContext: AudioContext;\n  private destinationNode?: MediaStreamAudioDestinationNode;\n  private source: MediaElementAudioSourceNode;\n\n  constructor(element: HTMLMediaElement) {\n    this.audioContext = new AudioContext();\n    this.source = this.audioContext.createMediaElementSource(element);\n    this.source.connect(this.audioContext.destination);\n  }\n\n  /**\n   * Resume AudioContext if it is suspended\n   * Note: when the browser tab is muted by default, AudioContext will be in suspended state\n   * It has to be resumed for the video/audio to be played.\n   */\n  resumeContext() {\n    if (this.audioContext.state === 'suspended') {\n      HMSLogger.d(this.TAG, 'AudioContext is resumed');\n      this.audioContext.resume();\n    }\n  }\n\n  getAudioTrack() {\n    // Always create a destinationNode to get new audio track id\n    if (this.destinationNode) {\n      this.source.disconnect(this.destinationNode);\n    }\n    this.destinationNode = this.audioContext.createMediaStreamDestination();\n    this.source.connect(this.destinationNode);\n    return this.destinationNode.stream.getAudioTracks()[0];\n  }\n\n  cleanup() {\n    if (this.audioContext.state !== 'closed') {\n      this.audioContext.close();\n    }\n  }\n\n  private get TAG() {\n    return 'AudioContextManager';\n  }\n}\n","import HMSLogger from '../utils/logger';\nimport { TypedEventEmitter } from '../utils/typed-event-emitter';\nimport { AudioContextManager } from './AudioContextManager';\n\n/**\n * This class handles audio playlist management\n * - An audio element and audio context which processes audio from audio element is created\n *   in the constructor\n * It handles playback in the following steps\n *  - set's the url on the audio element created in the constructor\n *  - oncanplaythrough event of the audio element\n *    - resume the audio context if it is suspended\n *    - play the audio element\n *    - Get audio track from the audio context manager\n *    - The track is passed to playlist manager to publish\n */\nexport class PlaylistAudioManager extends TypedEventEmitter<{ ended: null; progress: Event }> {\n  private audioElement: HTMLAudioElement | null;\n  private track?: MediaStreamTrack;\n  private audioContextManager!: AudioContextManager;\n  // This is to handle audio playing when seekTo is called when audio is paused\n  private seeked = false;\n\n  constructor() {\n    super();\n    this.audioElement = this.getAudioElement();\n  }\n\n  async play(url: string) {\n    return new Promise<MediaStreamTrack[]>((resolve, reject) => {\n      this.audioElement = this.getAudioElement();\n      this.audioElement.src = url;\n      this.seeked = false;\n      this.audioElement.onerror = () => {\n        const error = `Error loading ${url}`;\n        HMSLogger.e(this.TAG, error);\n        this.stop();\n        reject(error);\n      };\n      // oncanplaythrough is called when enough media is loaded for play to be possible in two cases -\n      //    * when play is called for the first time\n      //    * when user seeks jumps to any mid track timestamp\n      this.audioElement.oncanplaythrough = async () => {\n        try {\n          if (!this.audioElement) {\n            return;\n          }\n          this.audioContextManager.resumeContext();\n          // Create audio track only once and reuse, it will be updated with current content\n          if (!this.track) {\n            await this.audioElement.play();\n            let audioTrack = this.audioContextManager.getAudioTrack();\n            this.track = audioTrack;\n            resolve([audioTrack]);\n          } else {\n            if (!this.seeked) {\n              // if this was called in response to a play call\n              await this.audioElement.play();\n              resolve([this.track]);\n            } else {\n              // if seek happened, there is no play call/promise to be resolved, just reset seeked\n              this.seeked = false;\n            }\n          }\n        } catch (err) {\n          HMSLogger.e(this.TAG, 'Error playing audio', url, (err as ErrorEvent).message);\n          reject(err);\n        }\n      };\n      this.audioElement.onseeked = () => {\n        this.seeked = true;\n      };\n    });\n  }\n\n  getTracks() {\n    return this.track ? [this.track.id] : [];\n  }\n\n  getElement() {\n    return this.audioElement;\n  }\n\n  stop() {\n    this.audioElement?.pause();\n    this.audioElement?.removeAttribute('src');\n    this.audioElement = null;\n    this.audioContextManager.cleanup();\n    this.track = undefined;\n  }\n\n  private getAudioElement() {\n    if (this.audioElement) {\n      return this.audioElement;\n    }\n    const audioElement = document.createElement('audio');\n    audioElement.crossOrigin = 'anonymous';\n    audioElement.addEventListener('timeupdate', (event) => this.emit('progress', event));\n    audioElement.addEventListener('ended', () => {\n      this.emit('ended', null);\n    });\n    this.audioContextManager = new AudioContextManager(audioElement);\n    return audioElement;\n  }\n\n  private get TAG() {\n    return 'PlaylistAudioManager';\n  }\n}\n","import HMSLogger from '../utils/logger';\nimport { TypedEventEmitter } from '../utils/typed-event-emitter';\nimport { AudioContextManager } from './AudioContextManager';\n\n/**\n * This class handles video playlist management\n * - An video element, canvas and audio context which processes audio from video element is created\n *   in the constructor\n * It handles playback in the following steps\n *  - set's the url on the video element created in the constructor\n *  - oncanplaythrough event of the video element\n *    - resume the audio context if it is suspended\n *    - set width/height on canvas\n *    - captureStream on canvas element if not already captured\n *    - play the video element\n *    - on video element is played, it is drawn to canvas\n *    - Get audio track from the audio context manager\n *    - add audioTrack to canvas stream\n *    - The audio and video tracks are passed to playlist manager to publish\n */\nexport class PlaylistVideoManager extends TypedEventEmitter<{ ended: null; progress: Event }> {\n  private videoElement: HTMLVideoElement | null;\n  private canvasContext: CanvasRenderingContext2D | null;\n  private canvas!: HTMLCanvasElement;\n  private timer: any;\n  private tracks: MediaStreamTrack[] = [];\n  private audioContextManager!: AudioContextManager;\n  private DEFAUL_FPS = 24;\n  // This is to handle video playing when seekTo is called when video is paused\n  private seeked = false;\n\n  constructor() {\n    super();\n    this.videoElement = this.getVideoElement();\n    this.canvas = document.createElement('canvas');\n    this.canvasContext = this.canvas.getContext('2d');\n  }\n\n  play(url: string) {\n    return new Promise<MediaStreamTrack[]>((resolve, reject) => {\n      this.videoElement = this.getVideoElement();\n      this.videoElement.src = url;\n      this.seeked = false;\n      this.videoElement.onerror = () => {\n        const error = `Error loading ${url}`;\n        HMSLogger.e(this.TAG, error);\n        this.stop();\n        reject(error);\n      };\n      // oncanplaythrough is called when enough media is loaded for play to be possible in two cases -\n      //    * when play is called for the first time\n      //    * when user jumps to any mid track timestamp using seekTo\n      this.videoElement.oncanplaythrough = async () => {\n        try {\n          if (!this.videoElement) {\n            return;\n          }\n          this.canvas.width = this.videoElement.videoWidth;\n          this.canvas.height = this.videoElement.videoHeight;\n          // Capture stream only once and reuse the same tracks. it will be autoupdated with the selected video\n          if (this.tracks.length === 0) {\n            this.clearCanvasAndTracks();\n            //@ts-ignore\n            const stream = this.canvas.captureStream();\n            if (!stream) {\n              HMSLogger.e(this.TAG, 'Browser does not support captureStream');\n              return;\n            }\n            this.videoElement.onplay = this.drawImage;\n            this.audioContextManager.resumeContext();\n            await this.videoElement.play();\n            const audioTrack = this.audioContextManager.getAudioTrack();\n            stream.addTrack(audioTrack);\n            stream.getTracks().forEach((track: MediaStreamTrack) => {\n              this.tracks.push(track);\n            });\n            resolve(this.tracks);\n          } else {\n            // No need to capture canvas stream/get audio track. They wull be auto updated\n            if (!this.seeked) {\n              // if this was called in response to a play call\n              await this.videoElement.play();\n              resolve(this.tracks);\n            } else {\n              // if seek happened, there is no play call/promise to be resolved, just reset seeked\n              this.seeked = false;\n              // This event will be called on seekTo when paused. Just draw the one frame on canvas.\n              this.canvasContext?.drawImage(this.videoElement, 0, 0, this.canvas?.width, this.canvas?.height);\n            }\n          }\n        } catch (err) {\n          HMSLogger.e(this.TAG, 'Error playing video', url, (err as ErrorEvent).message);\n          reject(err);\n        }\n      };\n      this.videoElement.onseeked = () => {\n        this.seeked = true;\n      };\n    });\n  }\n\n  getTracks() {\n    return this.tracks.map((track) => track.id);\n  }\n\n  getElement() {\n    return this.videoElement;\n  }\n\n  stop() {\n    this.videoElement?.pause();\n    this.videoElement?.removeAttribute('src');\n    this.videoElement = null;\n    this.clearCanvasAndTracks();\n  }\n\n  private clearCanvasAndTracks() {\n    this.tracks = [];\n    // clear canvas before playing new video\n    this.canvasContext?.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    clearTimeout(this.timer);\n  }\n\n  private drawImage = () => {\n    if (this.videoElement && !this.videoElement.paused && !this.videoElement.ended) {\n      this.canvasContext?.drawImage(this.videoElement, 0, 0, this.canvas?.width, this.canvas?.height);\n      this.timer = setTimeout(() => {\n        this.drawImage();\n      }, 1000 / this.DEFAUL_FPS);\n    }\n  };\n\n  private getVideoElement() {\n    if (this.videoElement) {\n      return this.videoElement;\n    }\n    const videoElement = document.createElement('video');\n    videoElement.crossOrigin = 'anonymous';\n    videoElement.addEventListener('timeupdate', (event) => this.emit('progress', event));\n    videoElement.addEventListener('ended', () => {\n      this.emit('ended', null);\n    });\n    this.audioContextManager = new AudioContextManager(videoElement);\n    return videoElement;\n  }\n\n  private get TAG() {\n    return 'PlaylistVideoManager';\n  }\n}\n","import { HMSSdk } from '../sdk';\nimport { HMSPlaylistItem, HMSPlaylistType, HMSPlaylistManager, HMSPlaylistProgressEvent } from '../interfaces';\nimport { PlaylistAudioManager } from './PlaylistAudioManager';\nimport { PlaylistVideoManager } from './PlaylistVideoManager';\nimport HMSLogger from '../utils/logger';\nimport { ErrorFactory, HMSAction } from '../error/ErrorFactory';\nimport { TypedEventEmitter } from '../utils/typed-event-emitter';\n\ntype PlaylistManagerState<T> = {\n  audio: {\n    list: HMSPlaylistItem<T>[];\n    currentIndex: number;\n  };\n  video: {\n    list: HMSPlaylistItem<T>[];\n    currentIndex: number;\n  };\n};\n\nconst INITIAL_STATE: PlaylistManagerState<any> = {\n  audio: {\n    list: [],\n    currentIndex: -1,\n  },\n  video: {\n    list: [],\n    currentIndex: -1,\n  },\n};\n\nexport class PlaylistManager\n  extends TypedEventEmitter<{ newTrackStart: HMSPlaylistItem<any>; playlistEnded: HMSPlaylistType }>\n  implements HMSPlaylistManager {\n  private state = { audio: { ...INITIAL_STATE.audio }, video: { ...INITIAL_STATE.video } };\n  private audioManager: PlaylistAudioManager;\n  private videoManager: PlaylistVideoManager;\n\n  constructor(private sdk: HMSSdk) {\n    super();\n    this.audioManager = new PlaylistAudioManager();\n    this.videoManager = new PlaylistVideoManager();\n    this.addListeners();\n  }\n\n  getList<T>(type: HMSPlaylistType = HMSPlaylistType.audio): HMSPlaylistItem<T>[] {\n    return this.state[type].list;\n  }\n\n  setList<T>(list: HMSPlaylistItem<T>[]): void {\n    if (!list || list.length === 0) {\n      HMSLogger.w(this.TAG, `Please pass in a list of HMSPlaylistItem's`);\n      return;\n    }\n    list.forEach((item: HMSPlaylistItem<T>) => {\n      this.state[item.type].list.push(item);\n    });\n  }\n\n  removeItem<T>(item: HMSPlaylistItem<T>): void {\n    const list = this.state[item.type].list;\n    const index = list.findIndex((playItem) => item.id === playItem.id);\n    if (index > -1) {\n      list.splice(index, 1);\n    }\n  }\n\n  seek(value: number, type: HMSPlaylistType = HMSPlaylistType.audio): void {\n    const { currentIndex } = this.state[type];\n    if (currentIndex === -1) {\n      throw ErrorFactory.PlaylistErrors.NoEntryToPlay(HMSAction.PLAYLIST, 'No item is currently playing');\n    }\n    const element = this.getElement(type);\n    if (element) {\n      let updatedValue = Math.max(element.currentTime + value, 0);\n      element.currentTime = Math.min(updatedValue, element.duration);\n    }\n  }\n\n  seekTo(value: number, type: HMSPlaylistType = HMSPlaylistType.audio): void {\n    const { currentIndex } = this.state[type];\n    if (currentIndex === -1) {\n      throw ErrorFactory.PlaylistErrors.NoEntryToPlay(HMSAction.PLAYLIST, 'No item is currently playing');\n    }\n    if (value < 0) {\n      throw Error('value cannot be negative');\n    }\n    const element = this.getElement(type);\n    if (element) {\n      element.currentTime = Math.min(value, element.duration);\n    }\n  }\n\n  setVolume(value: number, type: HMSPlaylistType = HMSPlaylistType.audio): void {\n    if (value < 0 || value > 100) {\n      throw Error('Please pass a valid number between 0-100');\n    }\n    const element = this.getElement(type);\n    if (element) {\n      element.volume = value * 0.01;\n    } else {\n      HMSLogger.w(this.TAG, `No valid element of type ${type} found`);\n    }\n  }\n\n  getVolume(type: HMSPlaylistType = HMSPlaylistType.audio): number {\n    const element = this.getElement(type);\n    if (element) {\n      return element.volume * 100;\n    } else {\n      HMSLogger.w(this.TAG, `No valid element of type ${type} found`);\n    }\n    return 0;\n  }\n\n  getCurrentTime(type: HMSPlaylistType = HMSPlaylistType.audio) {\n    const element = this.getElement(type);\n    return element?.currentTime || 0;\n  }\n\n  getCurrentIndex(type: HMSPlaylistType = HMSPlaylistType.audio) {\n    return this.state[type].currentIndex;\n  }\n\n  getCurrentProgress(type: HMSPlaylistType = HMSPlaylistType.audio) {\n    const { list, currentIndex } = this.state[type];\n    const activeUrl = list[currentIndex]?.url;\n    const element = this.getElement(type);\n    if (!activeUrl || !element) {\n      return 0;\n    }\n    return Math.floor(100 * (element.currentTime / element.duration));\n  }\n\n  getCurrentSelection(type: HMSPlaylistType = HMSPlaylistType.audio) {\n    const { list, currentIndex } = this.state[type];\n    if (currentIndex === -1) {\n      return undefined;\n    }\n    return list[currentIndex];\n  }\n\n  isPlaying(type: HMSPlaylistType = HMSPlaylistType.audio) {\n    const element = this.getElement(type);\n    return !!element && !element.paused;\n  }\n\n  async setEnabled(\n    enabled: boolean,\n    { id, type = HMSPlaylistType.audio }: { id: string; type: HMSPlaylistType },\n  ): Promise<void> {\n    const list = this.state[type].list;\n    const currentIndex = list.findIndex((item) => item.id === id);\n    if (!id || currentIndex === -1) {\n      HMSLogger.w(this.TAG, 'Pass a valid id');\n      return;\n    }\n    const url = this.state[type].list[currentIndex].url;\n    if (enabled) {\n      await this.play(url, type);\n    } else {\n      await this.pause(url, type);\n    }\n    this.state[type].currentIndex = currentIndex;\n    this.setDuration(type);\n  }\n\n  async playNext(type: HMSPlaylistType = HMSPlaylistType.audio): Promise<void> {\n    const { list, currentIndex } = this.state[type];\n    if (currentIndex >= list.length - 1) {\n      throw ErrorFactory.PlaylistErrors.NoEntryToPlay(HMSAction.PLAYLIST, 'Reached end of playlist');\n    }\n    await this.play(list[currentIndex + 1].url, type);\n    this.state[type].currentIndex = currentIndex + 1;\n    this.setDuration(type);\n  }\n\n  async playPrevious(type: HMSPlaylistType = HMSPlaylistType.audio): Promise<void> {\n    const { list, currentIndex } = this.state[type];\n    if (currentIndex <= 0) {\n      throw ErrorFactory.PlaylistErrors.NoEntryToPlay(HMSAction.PLAYLIST, 'Reached start of playlist');\n    }\n    await this.play(list[currentIndex - 1].url, type);\n    this.state[type].currentIndex = currentIndex - 1;\n    this.setDuration(type);\n  }\n\n  async stop(type: HMSPlaylistType = HMSPlaylistType.audio): Promise<void> {\n    const manager = type === HMSPlaylistType.audio ? this.audioManager : this.videoManager;\n    await this.removeTracks(type);\n    manager.stop();\n    this.state[type].currentIndex = -1;\n  }\n\n  cleanup() {\n    this.state = { audio: { ...INITIAL_STATE.audio }, video: { ...INITIAL_STATE.video } };\n    this.audioManager.stop();\n    this.videoManager.stop();\n  }\n\n  onProgress(fn: (progress: HMSPlaylistProgressEvent) => void) {\n    this.videoManager.on('progress', () => {\n      try {\n        fn({\n          type: HMSPlaylistType.video,\n          progress: this.getCurrentProgress(HMSPlaylistType.video),\n        });\n      } catch (error) {\n        HMSLogger.e(this.TAG, 'Error in onProgress callback');\n      }\n    });\n    this.audioManager.on('progress', () => {\n      try {\n        fn({\n          type: HMSPlaylistType.audio,\n          progress: this.getCurrentProgress(HMSPlaylistType.audio),\n        });\n      } catch (error) {\n        HMSLogger.e(this.TAG, 'Error in onProgress callback');\n      }\n    });\n  }\n\n  onNewTrackStart<T>(fn: (item: HMSPlaylistItem<T>) => void) {\n    this.on('newTrackStart', fn);\n  }\n\n  onPlaylistEnded(fn: (type: HMSPlaylistType) => void) {\n    this.on('playlistEnded', fn);\n  }\n\n  private getElement(type: HMSPlaylistType = HMSPlaylistType.audio) {\n    return type === HMSPlaylistType.audio ? this.audioManager.getElement() : this.videoManager.getElement();\n  }\n\n  private async removeTracks(type: HMSPlaylistType = HMSPlaylistType.audio) {\n    const manager = type === HMSPlaylistType.audio ? this.audioManager : this.videoManager;\n    const tracks = manager.getTracks();\n    for (let trackId of tracks) {\n      await this.removeTrack(trackId);\n    }\n  }\n\n  private async play(url: string, type: HMSPlaylistType = HMSPlaylistType.audio): Promise<void> {\n    const element = this.getElement(type);\n    if (element && !element.paused && element.src.includes(url)) {\n      HMSLogger.w(this.TAG, `The ${type} is currently playing`);\n      return;\n    }\n    if (element && element.src.includes(url)) {\n      await element.play();\n    } else {\n      element?.pause();\n      let tracks: MediaStreamTrack[];\n      if (type === HMSPlaylistType.audio) {\n        tracks = await this.audioManager.play(url);\n      } else {\n        tracks = await this.videoManager.play(url);\n      }\n      for (const track of tracks) {\n        await this.addTrack(track, type === HMSPlaylistType.audio ? 'audioplaylist' : 'videoplaylist');\n      }\n    }\n  }\n\n  private setDuration(type: HMSPlaylistType = HMSPlaylistType.audio) {\n    const element = this.getElement(type);\n    const { list, currentIndex } = this.state[type];\n    if (list[currentIndex]) {\n      list[currentIndex].duration = element?.duration || 0;\n    }\n    this.emit('newTrackStart', list[currentIndex]);\n  }\n\n  private async pause(url: string, type: HMSPlaylistType = HMSPlaylistType.audio): Promise<void> {\n    const el = this.getElement(type);\n    if (el && !el.paused && el.src.includes(url)) {\n      el.pause();\n      HMSLogger.d(this.TAG, 'paused url', url);\n    } else {\n      HMSLogger.w(this.TAG, 'The passed in url is not currently playing');\n    }\n  }\n\n  private addListeners() {\n    this.audioManager.on('ended', () => this.handleEnded(HMSPlaylistType.audio));\n    this.videoManager.on('ended', () => this.handleEnded(HMSPlaylistType.video));\n  }\n\n  /**\n   * Remove tracks if reached the end of list otherwise play next\n   * @param {HMSPlaylistType} type\n   */\n  private async handleEnded(type: HMSPlaylistType = HMSPlaylistType.audio) {\n    const { list, currentIndex } = this.state[type];\n    if (currentIndex === list.length - 1) {\n      await this.stop(type);\n      this.emit('playlistEnded', type);\n    } else {\n      this.playNext(type);\n    }\n  }\n\n  private addTrack = async (track: MediaStreamTrack, source: string) => {\n    await this.sdk.addTrack(track, source);\n    HMSLogger.d(this.TAG, 'Playlist track added', track);\n  };\n\n  private removeTrack = async (trackId: string) => {\n    await this.sdk.removeTrack(trackId);\n    HMSLogger.d(this.TAG, 'Playlist track removed', trackId);\n  };\n\n  private get TAG() {\n    return 'PlaylistManager';\n  }\n}\n","import { HMSConfig, HMSVideoCodec, HMSMessageInput, HMSDeviceChangeEvent } from '../interfaces';\nimport InitialSettings from '../interfaces/settings';\nimport HMSInterface from '../interfaces/hms';\nimport HMSTransport from '../transport';\nimport ITransportObserver from '../transport/ITransportObserver';\nimport { HMSAudioListener, HMSTrackUpdate, HMSUpdateListener } from '../interfaces/update-listener';\nimport HMSLogger, { HMSLogLevel } from '../utils/logger';\nimport decodeJWT from '../utils/jwt';\nimport { NotificationManager, HMSNotificationMethod, PeerLeaveRequestNotification } from '../notification-manager';\nimport {\n  HMSTrackSource,\n  HMSTrackType,\n  HMSLocalAudioTrack,\n  HMSLocalVideoTrack,\n  HMSRemoteVideoTrack,\n  HMSLocalTrack,\n  HMSRemoteTrack,\n} from '../media/tracks';\nimport { HMSException } from '../error/HMSException';\nimport HMSRoom from './models/HMSRoom';\nimport { HMSLocalPeer, HMSPeer, HMSRemotePeer } from './models/peer';\nimport Message from './models/HMSMessage';\nimport HMSLocalStream from '../media/streams/HMSLocalStream';\nimport { HMSVideoTrackSettingsBuilder, HMSAudioTrackSettingsBuilder } from '../media/settings';\nimport { AudioSinkManager } from '../audio-sink-manager';\nimport { DeviceManager, AudioOutputManager } from '../device-manager';\nimport { HMSAnalyticsLevel } from '../analytics/AnalyticsEventLevel';\nimport analyticsEventsService from '../analytics/AnalyticsEventsService';\nimport { TransportState } from '../transport/models/TransportState';\nimport { ErrorFactory, HMSAction } from '../error/ErrorFactory';\nimport { ErrorCodes } from '../error/ErrorCodes';\nimport { HMSPreviewListener } from '../interfaces/preview-listener';\nimport { IErrorListener } from '../interfaces/error-listener';\nimport { IStore, Store } from './store';\nimport { DeviceChangeListener } from '../interfaces/device-change-listener';\nimport { HMSRoleChangeRequest, HMSRole, HMSChangeMultiTrackStateParams } from '../interfaces';\nimport RoleChangeManager from './RoleChangeManager';\nimport { AutoplayError, AutoplayEvent } from '../audio-sink-manager/AudioSinkManager';\nimport { HMSLeaveRoomRequest } from '../interfaces/leave-room-request';\nimport { DeviceStorageManager } from '../device-manager/DeviceStorage';\nimport { LocalTrackManager } from './LocalTrackManager';\nimport { PlaylistManager } from '../playlist-manager';\nimport { RTMPRecordingConfig } from '../interfaces/rtmp-recording-config';\nimport { isNode } from '../utils/support';\n\n// @DISCUSS: Adding it here as a hotfix\nconst defaultSettings = {\n  isAudioMuted: false,\n  isVideoMuted: false,\n  audioInputDeviceId: 'default',\n  audioOutputDeviceId: 'default',\n  videoDeviceId: 'default',\n};\n\nconst INITIAL_STATE = {\n  published: false,\n  isInitialised: false,\n  isReconnecting: false,\n  isPreviewInProgress: false,\n  deviceManagersInitialised: false,\n};\n\nexport class HMSSdk implements HMSInterface {\n  private transport!: HMSTransport;\n  private TAG: string = '[HMSSdk]:';\n  private listener?: HMSUpdateListener;\n  private errorListener?: IErrorListener;\n  private deviceChangeListener?: DeviceChangeListener;\n  private audioListener?: HMSAudioListener;\n  private store!: IStore;\n  private notificationManager!: NotificationManager;\n  private deviceManager!: DeviceManager;\n  private audioSinkManager!: AudioSinkManager;\n  private playlistManager!: PlaylistManager;\n  private audioOutput!: AudioOutputManager;\n  private transportState: TransportState = TransportState.Disconnected;\n  private roleChangeManager?: RoleChangeManager;\n  private localTrackManager!: LocalTrackManager;\n  private sdkState = { ...INITIAL_STATE };\n\n  private initStoreAndManagers() {\n    if (this.sdkState.isInitialised) {\n      /**\n       * Set listener after both join and preview, since they can have different listeners\n       */\n      this.notificationManager.setListener(this.listener);\n      this.audioSinkManager.setListener(this.listener);\n      return;\n    }\n\n    this.sdkState.isInitialised = true;\n    this.store = new Store();\n    this.playlistManager = new PlaylistManager(this);\n    this.notificationManager = new NotificationManager(this.store, this.listener, this.audioListener);\n    this.deviceManager = new DeviceManager(this.store);\n    this.audioSinkManager = new AudioSinkManager(this.store, this.notificationManager, this.deviceManager);\n    this.audioOutput = new AudioOutputManager(this.deviceManager, this.audioSinkManager);\n    this.audioSinkManager.addEventListener(AutoplayError, this.handleAutoplayError);\n    this.transport = new HMSTransport(this.observer, this.deviceManager, this.store);\n    this.localTrackManager = new LocalTrackManager(this.store, this.observer, this.deviceManager);\n  }\n\n  getPlaylistManager(): PlaylistManager {\n    return this.playlistManager;\n  }\n\n  getRecordingState() {\n    return this.store.getRoom()?.recording;\n  }\n\n  getRTMPState() {\n    return this.store.getRoom()?.rtmp;\n  }\n\n  private handleAutoplayError = (event: AutoplayEvent) => {\n    this.errorListener?.onError?.(event.error);\n  };\n\n  private get localPeer(): HMSLocalPeer | undefined {\n    return this.store?.getLocalPeer();\n  }\n\n  private observer: ITransportObserver = {\n    onNotification: (message: any) => {\n      if (message.method === HMSNotificationMethod.PEER_LEAVE_REQUEST) {\n        this.handlePeerLeaveRequest(message.params as PeerLeaveRequestNotification);\n        return;\n      }\n      this.notificationManager.handleNotification(message, this.sdkState.isReconnecting);\n    },\n\n    onTrackAdd: (track: HMSRemoteTrack) => {\n      this.notificationManager.handleTrackAdd(track);\n    },\n\n    onTrackRemove: (track: HMSRemoteTrack) => {\n      this.notificationManager.handleTrackRemove(track);\n    },\n\n    onTrackDegrade: (track: HMSRemoteVideoTrack) => {\n      HMSLogger.d(this.TAG, 'Sending Track Update Track Degraded', track);\n      this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_DEGRADED, track, this.store?.getPeerByTrackId(track.trackId)!);\n    },\n\n    onTrackRestore: (track: HMSRemoteVideoTrack) => {\n      HMSLogger.d(this.TAG, 'Sending Track Update Track Restored', track);\n      this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_RESTORED, track, this.store?.getPeerByTrackId(track.trackId)!);\n    },\n\n    onFailure: (exception: HMSException) => {\n      this.errorListener?.onError(exception);\n    },\n\n    onStateChange: async (state: TransportState, error?: HMSException) => {\n      switch (state) {\n        case TransportState.Joined:\n          if (this.transportState === TransportState.Reconnecting) {\n            this.listener?.onReconnected();\n          }\n          break;\n        case TransportState.Failed:\n          await this.leave();\n\n          this.errorListener?.onError?.(error!);\n          this.sdkState.isReconnecting = false;\n          break;\n        case TransportState.Reconnecting:\n          this.sdkState.isReconnecting = true;\n          this.listener?.onReconnecting(error!);\n          break;\n      }\n\n      this.transportState = state;\n    },\n  };\n\n  private handlePeerLeaveRequest = (message: PeerLeaveRequestNotification) => {\n    const peer = this.store.getPeerById(message.requested_by);\n    const request: HMSLeaveRoomRequest = {\n      roomEnded: message.room_end,\n      reason: message.reason,\n      requestedBy: peer!,\n    };\n    this.listener?.onRemovedFromRoom(request);\n    this.leave();\n  };\n\n  async preview(config: HMSConfig, listener: HMSPreviewListener) {\n    if (this.sdkState.isPreviewInProgress) {\n      return;\n    }\n    this.sdkState.isPreviewInProgress = true;\n    const { roomId, userId, role } = decodeJWT(config.authToken);\n    this.errorListener = listener;\n    this.deviceChangeListener = listener;\n    this.initStoreAndManagers();\n\n    this.store.setErrorListener(this.errorListener);\n    this.store.setConfig(config);\n    this.store.setRoom(new HMSRoom(roomId, config.userName, this.store));\n    const policy = this.store.getPolicyForRole(role);\n    const localPeer = new HMSLocalPeer({\n      name: config.userName || '',\n      customerUserId: userId,\n      customerDescription: config.metaData,\n      role: policy,\n    });\n\n    this.store.addPeer(localPeer);\n    HMSLogger.d(this.TAG, 'SDK Store', this.store);\n\n    const policyHandler = async () => {\n      this.notificationManager.removeEventListener('policy-change', policyHandler);\n      const tracks = await this.localTrackManager.getTracksToPublish(config.settings || defaultSettings);\n      tracks.forEach((track) => this.setLocalPeerTrack(track));\n      this.localPeer?.audioTrack && this.initPreviewTrackAudioLevelMonitor();\n      await this.initDeviceManagers();\n      listener.onPreview(this.store.getRoom(), tracks);\n      this.sdkState.isPreviewInProgress = false;\n    };\n\n    this.notificationManager.addEventListener('policy-change', policyHandler);\n\n    try {\n      await this.transport.connect(\n        config.authToken,\n        config.initEndpoint || 'https://prod-init.100ms.live/init',\n        this.localPeer!.peerId,\n      );\n    } catch (ex) {\n      this.errorListener?.onError(ex as HMSException);\n      this.sdkState.isPreviewInProgress = false;\n    }\n  }\n\n  private handleDeviceChangeError = (event: HMSDeviceChangeEvent) => {\n    HMSLogger.d(this.TAG, 'Device Change event', event);\n    this.deviceChangeListener?.onDeviceChange?.(event);\n    if (event.error && event.type) {\n      const track = event.type.includes('audio') ? this.localPeer?.audioTrack : this.localPeer?.videoTrack;\n      this.errorListener?.onError(event.error);\n      if (\n        [\n          ErrorCodes.TracksErrors.CANT_ACCESS_CAPTURE_DEVICE,\n          ErrorCodes.TracksErrors.DEVICE_IN_USE,\n          ErrorCodes.TracksErrors.DEVICE_NOT_AVAILABLE,\n        ].includes(event.error.code) &&\n        track\n      ) {\n        track.setEnabled(false);\n        this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_MUTED, track, this.localPeer!);\n      }\n    }\n  };\n\n  join(config: HMSConfig, listener: HMSUpdateListener) {\n    if (this.sdkState.isPreviewInProgress) {\n      throw ErrorFactory.GenericErrors.NotReady(HMSAction.JOIN, \"Preview is in progress, can't join\");\n    }\n\n    this.localPeer?.audioTrack?.destroyAudioLevelMonitor();\n    this.listener = listener;\n    this.errorListener = listener;\n    this.deviceChangeListener = listener;\n    this.initStoreAndManagers();\n\n    const storedConfig = this.store.getConfig();\n\n    if (storedConfig && config.settings) {\n      // preview was called\n      delete config.settings.audioOutputDeviceId;\n      delete config.settings.videoDeviceId;\n      delete config.settings.audioInputDeviceId;\n    }\n\n    this.store.setErrorListener(this.errorListener);\n    this.store.setConfig(config);\n    const { roomId, userId, role } = decodeJWT(config.authToken);\n\n    if (!this.localPeer) {\n      this.notificationManager.addEventListener('role-change', (e: any) => {\n        this.store.setPublishParams(e.detail.params.role.publishParams);\n      });\n\n      const localPeer = new HMSLocalPeer({\n        name: config.userName,\n        customerUserId: userId,\n        customerDescription: config.metaData || '',\n        role: this.store.getPolicyForRole(role),\n      });\n      this.store.addPeer(localPeer);\n    } else {\n      this.localPeer.name = config.userName;\n      this.localPeer.role = this.store.getPolicyForRole(role);\n      this.localPeer.customerUserId = userId;\n      this.localPeer.customerDescription = config.metaData || '';\n    }\n\n    this.roleChangeManager = new RoleChangeManager(\n      this.store,\n      this.transport,\n      this.publish.bind(this),\n      this.removeTrack.bind(this),\n      this.listener,\n    );\n    this.notificationManager.addEventListener(\n      'local-peer-role-update',\n      this.roleChangeManager.handleLocalPeerRoleUpdate,\n    );\n\n    HMSLogger.d(this.TAG, 'SDK Store', this.store);\n    HMSLogger.d(this.TAG, `⏳ Joining room ${roomId}`);\n\n    if (!this.store.getRoom()) {\n      // note: store room is used to handle server notifications in join and has to be done before join process starts\n      this.store.setRoom(new HMSRoom(roomId, config.userName, this.store));\n    }\n    HMSLogger.time(`join-room-${roomId}`);\n    this.transport\n      .join(\n        config.authToken,\n        this.localPeer!.peerId,\n        { name: config.userName, metaData: config.metaData || '' },\n        config.initEndpoint,\n        config.autoVideoSubscribe,\n      )\n      .then(async () => {\n        HMSLogger.d(this.TAG, `✅ Joined room ${roomId}`);\n        // if delay fix is set, call onJoin before publishing\n        //@ts-ignore\n        if (window.HMS?.JOIN_DELAY_FIX) {\n          this.notifyJoin();\n        }\n        if (this.publishParams && !this.sdkState.published && !isNode) {\n          await this.publish(config.settings || defaultSettings);\n        }\n        //@ts-ignore\n        if (!window.HMS?.JOIN_DELAY_FIX) {\n          this.notifyJoin();\n        }\n      })\n      .catch((error) => {\n        this.listener?.onError(error as HMSException);\n        HMSLogger.e(this.TAG, 'Unable to join room', error);\n      })\n      .then(() => {\n        HMSLogger.timeEnd(`join-room-${roomId}`);\n      });\n  }\n\n  private cleanUp() {\n    this.store.cleanUp();\n    this.cleanDeviceManagers();\n    DeviceStorageManager.cleanup();\n    this.playlistManager.cleanup();\n    HMSLogger.cleanUp();\n    this.sdkState = { ...INITIAL_STATE };\n    /**\n     * when leave is called after preview itself without join.\n     * Store won't have the tracks in this case\n     */\n    if (this.localPeer) {\n      this.localPeer.audioTrack?.cleanup();\n      this.localPeer.audioTrack = undefined;\n      this.localPeer.videoTrack?.cleanup();\n      this.localPeer.videoTrack = undefined;\n    }\n    this.listener = undefined;\n    if (this.roleChangeManager) {\n      this.notificationManager.removeEventListener(\n        'local-peer-role-update',\n        this.roleChangeManager.handleLocalPeerRoleUpdate,\n      );\n    }\n  }\n\n  async leave() {\n    const room = this.store.getRoom();\n    if (room) {\n      const roomId = room.id;\n      HMSLogger.d(this.TAG, `⏳ Leaving room ${roomId}`);\n      // browsers often put limitation on amount of time a function set on window onBeforeUnload can take in case of\n      // tab refresh or close. Therefore prioritise the leave action over anything else, if tab is closed/refreshed\n      // we would want leave to succeed to stop stucked peer for others. The followup cleanup however is important\n      // for cases where uses stays on the page post leave.\n      await this.transport?.leave();\n      this.cleanUp();\n      HMSLogger.d(this.TAG, `✅ Left room ${roomId}`);\n    }\n  }\n\n  getLocalPeer() {\n    return this.store.getLocalPeer();\n  }\n\n  getPeers() {\n    const peers = this.store.getPeers();\n    HMSLogger.d(this.TAG, `Got peers`, peers);\n    return peers;\n  }\n\n  getAudioOutput() {\n    return this.audioOutput;\n  }\n\n  sendMessage(type: string, message: string) {\n    this.sendMessageInternal({ message, type });\n  }\n\n  async sendBroadcastMessage(message: string, type?: string) {\n    return await this.sendMessageInternal({ message, type });\n  }\n\n  async sendGroupMessage(message: string, roles: HMSRole[], type?: string) {\n    const knownRoles = this.store.getKnownRoles();\n    const recipientRoles =\n      roles.filter((role) => {\n        return knownRoles[role.name];\n      }) || [];\n    if (recipientRoles.length === 0) {\n      throw ErrorFactory.GenericErrors.ValidationFailed('No valid role is present', roles);\n    }\n    return await this.sendMessageInternal({ message, recipientRoles: roles, type });\n  }\n\n  async sendDirectMessage(message: string, peer: HMSPeer, type?: string) {\n    let recipientPeer = this.store.getPeerById(peer.peerId);\n    if (!recipientPeer) {\n      throw ErrorFactory.GenericErrors.ValidationFailed('Invalid peer - peer not present in the room', peer);\n    }\n    if (this.localPeer?.peerId === peer.peerId) {\n      throw ErrorFactory.GenericErrors.ValidationFailed('Cannot send message to self');\n    }\n    return await this.sendMessageInternal({ message, recipientPeer: peer, type });\n  }\n\n  private async sendMessageInternal({ recipientRoles, recipientPeer, type = 'chat', message }: HMSMessageInput) {\n    if (message.replace(/\\u200b/g, ' ').trim() === '') {\n      HMSLogger.w(this.TAG, 'sendMessage', 'Ignoring empty message send');\n      throw ErrorFactory.GenericErrors.ValidationFailed('Empty message not allowed');\n    }\n    const hmsMessage = new Message({\n      sender: this.localPeer!,\n      type,\n      message,\n      recipientPeer,\n      recipientRoles,\n      time: new Date(),\n    });\n    HMSLogger.d(this.TAG, 'Sending Message:: ', hmsMessage);\n    await this.transport.sendMessage(hmsMessage);\n    return hmsMessage;\n  }\n\n  async startScreenShare(onStop: () => void, audioOnly = false) {\n    const publishParams = this.publishParams;\n    if (!publishParams) return;\n\n    const { screen, allowed } = publishParams;\n    const canPublishScreen = allowed && allowed.includes('screen');\n\n    if (!canPublishScreen) {\n      HMSLogger.e(this.TAG, `Role ${this.localPeer?.role} cannot share screen`);\n      return;\n    }\n\n    if (this.localPeer?.auxiliaryTracks?.find((track) => track.source === 'screen')) {\n      throw Error('Cannot share multiple screens');\n    }\n\n    const dimensions = this.store.getSimulcastDimensions('screen');\n    const [videoTrack, audioTrack] = await this.transport!.getLocalScreen(\n      new HMSVideoTrackSettingsBuilder()\n        // Don't cap maxBitrate for screenshare.\n        // If publish params doesn't have bitRate value - don't set maxBitrate.\n        .maxBitrate(screen.bitRate, false)\n        .codec(screen.codec as HMSVideoCodec)\n        .maxFramerate(screen.frameRate)\n        .setWidth(dimensions?.width || screen.width)\n        .setHeight(dimensions?.height || screen.height)\n        .build(),\n      new HMSAudioTrackSettingsBuilder().build(),\n    );\n\n    const handleEnded = () => {\n      this.stopEndedScreenshare(onStop);\n    };\n\n    const tracks = [];\n    if (audioOnly) {\n      videoTrack.nativeTrack.stop();\n      if (!audioTrack) {\n        throw Error('Select share audio when sharing screen');\n      }\n      tracks.push(audioTrack);\n      audioTrack.nativeTrack.onended = handleEnded;\n    } else {\n      tracks.push(videoTrack);\n      videoTrack.nativeTrack.onended = handleEnded;\n      // audio track is not always available\n      if (audioTrack) {\n        tracks.push(audioTrack);\n      }\n    }\n    await this.transport.publish(tracks);\n    tracks.forEach((track) => {\n      track.peerId = this.localPeer?.peerId;\n      this.localPeer?.auxiliaryTracks.push(track);\n      this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_ADDED, track, this.localPeer!);\n    });\n  }\n\n  private async stopEndedScreenshare(onStop: () => void) {\n    HMSLogger.d(this.TAG, `✅ Screenshare ended natively`);\n    await this.stopScreenShare();\n    onStop();\n  }\n\n  async stopScreenShare() {\n    HMSLogger.d(this.TAG, `✅ Screenshare ended from app`);\n    const screenTracks = this.localPeer?.auxiliaryTracks.filter((t) => t.source === 'screen');\n    if (screenTracks) {\n      for (let track of screenTracks) {\n        await this.removeTrack(track.trackId);\n      }\n    }\n  }\n\n  async addTrack(track: MediaStreamTrack, source: HMSTrackSource = 'regular'): Promise<void> {\n    if (!track) {\n      HMSLogger.w(this.TAG, 'Please pass a valid MediaStreamTrack');\n      return;\n    }\n    if (!this.localPeer) {\n      throw ErrorFactory.GenericErrors.NotConnected(HMSAction.VALIDATION, 'No local peer present, cannot addTrack');\n    }\n    const isTrackPresent = this.localPeer.auxiliaryTracks.find((t) => t.trackId === track.id);\n    if (isTrackPresent) {\n      return;\n    }\n\n    const type = track.kind;\n    const nativeStream = new MediaStream([track]);\n    const stream = new HMSLocalStream(nativeStream);\n\n    const TrackKlass = type === 'audio' ? HMSLocalAudioTrack : HMSLocalVideoTrack;\n    const hmsTrack = new TrackKlass(stream, track, source);\n    if (source === 'videoplaylist') {\n      const settings: { maxBitrate?: number; width?: number; height?: number } = {};\n      if (type === 'audio') {\n        settings.maxBitrate = 64;\n      } else {\n        settings.maxBitrate = 1000;\n        const { width, height } = track.getSettings();\n        settings.width = width;\n        settings.height = height;\n      }\n      // TODO: rt update from policy once policy is updated\n      await hmsTrack.setSettings(settings);\n    } else if (source === 'audioplaylist') {\n      // TODO: rt update from policy once policy is updated\n      await hmsTrack.setSettings({ maxBitrate: 64 });\n    }\n\n    await this.transport?.publish([hmsTrack]);\n    hmsTrack.peerId = this.localPeer?.peerId;\n    this.localPeer?.auxiliaryTracks.push(hmsTrack);\n    this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_ADDED, hmsTrack, this.localPeer!);\n  }\n\n  async removeTrack(trackId: string) {\n    if (!this.localPeer) {\n      throw ErrorFactory.GenericErrors.NotConnected(HMSAction.VALIDATION, 'No local peer present, cannot removeTrack');\n    }\n    const trackIndex = this.localPeer.auxiliaryTracks.findIndex((t) => t.trackId === trackId);\n    if (trackIndex > -1) {\n      const track = this.localPeer.auxiliaryTracks[trackIndex];\n      await this.transport!.unpublish([track]);\n      this.localPeer.auxiliaryTracks.splice(trackIndex, 1);\n      this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_REMOVED, track, this.localPeer);\n    } else {\n      HMSLogger.w(this.TAG, `No track found for ${trackId}`);\n    }\n  }\n\n  setAnalyticsLevel(level: HMSAnalyticsLevel) {\n    analyticsEventsService.level = level;\n  }\n\n  setLogLevel(level: HMSLogLevel) {\n    HMSLogger.level = level;\n  }\n\n  addAudioListener(audioListener: HMSAudioListener) {\n    this.audioListener = audioListener;\n    this.notificationManager.setAudioListener(audioListener);\n  }\n\n  async changeRole(forPeer: HMSPeer, toRole: string, force: boolean = false) {\n    if (!forPeer.role || forPeer.role.name === toRole) {\n      return;\n    }\n\n    await this.transport?.changeRole(forPeer, toRole, force);\n  }\n\n  async acceptChangeRole(request: HMSRoleChangeRequest) {\n    await this.transport?.acceptRoleChange(request);\n  }\n\n  async endRoom(lock: boolean, reason: string) {\n    if (!this.localPeer) {\n      throw ErrorFactory.GenericErrors.NotConnected(HMSAction.VALIDATION, 'No local peer present, cannot end room');\n    }\n    await this.transport?.endRoom(lock, reason);\n  }\n\n  async removePeer(peer: HMSRemotePeer, reason: string) {\n    if (!this.localPeer) {\n      throw ErrorFactory.GenericErrors.NotConnected(HMSAction.VALIDATION, 'No local peer present, cannot remove peer');\n    }\n\n    if (!this.store.getPeerById(peer.peerId)) {\n      throw ErrorFactory.GenericErrors.ValidationFailed('Invalid peer, given peer not present in room', peer);\n    }\n    await this.transport?.removePeer(peer.peerId, reason);\n  }\n\n  async startRTMPOrRecording(params: RTMPRecordingConfig) {\n    if (!this.localPeer) {\n      throw ErrorFactory.GenericErrors.NotConnected(\n        HMSAction.VALIDATION,\n        'No local peer present, cannot start streaming or recording',\n      );\n    }\n    await this.transport?.startRTMPOrRecording(params);\n    // emit this notification to update current peer recording status\n    const rtmpStart = { method: HMSNotificationMethod.RTMP_START, params: {} };\n    const recordingStart = { method: HMSNotificationMethod.RECORDING_START, params: { type: 'Browser' } };\n    if (params.rtmpURLs?.length) {\n      this.notificationManager.handleNotification(rtmpStart);\n    }\n    if (params.record) {\n      this.notificationManager.handleNotification(recordingStart);\n    }\n  }\n\n  async stopRTMPAndRecording() {\n    if (!this.localPeer) {\n      throw ErrorFactory.GenericErrors.NotConnected(\n        HMSAction.VALIDATION,\n        'No local peer present, cannot stop streaming or recording',\n      );\n    }\n    await this.transport?.stopRTMPOrRecording();\n    // emit this notification to update current peer recording status\n    const { recording, rtmp } = this.store.getRoom();\n    if (recording?.browser.running) {\n      this.notificationManager.handleNotification({\n        method: HMSNotificationMethod.RECORDING_STOP,\n        params: { type: 'Browser' },\n      });\n    }\n    if (rtmp?.running) {\n      this.notificationManager.handleNotification({ method: HMSNotificationMethod.RTMP_STOP, params: {} });\n    }\n  }\n\n  getRoles(): HMSRole[] {\n    return Object.values(this.store.getKnownRoles());\n  }\n\n  async changeTrackState(forRemoteTrack: HMSRemoteTrack, enabled: boolean) {\n    if (forRemoteTrack.type === HMSTrackType.VIDEO && forRemoteTrack.source !== 'regular') {\n      HMSLogger.w(this.TAG, `Muting non-regular video tracks is currently not supported`);\n      return;\n    }\n\n    if (forRemoteTrack.enabled === enabled) {\n      HMSLogger.w(this.TAG, `Aborting change track state, track already has enabled - ${enabled}`, forRemoteTrack);\n      return;\n    }\n\n    if (!this.store.getTrackById(forRemoteTrack.trackId)) {\n      throw ErrorFactory.GenericErrors.ValidationFailed('No track found for change track state', forRemoteTrack);\n    }\n\n    const peer = this.store.getPeerByTrackId(forRemoteTrack.trackId);\n\n    if (!peer) {\n      throw ErrorFactory.GenericErrors.ValidationFailed('No peer found for change track state', forRemoteTrack);\n    }\n\n    await this.transport?.changeTrackState({\n      requested_for: peer.peerId,\n      track_id: forRemoteTrack.trackId,\n      stream_id: forRemoteTrack.stream.id,\n      mute: !enabled,\n    });\n  }\n\n  async changeMultiTrackState(params: HMSChangeMultiTrackStateParams) {\n    if (typeof params.enabled !== 'boolean') {\n      throw ErrorFactory.GenericErrors.ValidationFailed('Pass a boolean for enabled');\n    }\n    const { enabled, roles, type, source } = params;\n    await this.transport?.changeMultiTrackState({\n      value: !enabled,\n      type,\n      source,\n      roles: roles?.map((role) => role?.name),\n    });\n  }\n\n  private async publish(initialSettings: InitialSettings) {\n    const tracks = await this.localTrackManager.getTracksToPublish(initialSettings);\n    await this.setAndPublishTracks(tracks);\n    this.sdkState.published = true;\n  }\n\n  private async setAndPublishTracks(tracks: HMSLocalTrack[]) {\n    for (const track of tracks) {\n      await this.transport.publish([track]);\n      this.setLocalPeerTrack(track);\n      this.listener?.onTrackUpdate(HMSTrackUpdate.TRACK_ADDED, track, this.localPeer!);\n    }\n    await this.initDeviceManagers();\n  }\n\n  private setLocalPeerTrack(track: HMSLocalTrack) {\n    track.peerId = this.localPeer?.peerId;\n    switch (track.type) {\n      case HMSTrackType.AUDIO:\n        this.localPeer!.audioTrack = track as HMSLocalAudioTrack;\n        break;\n\n      case HMSTrackType.VIDEO:\n        this.localPeer!.videoTrack = track as HMSLocalVideoTrack;\n        break;\n    }\n  }\n\n  private async initDeviceManagers() {\n    // No need to initialise and add listeners if already initialised in preview\n    if (this.sdkState.deviceManagersInitialised) {\n      return;\n    }\n    this.sdkState.deviceManagersInitialised = true;\n    this.deviceManager.addEventListener('audio-device-change', this.handleDeviceChangeError);\n    this.deviceManager.addEventListener('video-device-change', this.handleDeviceChangeError);\n    await this.deviceManager.init();\n    this.deviceManager.updateOutputDevice(DeviceStorageManager.getSelection()?.audioOutput?.deviceId);\n    this.audioSinkManager.init(this.store.getConfig()?.audioSinkElementId);\n  }\n\n  private cleanDeviceManagers() {\n    this.deviceManager.removeEventListener('audio-device-change', this.handleDeviceChangeError);\n    this.deviceManager.removeEventListener('video-device-change', this.handleDeviceChangeError);\n    this.deviceManager.cleanUp();\n    this.audioSinkManager.removeEventListener(AutoplayError, this.handleAutoplayError);\n    this.audioSinkManager.cleanUp();\n  }\n\n  private initPreviewTrackAudioLevelMonitor() {\n    this.localPeer?.audioTrack?.initAudioLevelMonitor();\n    this.localPeer?.audioTrack?.audioLevelMonitor?.on('AUDIO_LEVEL_UPDATE', (audioLevelUpdate) => {\n      const hmsSpeakers = audioLevelUpdate\n        ? [{ audioLevel: audioLevelUpdate.audioLevel, peer: this.localPeer!, track: this.localPeer?.audioTrack! }]\n        : [];\n      this.store.updateSpeakers(hmsSpeakers);\n      this.audioListener?.onAudioLevelUpdate(hmsSpeakers);\n    });\n  }\n\n  private get publishParams() {\n    return this.store?.getPublishParams();\n  }\n\n  private notifyJoin() {\n    const localPeer = this.store.getLocalPeer();\n\n    if (localPeer?.role) {\n      this.listener?.onJoin(this.store.getRoom());\n    } else {\n      this.notificationManager.once('policy-change', () => {\n        this.listener?.onJoin(this.store.getRoom());\n      });\n    }\n  }\n}\n","import { BuildGetMediaError, HMSGetMediaActions } from '../error/utils';\n\nexport async function getLocalStream(constraints: MediaStreamConstraints): Promise<MediaStream> {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    return stream;\n  } catch (err) {\n    throw BuildGetMediaError(err, HMSGetMediaActions.AV);\n  }\n}\n\nexport async function getLocalScreen(constraints: MediaStreamConstraints['video']): Promise<MediaStream> {\n  try {\n    // @ts-ignore [https://github.com/microsoft/TypeScript/issues/33232]\n    const stream = await navigator.mediaDevices.getDisplayMedia({ video: constraints, audio: false });\n    return stream;\n  } catch (err) {\n    throw BuildGetMediaError(err, HMSGetMediaActions.SCREEN);\n  }\n}\n\ninterface MediaDeviceGroups {\n  audioinput: MediaDeviceInfo[];\n  audiooutput: MediaDeviceInfo[];\n  videoinput: MediaDeviceInfo[];\n}\n\nexport async function getLocalDevices(): Promise<MediaDeviceGroups> {\n  try {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    const deviceGroups: MediaDeviceGroups = {\n      audioinput: [],\n      audiooutput: [],\n      videoinput: [],\n    };\n    devices.forEach((device) => deviceGroups[device.kind].push(device));\n    return deviceGroups;\n  } catch (err) {\n    throw BuildGetMediaError(err, HMSGetMediaActions.AV);\n  }\n}\n","import { HMSAction } from '../error/ErrorFactory';\nimport { HMSException } from '../error/HMSException';\nimport { HMSAudioTrackSettingsBuilder } from '../media/settings/HMSAudioTrackSettings';\nimport { HMSVideoTrackSettingsBuilder } from '../media/settings/HMSVideoTrackSettings';\nimport { getLocalStream } from './media';\nimport { getAudioTrack, getVideoTrack } from './track';\n\n// Errors out when there's any device error, returns false when there are no device errors.\nexport async function validateDeviceAV() {\n  const videoTrackSettings = new HMSVideoTrackSettingsBuilder().build();\n  const audioTrackSettings = new HMSAudioTrackSettingsBuilder().build();\n  /**\n   * Check audio failure.\n   * If audio failure - check AV failure.\n   * If AV failure - throw AV failure.\n   * If AV passed - throw audio failure.\n   *\n   * If audio passed - check video failure.\n   * If video failure - throw video failure.\n   * If video passed - no error - return false.\n   */\n  try {\n    const track = await getAudioTrack(audioTrackSettings);\n    track.stop();\n  } catch (audioError) {\n    if (isHMSDeviceError(audioError)) {\n      const stream = await getLocalStream({ audio: false, video: true });\n      stream.getTracks().forEach((track) => track.stop());\n      throw audioError;\n    }\n  }\n\n  const track = await getVideoTrack(videoTrackSettings);\n  track.stop();\n  return false;\n}\n\nfunction isHMSDeviceError(error: any) {\n  return error instanceof HMSException && error.action === HMSAction.TRACK;\n}\n","import adapter from 'webrtc-adapter';\n\nconsole.log(`%c ${adapter.browserDetails.browser} v${adapter.browserDetails.version}`, 'color: #2F80FF');\n\nexport * from './sdk';\nexport * from './media/tracks';\nexport * from './utils/media';\nexport * from './utils/device-error';\nexport * from './utils/support';\nexport * from './error/HMSException';\nexport * from './interfaces';\nexport * from './plugins';\nexport * from './utils/logger';\n"],"names":["undefined","HMSConnectionRole","HMSLogLevel","HMSLogger","v","tag","data","log","VERBOSE","d","DEBUG","i","INFO","w","WARN","e","ERROR","time","mark","TIME","timeEnd","TIMEEND","cleanUp","performance","clearMarks","clearMeasures","level","valueOf","console","debug","info","warn","error","entry","measure","duration","isPresent","value","fixMsid","desc","tracks","parsedSdp","sdpTransform","sdp","origin","username","startsWith","mediaTracks","Array","from","values","media","forEach","m","streamId","msid","split","trackId","find","val","type","stream_id","track_id","replace","getSdpTrackIdForMid","mid","trackSection","parseInt","enableOpusDtx","includes","ErrorCodes","WebSocketConnectionErrors","GENERIC_CONNECT","WEBSOCKET_CONNECTION_LOST","InitAPIErrors","SERVER_ERRORS","CONNECTION_LOST","HTTP_ERROR","INVALID_ENDPOINT_URL","ENDPOINT_UNREACHABLE","INVALID_TOKEN_FORMAT","TracksErrors","GENERIC_TRACK","CANT_ACCESS_CAPTURE_DEVICE","DEVICE_NOT_AVAILABLE","DEVICE_IN_USE","DEVICE_LOST_MIDWAY","NOTHING_TO_RETURN","INVALID_VIDEO_SETTINGS","CODEC_CHANGE_NOT_PERMITTED","AUTOPLAY_ERROR","WebrtcErrors","CREATE_OFFER_FAILED","CREATE_ANSWER_FAILED","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","ICE_FAILURE","WebsocketMethodErrors","ALREADY_JOINED","CANNOT_JOIN_PREVIEW_IN_PROGRESS","GenericErrors","NOT_CONNECTED","SIGNALLING","UNKNOWN","NOT_READY","JSON_PARSING_FAILED","TRACK_METADATA_MISSING","RTC_TRACK_MISSING","PEER_METADATA_MISSING","INVALID_ROLE","PlaylistErrors","NO_ENTRY_TO_PLAY","NO_ENTRY_IS_PLAYING","HMSException","code","name","action","message","description","isTerminal","Object","setPrototypeOf","prototype","toString","toAnalyticsProperties","error_name","error_code","error_message","error_description","is_terminal","addNativeError","nativeError","Error","HMSAction","ErrorFactory","GenericConnect","WebSocketConnectionLost","ServerErrors","ConnectionLost","HTTPError","InvalidEndpointURL","EndpointUnreachable","InvalidTokenFormat","GenericTrack","CantAccessCaptureDevice","deviceInfo","DeviceNotAvailable","DeviceInUse","DeviceLostMidway","NothingToReturn","InvalidVideoSettings","AutoplayBlocked","CodecChangeNotPermitted","CreateOfferFailed","CreateAnswerFailed","SetLocalDescriptionFailed","SetRemoteDescriptionFailed","ICEFailure","AlreadyJoined","CannotJoinPreviewInProgress","NotConnected","Signalling","Unknown","NotReady","JsonParsingFailed","jsonMessage","TrackMetadataMissing","RTCTrackMissing","PeerMetadataMissing","ValidationFailed","entity","VALIDATION","JSON","stringify","InvalidRole","MediaPluginErrors","PlatformNotSupported","InitFailed","ProcessingFailed","AddAlreadyInProgress","NoEntryToPlay","NoEntryPlaying","TAG","HMSConnection","role","signal","addTransceiver","track","init","nativeConnection","createOffer","options","offer","createAnswer","answer","setLocalDescription","setRemoteDescription","addIceCandidate","candidate","getSenders","removeTrack","sender","setMaxBitrate","maxBitrate","s","id","getTrackIDBeingSent","params","getParameters","encodings","length","setParameters","getStats","stats","reports","stat","push","close","iceConnectionState","connectionState","Publish","PUBLISH","SUBSCRIBE","remoteDescription","RENEGOTIATION_CALLBACK_ID","API_DATA_CHANNEL","ANALYTICS_BUFFER_SIZE","MAX_TRANSPORT_RETRIES","MAX_TRANSPORT_RETRY_DELAY","DEFAULT_SIGNAL_PING_TIMEOUT","SIGNAL_PING_INTERVAL","SUBSCRIBE_ICE_CONNECTION_CALLBACK_ID","SUBSCRIBE_TIMEOUT","RTC_STATS_MONITOR_INTERVAL","HMSPublishConnection","config","observer","transport","RTCPeerConnection","createDataChannel","protocol","onicecandidate","trickle","oniceconnectionstatechange","onIceConnectionChange","onconnectionstatechange","onConnectionStateChange","initAfterJoin","onnegotiationneeded","onRenegotiationNeeded","trackUpdate","HMSMediaStream","nativeStream","HMSRoomUpdate","HMSPeerUpdate","HMSTrackUpdate","HMSRoomType","HMSSimulcastLayer","simulcastMapping","f","HIGH","h","MEDIUM","q","LOW","HMSVideoCodec","HMSAudioCodec","HMSPlaylistType","HMSRemoteStream","connection","NONE","setAudio","enabled","audio","syncWithApiChannel","setVideo","layer","video","getSimulcastLayer","isAudioSubscribed","framerate","frameRate","sendOverApiDataChannel","HMSDataChannel","nativeChannel","metadata","onmessage","onMessage","send","label","readyState","HMSTrack","stream","source","nativeTrack","getMediaTrackSettings","getSettings","setEnabled","setSdpTrackId","sdpTrackId","setFirstTrackId","firstTrackId","cleanup","stop","HMSTrackType","HMSAudioTrack","AUDIO","kind","getVolume","audioElement","volume","setVolume","subscribeToAudio","setAudioElement","element","getAudioElement","getOutputDevice","outputDevice","srcObject","remove","setOutputDevice","device","setSinkId","deviceId","removeSink","window","HMS","AUDIO_SINK","addSink","MediaStream","existingTrackID","getAudioTracks","HMSRemoteAudioTrack","HMSVideoTrack","VIDEO","hasSinks","sinkCount","videoElement","addSinkInternal","getVideoTracks","HMSRemoteVideoTrack","_degraded","preferLayer","updateLayer","getSimulcastDefinitions","_layerDefinitions","setSimulcastDefinitons","definitions","setDegraded","newLayer","degraded","HMSSubscribeConnection","Subscribe","Map","pendingMessageQueue","msg","initNativeConnectionCallbacks","ondatachannel","channel","apiChannel","onApiChannelMessage","onopen","handlePendingApiMessages","ontrack","streams","remoteStreams","has","remote","set","onremovetrack","toRemoveTrackIdx","findIndex","toRemoveTrack","onTrackRemove","splice","get","TrackCls","transceiver","onTrackAdd","parsedUserAgent","UAParser","isNode","process","versions","node","isBrowser","checkIsSupported","isSupported","createUserAgent","version","getDevice","browser","getBrowser","os","getOS","vendor","isMobile","userAgent","InitService","fetchInitConfig","token","initEndpoint","region","url","getUrl","fetch","headers","Authorization","response","json","body","status","INIT","statusText","transformInitConfig","endpoint","URL","trim","searchParams","err","rtcConfiguration","iceServers","ice_servers","HMSSignalMethod","convertSignalMethodtoErrorAction","method","JOIN","OFFER","ANSWER","TRACK_UPDATE","TRACK","JsonRpcSignal","addEventListener","isConnected","onCloseHandler","bind","onMessageHandler","call","uuid","jsonrpc","socket","Promise","resolve","reject","callbacks","Number","notify","open","uri","removeEventListener","WebSocket","errorListener","openHandler","pingPongLoop","p","join","disableVidAutoSub","isJoinCompleted","pendingTrickle","target","TRICKLE","fromEntries","broadcast","BROADCAST","toSignalParams","recordStart","recordEnd","leave","LEAVE","endRoom","lock","reason","END_ROOM","sendEvent","event","ANALYTICS","ping","timeout","pingTime","Date","now","timer","setTimeout","pongTimeDiff","PING","timestamp","then","race","requestRoleChange","ROLE_CHANGE_REQUEST","acceptRoleChangeRequest","ROLE_CHANGE","requestTrackStateChange","TRACK_UPDATE_REQUEST","requestMultiTrackStateChange","CHANGE_TRACK_MUTE_STATE_REQUEST","removePeer","PEER_LEAVE_REQUEST","startRTMPOrRecording","START_RTMP_OR_RECORDING_REQUEST","stopRTMPAndRecording","STOP_RTMP_AND_RECORDING_REQUEST","text","parse","hasOwnProperty","typedResponse","cb","result","onNotification","onOffer","onTrickle","SERVER_ERROR","onServerError","pingTimeout","_isConnected","newValue","old","onOffline","onOnline","HMSAudioTrackSettingsBuilder","OPUS","googEchoCancellation","exact","googExperimentalEchoCancellation","autoGainControl","noiseSuppression","googHighpassFilter","googAudioMirroring","_volume","codec","_codec","_maxBitrate","_deviceId","advanced","_advanced","build","HMSAudioTrackSettings","toConstraints","audio_bitrate","audio_codec","HMSVideoTrackSettingsBuilder","VP8","setWidth","width","_width","setHeight","height","_height","maxFramerate","_maxFramerate","useDefault","HMSVideoTrackSettings","video_bitrate","video_codec","HMSTrackSettingsBuilder","_video","_audio","screen","_screen","simulcast","_simulcast","HMSTrackSettings","properties","audio_enabled","video_enabled","HMSGetMediaActions","convertMediaErrorToHMSException","toLowerCase","adapter","browserDetails","BuildGetMediaError","exception","getAudioTrack","settings","navigator","mediaDevices","getUserMedia","getVideoTrack","isEmptyTrack","blankCanvas","getEmptyVideoTrack","prevTrack","assign","document","createElement","getContext","fillRect","captureStream","emptyTrack","intervalID","setInterval","clearInterval","ctx","pixel","getImageData","red","fillStyle","onended","getEmptyAudioTrack","AudioContext","oscillator","createOscillator","dst","connect","createMediaStreamDestination","start","TypedEventEmitter","on","eventName","fn","off","emit","listeners","EventEmitter","THRESHOLD","UPDATE_THRESHOLD","TrackAudioLevelMonitor","input","inputBuffer","getChannelData","sum","rms","Math","sqrt","rawLevel","max","averaging","audioContext","audioSource","createMediaStreamSource","processor","createScriptProcessor","processVolume","destination","updateAudioLevel","audioLevel","ceil","min","audioLevelUpdate","prev","interval","HMSAudioPluginType","DomainCategory","getDomainCategory","baseurl","location","hostname","LOCAL","CUSTOM","domainCategory","AnalyticsEvent","includesPII","getTime","domain","HMSAnalyticsLevel","AnalyticsEventLevel","MediaPluginsAnalyticsFactory","failure","pluginName","plugin_name","audioPluginStats","loadTime","load_time","avgPreProcessingTime","avgProcessingTime","inputFrameRate","pluginFrameRate","avg_preprocessing_time","avg_processing_time","input_frame_rate","plugin_frame_rate","AnalyticsEventsService","addTransport","transports","removeTransport","indexOf","queue","pendingEvents","bufferSize","removedEvent","shift","flush","analyticsEventsService","AudioPluginsAnalytics","initTime","addedTimestamps","pluginAdded","added","removed","floor","clean","initWithTime","initFn","timeInMs","AUDIO_PLUGINS","HMSAudioPluginsManager","hmsTrack","plugins","pluginsMap","analytics","getPlugins","addPlugin","plugin","pluginAddInProgress","getName","addPluginInternal","startPluginsProcess","removePlugin","removePluginEntry","stopPluginsProcess","intermediateNode","disconnect","index","outputTrack","initElementsAndStream","sourceNode","audioStream","destinationNode","setProcessedTrack","processAudioThroughPlugins","processAudioTrack","context","LocalStorage","key","getStorage","storage","localStorage","stringItem","getItem","item","stringValue","setItem","clear","removeItem","DeviceStorage","setDevices","devices","rememberDevices","remember","updateSelection","groupId","newSelection","isSame","selectedDevices","getSelection","current","DeviceStorageManager","generateHasPropertyChanged","newSettings","oldSettings","hasChanged","prop","HMSLocalAudioTrack","pluginsManager","publishedTrackId","replaceTrackWith","prevState","newTrack","localStream","replaceSenderTrack","processedTrack","replaceStreamTrack","setSettings","internal","hasPropertyChanged","isLevelMonitored","Boolean","audioLevelMonitor","eventListeners","destroyAudioLevelMonitor","initAudioLevelMonitor","applyConstraints","listener","HMSVideoPluginType","sleep","ms","debounce","delay","args","clearTimeout","apply","RunningAverage","add","count","total","getAvg","reset","VideoPluginsAnalytics","preProcessingAvgs","processingAvgs","pluginInputFrameRate","VIDEO_PLUGINS","preProcessWithTime","preProcessFn","processWithTime","processFn","DEFAULT_FRAME_RATE","HMSVideoPluginsManager","pluginNumFramesToSkip","pluginNumFramesSkipped","numFramesToSkip","startPluginsLoop","stopPluginsLoop","waitForRestart","pluginsLoopRunning","pluginsLoopState","inputCanvas","outputCanvas","inputVideo","outputStream","pluginsLoop","resetCanvases","sleepTimeMs","processingTime","doPreProcessing","processFramesThroughPlugins","addTrackToVideo","updateInputCanvas","skipProcessing","checkIfSkipRequired","getPluginType","TRANSFORM","processVideoFrame","ANALYZE","pause","muted","play","drawImage","outputCtx","inputCtx","skip","HMSLocalVideoTrack","replaceTrackWithBlank","HMSLocalStream","setConnection","getLocalScreen","videosettings","audioSettings","audioConstraints","constraints","googAutoGainControl","echoCancellation","getDisplayMedia","SCREEN","local","nativeVideoTrack","videoTrack","nativeAudioTrack","audioTrack","getLocalTracks","getEmptyLocalTracks","fetchTrackOptions","getNativeLocalTracks","nativeTracks","simulcastLayers","trackEncodings","active","direction","sendEncodings","setPreferredCodec","replaceTrack","withTrack","addTrack","removeSender","removedSenderCount","toRemoveLocalTrackIdx","HMSNotificationMethod","ActiveSpeakerManager","store","audioListener","handleActiveSpeakers","speakerList","speakers","hmsSpeakers","map","speaker","peer","getPeerById","peer_id","getTrackById","onAudioLevelUpdate","updateSpeakers","dominantSpeaker","dominantSpeakerPeer","onPeerUpdate","BECAME_DOMINANT_SPEAKER","RESIGNED_DOMINANT_SPEAKER","Message","recipientPeer","recipientRoles","roles","peerId","sendParams","HMSPeer","isLocal","customerUserId","customerDescription","updateRole","newRole","HMSIdFactory","uuidv4","HMSLocalPeer","peerData","makePeerId","HMSRemotePeer","BroadcastManager","handleBroadcast","messageNotification","notifPeer","notifMessage","notifRoles","user_id","knownRoles","getKnownRoles","getLocalPeer","hmsMessage","onMessageReceived","constructor","PeerListManager","peerManager","trackManager","peerList","peers","handlePeerList","currentPeerList","getRemotePeers","peersToRemove","filter","hmsPeer","peerNotification","handlePeerLeave","newPeerNotification","oldPeer","newPeerTrackStates","getPeerTracks","removePeerTrack","onTrackUpdate","TRACK_REMOVED","trackData","setTrackState","trackInfo","handleTrackUpdate","handlePeerJoin","trackIndex","auxiliaryTracks","PeerManager","hmsPeers","makePeer","PEER_LIST","processPendingTracks","PEER_JOINED","getPeers","PEER_LEFT","handlePeerUpdate","notification","getPolicyForRole","ROLE_UPDATED","addPeer","PolicyChangeManager","eventEmitter","handlePolicyChange","localPeer","known_roles","setKnownRoles","publishParams","setPublishParams","keys","videoSimulcastLayers","screenSimulcastLayers","setVideoSimulcastLayers","setScreenshareSimulcastLayers","oldRole","detail","RequestManager","handleRoleChangeRequest","request","requestedBy","requested_by","onRoleChangeRequest","handleTrackUpdateRequest","trackUpdateRequest","mute","getLocalPeerTracks","sendNotification","onChangeTrackStateRequest","handleChangeTrackStateRequest","localPeerTracks","tracksToBeUpdated","promises","all","onChangeMultiTrackStateRequest","RoomUpdateManager","onPeerList","room","recording","streaming","getRoom","getDefaultRecordingState","rtmp","running","server","sfu","beam","onRoomUpdate","RECORDING_STATE_UPDATED","onRTMPStart","setRTMPStatus","onRTMPStop","onRecordingStart","setRecordingStatus","onRecordingStop","SERVER_RECORDING_STATE_UPDATED","BROWSER_RECORDING_STATE_UPDATED","RTMP_STREAMING_STATE_UPDATED","TrackManager","tracksToProcess","trackStateEntry","getTrackState","removeAuxiliaryTrack","auxiliaryTrackIndex","currentTrackStateInfo","trackEntry","TRACK_MUTED","TRACK_UNMUTED","TRACK_DESCRIPTION_CHANGED","handleTrackMetadataAdd","tracksCopy","state","remoteTrack","simulcastDefinitions","getSimulcastDefinitionsForPeer","TRACK_ADDED","NotificationManager","handleTrackAdd","handleTrackRemove","peerListManager","broadcastManager","policyChangeManager","requestManager","activeSpeakerManager","roomUpdateManager","setListener","setAudioListener","addListener","removeListener","once","handleNotification","isReconnecting","ACTIVE_SPEAKERS","PEER_JOIN","PEER_LEAVE","handleReconnectPeerList","handleInitialPeerList","TRACK_METADATA_ADD","POLICY_CHANGE","CHANGE_TRACK_MUTE_STATE_UPDATE","PEER_UPDATE","RTMP_START","RTMP_STOP","RECORDING_START","RECORDING_STOP","TrackState","TransportState","AnalyticsEventFactory","requestedAt","respondedAt","eventNameFor","getPropertiesWithError","KEY_REQUESTED_AT","KEY_RESPONDED_AT","publish","subscribeFail","deviceChange","selection","rtcStats","ok","suffix","initialProperties","JoinParameters","authToken","peerName","autoSubscribeVideo","TransportFailureCategory","Dependencies","ConnectFailed","SignalDisconnect","PublishIceConnectionFailed","SubscribeIceConnectionFailed","PromiseWithCallbacks","promise","RetryScheduler","onStateChange","schedule","category","task","maxFailedRetries","changeState","scheduleTask","retryTaskIds","future","inProgress","failedRetryCount","TFC","inProgressTask","taskPromise","_","__","hasFailedDependency","dependencies","TFCDependencies","dependencyIndexString","dependency","dependencyTask","dep","Failed","Reconnecting","getDelayForRetryCount","setTimeoutPromise","taskSucceeded","size","Joined","n","pow","jitter","random","round","timeoutId","AnalyticsTransport","sendSingleEvent","flushFailedEvents","failedEvents","dequeue","transportProvider","enqueue","Queue","capacity","Infinity","LocalStorageEvents","initLocalStorageQueue","eventInstance","SignalAnalyticsTransport","RTCStatsMonitor","connections","isMonitored","startLoop","handleConnectionsStats","totalPacketsLost","availableIncomingBitrate","availableOutgoingBitrate","conn","packetsLost","TrackDegradationController","storeParams","getSubscribeDegradationParams","PACKETS_LOST_THRESHOLD","packetLossThreshold","MIN_DEGRADE_GRACE_PERIOD","degradeGracePeriodSeconds","MIN_RECOVER_GRACE_PERIOD","recoverGracePeriodSeconds","degradeGracePeriod","recoverGracePeriod","handleRtcStatsChange","shouldDegrade","degrade","recover","isAttemptingRecover","cancelRecovery","degradeActiveTracksByHalf","recoveringTrack","getActiveTracks","activeTracks","halfCount","pop","includeDegraded","getRemoteVideoTracks","sort","trackA","trackB","comparators","getComparator","getTrackComparators","screenShare","rolePriority","peerAudioLevel","stringComparator","slice","recoverAttemptCount","getDelayForRecoverCount","MAX_RECOVER_GRACE_PERIOD","HMSTransport","deviceManager","Disconnected","jsep","subscribeConnection","candidates","ex","publishConnection","onFailure","joinParameters","retryScheduler","retrySignalDisconnectTask","Leaving","RECONNECT_SIGNAL","analyticsSignalTransport","signalObserver","performPublishRenegotiation","newState","handleIceConnectionFailure","callback","RESTART_ICE","extra","iceRestart","signalConnected","internalConnect","retryPublishIceFailedTask","trackStates","videoSettings","getDevices","customData","Connecting","metaData","joinRequestedAt","initConfig","connectionJoin","shouldRetry","subscribeConnStatsMonitor","removeAllListeners","trackDegradationController","publishTrack","unpublish","unpublishTrack","sendMessage","currentTrackStates","originalTrackState","trackState","newTrackState","changeRole","forPeer","toRole","force","requested_for","acceptRoleChange","rtmpURLs","meeting_url","meetingURL","record","rtmp_urls","stopRTMPOrRecording","changeTrackState","changeMultiTrackState","getSimulcastLayers","UNPUBLISH","offerToReceiveAudio","offerToReceiveVideo","publishConnectionObserver","subscribeConnectionObserver","initRtcStatsMonitor","retrySubscribeIceFailedTask","connectRequestedAt","openSignal","onTrackDegrade","onTrackRestore","decodeJWT","parts","payloadStr","atob","payload","roomId","room_id","userId","Room","AutoplayError","INITIAL_STATE","autoplayFailed","initialized","autoplayCheckPromise","AudioSinkManager","notificationManager","Set","audioEl","playAudioFor","autoPausedTracks","handleTrackAddAsync","style","display","handleAudioPaused","audioSink","append","unpauseAudioTracks","getElementById","childElementCount","handleAudioDeviceChange","updateAudioOutputVolume","unblockAutoplay","elementId","userElement","audioSinkParent","resume","AUTOPLAY","DeviceManager","newDevice","audioOutput","updateAudioOutputDevice","audioDevice","createIdentifier","videoDevice","audioSelection","audioInput","videoSelection","videoInput","prevDevices","currentDevices","some","enumerateDevices","prevVideoInput","prevAudioInput","hasMicrophonePermission","hasWebcamPermission","videoInputChanged","computeChange","audioInputChanged","logDevices","getCurrentSelection","handleAudioInputDeviceChange","handleVideoInputDeviceChange","getNewAudioInputDevice","newAudioTrackSettings","newVideoTrackSettings","handleDeviceChange","defaultDevice","nextDevice","inputDevice","prevSelection","selected","AudioOutputManager","audioSinkManager","setDevice","updateOutputDevice","Comparator","a","b","getPeerComparators","videoEnabled","peerA","peerB","primitiveComparator","audioEnabled","getSpeakers","priority","getPeerByTrackId","Store","getConfig","getPublishParams","comparator","localPeerId","getTracks","concat","getSpeakerPeers","setRoom","updatePeersPolicy","setConfig","rememberDeviceSelection","audioInputDeviceId","audioOutputDeviceId","videoDeviceId","peerTrackStates","subscribeParams","subscribeDegradation","screenshareLayers","layers","videoLayers","getSimulcastDimensions","convertSimulcastLayers","rid","resolution","scaleResolutionDownBy","setErrorListener","onError","RoleChangeManager","removeAuxillaryTrack","wasPublishing","allowed","isPublishing","toRemove","removeVideo","removeAudio","removeScreen","removeLocalTracks","initialSettings","isAudioMuted","isVideoMuted","tracksToUnpublish","localAuxTracks","defaultSettings","LocalTrackManager","getTracksToPublish","canPublishAudio","canPublishVideo","tracksToPublish","trackSettings","getTrackSettings","localTracks","t","screenTrack","isVideoTrackPublished","isAudioTrackPublished","audioFailure","videoFailure","getAVTracks","videoError","audioError","AV","canPublishScreen","screenSettings","bitRate","dimensions","AudioContextManager","createMediaElementSource","resumeContext","PlaylistAudioManager","src","seeked","onerror","oncanplaythrough","audioContextManager","onseeked","getElement","removeAttribute","crossOrigin","PlaylistVideoManager","paused","ended","canvasContext","canvas","DEFAUL_FPS","getVideoElement","videoWidth","videoHeight","clearCanvasAndTracks","onplay","clearRect","list","currentIndex","PlaylistManager","sdk","audioManager","videoManager","addListeners","getList","setList","playItem","seek","PLAYLIST","updatedValue","currentTime","seekTo","getCurrentTime","getCurrentIndex","getCurrentProgress","activeUrl","isPlaying","setDuration","playNext","playPrevious","manager","removeTracks","onProgress","progress","onNewTrackStart","onPlaylistEnded","el","handleEnded","published","isInitialised","isPreviewInProgress","deviceManagersInitialised","HMSSdk","handlePeerLeaveRequest","sdkState","TRACK_DEGRADED","TRACK_RESTORED","transportState","onReconnected","onReconnecting","roomEnded","room_end","onRemovedFromRoom","deviceChangeListener","onDeviceChange","initStoreAndManagers","playlistManager","handleAutoplayError","localTrackManager","getPlaylistManager","getRecordingState","getRTMPState","preview","HMSRoom","userName","policy","policyHandler","setLocalPeerTrack","initPreviewTrackAudioLevelMonitor","initDeviceManagers","onPreview","storedConfig","roleChangeManager","handleLocalPeerRoleUpdate","autoVideoSubscribe","JOIN_DELAY_FIX","notifyJoin","cleanDeviceManagers","getAudioOutput","sendMessageInternal","sendBroadcastMessage","sendGroupMessage","sendDirectMessage","startScreenShare","onStop","audioOnly","stopEndedScreenshare","stopScreenShare","screenTracks","isTrackPresent","TrackKlass","setAnalyticsLevel","setLogLevel","addAudioListener","acceptChangeRole","rtmpStart","recordingStart","getRoles","forRemoteTrack","setAndPublishTracks","handleDeviceChangeError","audioSinkElementId","onJoin","getLocalStream","getLocalDevices","deviceGroups","audioinput","audiooutput","videoinput","validateDeviceAV","videoTrackSettings","audioTrackSettings","isHMSDeviceError"],"mappings":"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"}