import { IStore, KnownRoles, TrackStateEntry } from './IStore';
import HMSRoom from '../models/HMSRoom';
import { HMSLocalPeer, HMSPeer, HMSRemotePeer } from '../models/peer';
import { HMSSpeaker } from '../../interfaces';
import { IErrorListener } from '../../interfaces/error-listener';
import { HMSTrack, HMSVideoTrack, HMSAudioTrack, HMSTrackSource, HMSRemoteVideoTrack, HMSLocalTrack } from '../../media/tracks';
import { SimulcastLayer, SimulcastLayers, SimulcastDimensions, SimulcastLayerDefinition } from '../../interfaces/simulcast-layers';
import { Comparator } from './Comparator';
import { HMSConfig, PublishParams } from '../../interfaces';
declare class Store implements IStore {
    private readonly comparator;
    private room?;
    private knownRoles;
    private localPeerId?;
    private peers;
    private tracks;
    private peerTrackStates;
    private speakers;
    private videoLayers;
    private screenshareLayers;
    private config?;
    private publishParams?;
    private errorListener?;
    getConfig(): HMSConfig | undefined;
    getPublishParams(): PublishParams | undefined;
    getComparator(): Comparator;
    getRoom(): HMSRoom;
    getPolicyForRole(role: string): import("../../interfaces").HMSRole;
    getKnownRoles(): KnownRoles;
    getLocalPeer(): HMSLocalPeer | undefined;
    getRemotePeers(): HMSRemotePeer[];
    getPeers(): HMSPeer[];
    getPeerById(peerId: string): HMSPeer | undefined;
    getTracks(): HMSTrack[];
    getVideoTracks(): HMSVideoTrack[];
    getRemoteVideoTracks(): HMSRemoteVideoTrack[];
    getAudioTracks(): HMSAudioTrack[];
    getPeerTracks(peerId?: string): HMSTrack[];
    getLocalPeerTracks(): HMSLocalTrack[];
    getTrackById(trackId: string): HMSTrack;
    getPeerByTrackId(trackId: string): HMSPeer | undefined;
    getSpeakers(): HMSSpeaker[];
    getSpeakerPeers(): HMSPeer[];
    setRoom(room: HMSRoom): void;
    setKnownRoles(knownRoles: KnownRoles): void;
    setConfig(config: HMSConfig): void;
    setPublishParams(params: PublishParams): void;
    addPeer(peer: HMSPeer): void;
    /**
     * @param {HMSTrack} track the published track that has to be added
     *
     * Note: Only use this method to add published tracks not preview traks
     */
    addTrack(track: HMSTrack): void;
    getTrackState(trackId: string): TrackStateEntry;
    setTrackState(trackStateEntry: TrackStateEntry): void;
    removePeer(peerId: string): void;
    removeTrack(trackId: string): void;
    updateSpeakers(speakers: HMSSpeaker[]): void;
    updateAudioOutputVolume(value: number): void;
    updateAudioOutputDevice(device: MediaDeviceInfo): void;
    getSubscribeDegradationParams(): import("../../interfaces/subscribe-degradation-params").SubscribeDegradationParams | undefined;
    getSimulcastLayers(source: HMSTrackSource): SimulcastLayer[];
    getSimulcastDimensions(source: HMSTrackSource): SimulcastDimensions;
    /**
     * Convert maxBitrate from kbps to bps
     * @internal
     * @param simulcastLayers
     * @returns {SimulcastLayers}
     */
    private convertSimulcastLayers;
    setVideoSimulcastLayers(simulcastLayers: SimulcastLayers): void;
    setScreenshareSimulcastLayers(simulcastLayers: SimulcastLayers): void;
    getSimulcastDefinitionsForPeer(peer: HMSPeer, source: HMSTrackSource): SimulcastLayerDefinition[];
    cleanUp(): void;
    setErrorListener(listener: IErrorListener): void;
    private updatePeersPolicy;
}
export { Store };
