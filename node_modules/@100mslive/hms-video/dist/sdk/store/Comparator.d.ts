import { HMSTrack } from '../..';
import { HMSPeer } from '../models/peer';
import { IStore } from './IStore';
/**
 * Function passed as argument to the sort method of the list.
 * @returns a negative value if first argument is less than second argument, zero if they're equal and a positive value otherwise
 *
 * @see Array.sort
 */
declare type ComparatorFn<T> = (a: T, b: T) => number;
interface PeerComparators {
    videoEnabled: ComparatorFn<HMSPeer>;
    audioEnabled: ComparatorFn<HMSPeer>;
    screenShare: ComparatorFn<HMSPeer>;
    audioLevel: ComparatorFn<HMSPeer | undefined>;
    rolePriority: ComparatorFn<HMSPeer>;
}
interface TrackComparators {
    video: ComparatorFn<HMSTrack>;
    audio: ComparatorFn<HMSTrack>;
    enabled: ComparatorFn<HMSTrack>;
    audioLevel: ComparatorFn<HMSTrack>;
    peerAudioLevel: ComparatorFn<HMSTrack>;
    screenShare: ComparatorFn<HMSTrack>;
    rolePriority: ComparatorFn<HMSTrack>;
}
interface IComparator {
    getPeerComparators: () => PeerComparators;
    getTrackComparators: () => TrackComparators;
}
/**
 * Used to sort list of items(peers/tracks) based on common use cases.
 * Usage: peerList.sort(comparator.getPeerComparators().audioLevel);
 */
export declare class Comparator implements IComparator {
    private readonly store;
    constructor(store: IStore);
    getPeerComparators(): PeerComparators;
    getTrackComparators(): TrackComparators;
    /**
     * @returns a negative value if a is less than b, zero if they're equal and a positive value otherwise
     */
    primitiveComparator: <T>(a: T, b: T) => number;
    stringComparator: (a: string, b: string) => 1 | -1 | 0;
}
export {};
