import { HMSConfig } from '../interfaces';
import HMSInterface from '../interfaces/hms';
import { HMSAudioListener, HMSUpdateListener } from '../interfaces/update-listener';
import { HMSLogLevel } from '../utils/logger';
import { HMSTrackSource, HMSRemoteTrack } from '../media/tracks';
import { HMSLocalPeer, HMSPeer, HMSRemotePeer } from './models/peer';
import Message from './models/HMSMessage';
import { AudioOutputManager } from '../device-manager';
import { HMSAnalyticsLevel } from '../analytics/AnalyticsEventLevel';
import { HMSPreviewListener } from '../interfaces/preview-listener';
import { HMSRoleChangeRequest, HMSRole, HMSChangeMultiTrackStateParams } from '../interfaces';
import { PlaylistManager } from '../playlist-manager';
import { RTMPRecordingConfig } from '../interfaces/rtmp-recording-config';
export declare class HMSSdk implements HMSInterface {
    private transport;
    private TAG;
    private listener?;
    private errorListener?;
    private deviceChangeListener?;
    private audioListener?;
    private store;
    private notificationManager;
    private deviceManager;
    private audioSinkManager;
    private playlistManager;
    private audioOutput;
    private transportState;
    private roleChangeManager?;
    private localTrackManager;
    private sdkState;
    private initStoreAndManagers;
    getPlaylistManager(): PlaylistManager;
    getRecordingState(): import("../interfaces").HMSRecording | undefined;
    getRTMPState(): import("../interfaces").HMSRTMP | undefined;
    private handleAutoplayError;
    private get localPeer();
    private observer;
    private handlePeerLeaveRequest;
    preview(config: HMSConfig, listener: HMSPreviewListener): Promise<void>;
    private handleDeviceChangeError;
    join(config: HMSConfig, listener: HMSUpdateListener): void;
    private cleanUp;
    leave(): Promise<void>;
    getLocalPeer(): HMSLocalPeer | undefined;
    getPeers(): HMSPeer[];
    getAudioOutput(): AudioOutputManager;
    sendMessage(type: string, message: string): void;
    sendBroadcastMessage(message: string, type?: string): Promise<Message>;
    sendGroupMessage(message: string, roles: HMSRole[], type?: string): Promise<Message>;
    sendDirectMessage(message: string, peer: HMSPeer, type?: string): Promise<Message>;
    private sendMessageInternal;
    startScreenShare(onStop: () => void, audioOnly?: boolean): Promise<void>;
    private stopEndedScreenshare;
    stopScreenShare(): Promise<void>;
    addTrack(track: MediaStreamTrack, source?: HMSTrackSource): Promise<void>;
    removeTrack(trackId: string): Promise<void>;
    setAnalyticsLevel(level: HMSAnalyticsLevel): void;
    setLogLevel(level: HMSLogLevel): void;
    addAudioListener(audioListener: HMSAudioListener): void;
    changeRole(forPeer: HMSPeer, toRole: string, force?: boolean): Promise<void>;
    acceptChangeRole(request: HMSRoleChangeRequest): Promise<void>;
    endRoom(lock: boolean, reason: string): Promise<void>;
    removePeer(peer: HMSRemotePeer, reason: string): Promise<void>;
    startRTMPOrRecording(params: RTMPRecordingConfig): Promise<void>;
    stopRTMPAndRecording(): Promise<void>;
    getRoles(): HMSRole[];
    changeTrackState(forRemoteTrack: HMSRemoteTrack, enabled: boolean): Promise<void>;
    changeMultiTrackState(params: HMSChangeMultiTrackStateParams): Promise<void>;
    private publish;
    private setAndPublishTracks;
    private setLocalPeerTrack;
    private initDeviceManagers;
    private cleanDeviceManagers;
    private initPreviewTrackAudioLevelMonitor;
    private get publishParams();
    private notifyJoin;
}
