import HMSMediaStream from './HMSMediaStream';
import { HMSLocalTrack } from '../tracks';
import HMSPublishConnection from '../../connection/publish';
import { HMSTrackSettings, HMSVideoTrackSettings, HMSAudioTrackSettings } from '../settings';
import { IFetchAVTrackOptions } from '../../transport/ITransport';
import { SimulcastLayer } from '../../interfaces';
export default class HMSLocalStream extends HMSMediaStream {
    /** Connection set when publish is called for the first track */
    private connection;
    setConnection(connection: HMSPublishConnection): void;
    static getLocalScreen(videosettings: HMSVideoTrackSettings, audioSettings: HMSAudioTrackSettings): Promise<HMSLocalTrack[]>;
    static getLocalTracks(settings: HMSTrackSettings): Promise<Array<HMSLocalTrack>>;
    static getEmptyLocalTracks(fetchTrackOptions?: IFetchAVTrackOptions, settings?: HMSTrackSettings): Promise<Array<HMSLocalTrack>>;
    addTransceiver(track: HMSLocalTrack, simulcastLayers: SimulcastLayer[]): RTCRtpTransceiver;
    setMaxBitrate(maxBitrate: number, track: HMSLocalTrack): Promise<void>;
    setPreferredCodec(transceiver: RTCRtpTransceiver, kind: string): void;
    /**
     * On mute and unmute of video tracks as well as for changing cameras, we replace the track using replaceTrack api
     * so as to avoid a renegotiation with the backend and reflect changes faster.
     * @param track - the current track
     * @param withTrack - the track to replace it with
     */
    replaceTrack(track: MediaStreamTrack, withTrack: MediaStreamTrack): Promise<void>;
    replaceStreamTrack(track: MediaStreamTrack, withTrack: MediaStreamTrack): void;
    /**
     * In case of video plugins we need to replace the track sent to remote without stopping the original one. As
     * if the original is stopped, plugin would stop getting input frames to process. So only the track in the
     * sender needs to be replaced.
     */
    replaceSenderTrack(track: MediaStreamTrack, withTrack: MediaStreamTrack): Promise<void>;
    removeSender(track: HMSLocalTrack): void;
    trackUpdate(track: HMSLocalTrack): void;
    private static getNativeLocalTracks;
}
