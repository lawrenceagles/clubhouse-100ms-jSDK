import { DeviceManager } from '../device-manager';
import { NotificationManager } from '../notification-manager/NotificationManager';
import { IStore } from '../sdk/store';
import { HMSException } from '../error/HMSException';
import { HMSUpdateListener } from '../interfaces';
export interface AutoplayEvent {
    error: HMSException;
}
export declare const AutoplayError = "autoplay-error";
export declare class AudioSinkManager {
    private store;
    private notificationManager;
    private deviceManager;
    private audioSink?;
    private autoPausedTracks;
    private TAG;
    private volume;
    private eventEmitter;
    private state;
    private audioContext?;
    private listener?;
    constructor(store: IStore, notificationManager: NotificationManager, deviceManager: DeviceManager);
    setListener(listener?: HMSUpdateListener): void;
    addEventListener(event: string, listener: (event: AutoplayEvent) => void): void;
    removeEventListener(event: string, listener: (event: AutoplayEvent) => void): void;
    private get outputDevice();
    getVolume(): number;
    setVolume(value: number): void;
    /**
     *  This function is to be called only on user interaction when
     *  autoplay error is received.
     */
    unblockAutoplay(): Promise<void>;
    init(elementId?: string): void;
    cleanUp(): void;
    private handleAudioPaused;
    private handleTrackUpdate;
    private handleTrackAdd;
    private handleTrackAddAsync;
    private handleAudioDeviceChange;
    /**
     * try to play audio for the passed in track, assume autoplay error happened if play fails
     * @param track
     * @private
     */
    private playAudioFor;
    private handleTrackRemove;
    private unpauseAudioTracks;
}
