import { HMSDeviceManager, DeviceMap } from '../interfaces/HMSDeviceManager';
import { HMSDeviceChangeEvent } from '../interfaces';
import { IStore } from '../sdk/store';
export declare type SelectedDevices = {
    audioInput?: MediaDeviceInfo;
    videoInput?: MediaDeviceInfo;
    audioOutput?: MediaDeviceInfo;
};
export declare class DeviceManager implements HMSDeviceManager {
    private store;
    audioInput: MediaDeviceInfo[];
    audioOutput: MediaDeviceInfo[];
    videoInput: MediaDeviceInfo[];
    outputDevice?: MediaDeviceInfo;
    hasWebcamPermission: boolean;
    hasMicrophonePermission: boolean;
    private eventEmitter;
    private TAG;
    private initialized;
    private videoInputChanged;
    private audioInputChanged;
    constructor(store: IStore);
    updateOutputDevice: (deviceId?: string | undefined) => MediaDeviceInfo | undefined;
    init(): Promise<void>;
    getDevices(): DeviceMap;
    cleanUp(): void;
    private createIdentifier;
    private getCurrentSelection;
    private computeChange;
    private enumerateDevices;
    private handleDeviceChange;
    /**
     * Function to get the device after device change
     * Chrome and Edge provide a default device from which we select the actual device
     * Firefox and safari give 0th device as system default
     * @returns {MediaDeviceInfo}
     */
    getNewAudioInputDevice(): MediaDeviceInfo | undefined;
    /**
     * This method is to select the input/output from same group
     * same group meaning both input/output are of same device
     * This method might override the default coming from browser and system so as to select options from same
     * device type. This is required in certain cases where browser's default is not correct.
     * Algo:
     * 1. find the non default input device if selected one is default by matching device label
     * 2. find the corresponding output device which has the same group id or same label
     * 3. select the default one if nothing was found
     * 4. select the first option if there is no default
     */
    setOutputDevice(deviceChange?: boolean): void;
    private handleAudioInputDeviceChange;
    private handleVideoInputDeviceChange;
    addEventListener(event: string, listener: (event: HMSDeviceChangeEvent) => void): void;
    removeEventListener(event: string, listener: (event: HMSDeviceChangeEvent) => void): void;
    private logDevices;
}
