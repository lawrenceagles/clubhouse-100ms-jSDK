import { HMSException } from './HMSException';
export declare enum HMSAction {
    NONE = "NONE",
    TRACK = "TRACK",
    INIT = "INIT",
    PUBLISH = "PUBLISH",
    UNPUBLISH = "UNPUBLISH",
    JOIN = "JOIN",
    SUBSCRIBE = "SUBSCRIBE",
    DATA_CHANNEL_SEND = "DATA_CHANNEL_SEND",
    RESTART_ICE = "RESTART_ICE",
    VIDEO_PLUGINS = "VIDEO_PLUGINS",
    AUDIO_PLUGINS = "AUDIO_PLUGINS",
    AUTOPLAY = "AUTOPLAY",
    RECONNECT_SIGNAL = "RECONNECT_SIGNAL",
    VALIDATION = "VALIDATION",
    PLAYLIST = "PLAYLIST"
}
export declare const ErrorFactory: {
    WebSocketConnectionErrors: {
        GenericConnect(action: HMSAction, description?: string): HMSException;
        WebSocketConnectionLost(action: HMSAction, description?: string): HMSException;
    };
    InitAPIErrors: {
        ServerErrors(code: number, action: HMSAction, description?: string): HMSException;
        ConnectionLost(action: HMSAction, description?: string): HMSException;
        HTTPError(code: number, action: HMSAction, description?: string): HMSException;
        InvalidEndpointURL(action: HMSAction, description?: string): HMSException;
        EndpointUnreachable(action: HMSAction, description?: string): HMSException;
        InvalidTokenFormat(action: HMSAction, description?: string): HMSException;
    };
    TracksErrors: {
        GenericTrack(action: HMSAction, description?: string): HMSException;
        CantAccessCaptureDevice(action: HMSAction, deviceInfo: string, description?: string): HMSException;
        DeviceNotAvailable(action: HMSAction, deviceInfo: string, description?: string): HMSException;
        DeviceInUse(action: HMSAction, deviceInfo: string, description?: string): HMSException;
        DeviceLostMidway(action: HMSAction, deviceInfo: string, description?: string): HMSException;
        NothingToReturn(action: HMSAction, description?: string): HMSException;
        InvalidVideoSettings(action: HMSAction, description?: string): HMSException;
        AutoplayBlocked(action: HMSAction, description?: string): HMSException;
        CodecChangeNotPermitted(action: HMSAction, description?: string): HMSException;
    };
    WebrtcErrors: {
        CreateOfferFailed(action: HMSAction, description?: string): HMSException;
        CreateAnswerFailed(action: HMSAction, description?: string): HMSException;
        SetLocalDescriptionFailed(action: HMSAction, description?: string): HMSException;
        SetRemoteDescriptionFailed(action: HMSAction, description?: string): HMSException;
        ICEFailure(action: HMSAction, description?: string): HMSException;
    };
    WebsocketMethodErrors: {
        ServerErrors(code: number, action: HMSAction, description: string): HMSException;
        AlreadyJoined(action: HMSAction, description?: string): HMSException;
        CannotJoinPreviewInProgress(action: HMSAction, description?: string): HMSException;
    };
    GenericErrors: {
        NotConnected(action: HMSAction, description?: string): HMSException;
        Signalling(action: HMSAction, description: string): HMSException;
        Unknown(action: HMSAction, description: string): HMSException;
        NotReady(action: HMSAction, description?: string): HMSException;
        JsonParsingFailed(action: HMSAction, jsonMessage: string, description?: string): HMSException;
        TrackMetadataMissing(action: HMSAction, description?: string): HMSException;
        RTCTrackMissing(action: HMSAction, description?: string): HMSException;
        PeerMetadataMissing(action: HMSAction, description?: string): HMSException;
        ValidationFailed(message: string, entity?: any): HMSException;
        InvalidRole(action: HMSAction, description: string): HMSException;
    };
    MediaPluginErrors: {
        PlatformNotSupported(action: HMSAction, description?: string): HMSException;
        InitFailed(action: HMSAction, description?: string): HMSException;
        ProcessingFailed(action: HMSAction, description?: string): HMSException;
        AddAlreadyInProgress(action: HMSAction, description?: string): HMSException;
    };
    PlaylistErrors: {
        NoEntryToPlay(action: HMSAction, description: string): HMSException;
        NoEntryPlaying(action: HMSAction, description: string): HMSException;
    };
};
