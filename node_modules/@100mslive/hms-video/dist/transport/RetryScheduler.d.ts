import { AnalyticsEventsService } from '../analytics/AnalyticsEventsService';
import { HMSException } from '../error/HMSException';
import { TransportFailureCategory as TFC } from './models/TransportFailureCategory';
import { TransportState } from './models/TransportState';
/**
 * Task which is executed by [RetryScheduler.schedule] until max retry count
 * is reached.
 *
 * Any exception raised while executing the task assumes that task is failed.
 * Failed tasks are retried if max retry count is not reached.
 *
 * @returns True if the task if successful, otherwise False
 *
 *
 */
declare type RetryTask = () => Promise<boolean>;
export declare class RetryScheduler {
    private analyticsEventsService;
    private onStateChange;
    private inProgress;
    private retryTaskIds;
    constructor(analyticsEventsService: AnalyticsEventsService, onStateChange: (state: TransportState, error?: HMSException) => Promise<void>);
    schedule(category: TFC, error: HMSException, task: RetryTask, maxFailedRetries?: number, changeState?: boolean): Promise<void>;
    reset(): void;
    private scheduleTask;
    private sendEvent;
    private getDelayForRetryCount;
    private setTimeoutPromise;
}
export {};
