import ITransportObserver from './ITransportObserver';
import ITransport, { IFetchAVTrackOptions } from './ITransport';
import { HMSLocalTrack } from '../media/tracks';
import { HMSVideoTrackSettings, HMSAudioTrackSettings, HMSTrackSettings } from '../media/settings';
import { HMSPeer, HMSRoleChangeRequest } from '../interfaces';
import { IStore } from '../sdk/store';
import { DeviceManager } from '../device-manager';
import { MultiTrackUpdateRequestParams, TrackUpdateRequestParams } from '../signal/interfaces';
import Message from '../sdk/models/HMSMessage';
import { RTMPRecordingConfig } from '../interfaces/rtmp-recording-config';
export default class HMSTransport implements ITransport {
    private observer;
    private deviceManager;
    private store;
    private state;
    private trackStates;
    private publishConnection;
    private subscribeConnection;
    private initConfig?;
    private endpoint;
    private joinParameters?;
    private retryScheduler;
    private subscribeConnStatsMonitor?;
    private trackDegradationController?;
    constructor(observer: ITransportObserver, deviceManager: DeviceManager, store: IStore);
    /**
     * Map of callbacks used to wait for an event to fire.
     * Used here for:
     *  1. publish/unpublish waits for [IPublishConnectionObserver.onRenegotiationNeeded] to complete
     */
    private readonly callbacks;
    private signalObserver;
    private signal;
    private analyticsSignalTransport;
    private publishConnectionObserver;
    private subscribeConnectionObserver;
    getLocalScreen(videoSettings: HMSVideoTrackSettings, audioSettings: HMSAudioTrackSettings): Promise<Array<HMSLocalTrack>>;
    getLocalTracks(settings: HMSTrackSettings): Promise<Array<HMSLocalTrack>>;
    getEmptyLocalTracks(fetchTrackOptions?: IFetchAVTrackOptions, settings?: HMSTrackSettings): Promise<Array<HMSLocalTrack>>;
    join(authToken: string, peerId: string, customData: {
        name: string;
        metaData: string;
    }, initEndpoint?: string, autoSubscribeVideo?: boolean): Promise<void>;
    connect(token: string, endpoint: string, peerId: string): Promise<void>;
    leave(): Promise<void>;
    publish(tracks: Array<HMSLocalTrack>): Promise<void>;
    unpublish(tracks: Array<HMSLocalTrack>): Promise<void>;
    sendMessage(message: Message): Promise<void>;
    /**
     * TODO: check if track.publishedTrackId be used instead of the hack to match with track with same type and
     * source. The hack won't work if there are multiple tracks with same source and type.
     */
    trackUpdate(track: HMSLocalTrack): void;
    changeRole(forPeer: HMSPeer, toRole: string, force?: boolean): Promise<void>;
    acceptRoleChange(request: HMSRoleChangeRequest): Promise<void>;
    endRoom(lock: boolean, reason: string): Promise<void>;
    removePeer(peerId: string, reason: string): Promise<void>;
    startRTMPOrRecording(params: RTMPRecordingConfig): Promise<void>;
    stopRTMPOrRecording(): Promise<void>;
    changeTrackState(trackUpdateRequest: TrackUpdateRequestParams): Promise<void>;
    changeMultiTrackState(trackUpdateRequest: MultiTrackUpdateRequestParams): Promise<void>;
    private publishTrack;
    private unpublishTrack;
    private connectionJoin;
    private performPublishRenegotiation;
    private handleIceConnectionFailure;
    private internalConnect;
    private openSignal;
    private initRtcStatsMonitor;
    private retryPublishIceFailedTask;
    private retrySubscribeIceFailedTask;
    private retrySignalDisconnectTask;
}
